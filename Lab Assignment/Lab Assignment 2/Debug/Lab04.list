
Lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000191c  080090f0  080090f0  0000a0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa0c  0800aa0c  0000c060  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa0c  0800aa0c  0000c060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa0c  0800aa0c  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa0c  0800aa0c  0000ba0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa10  0800aa10  0000ba10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800aa14  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000060  0800aa74  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  0800aa74  0000c250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004446  00000000  00000000  0000c089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013bb  00000000  00000000  000104cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000560  00000000  00000000  00011890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003f3  00000000  00000000  00011df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e69  00000000  00000000  000121e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007565  00000000  00000000  0002b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef51  00000000  00000000  000325b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b0c  00000000  00000000  000c1548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000c3054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000060 	.word	0x20000060
 8000204:	00000000 	.word	0x00000000
 8000208:	080090d8 	.word	0x080090d8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000064 	.word	0x20000064
 8000224:	080090d8 	.word	0x080090d8

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <__aeabi_frsub>:
 8000834:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	e002      	b.n	8000840 <__addsf3>
 800083a:	bf00      	nop

0800083c <__aeabi_fsub>:
 800083c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000840 <__addsf3>:
 8000840:	0042      	lsls	r2, r0, #1
 8000842:	bf1f      	itttt	ne
 8000844:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000848:	ea92 0f03 	teqne	r2, r3
 800084c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000850:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000854:	d06a      	beq.n	800092c <__addsf3+0xec>
 8000856:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800085a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800085e:	bfc1      	itttt	gt
 8000860:	18d2      	addgt	r2, r2, r3
 8000862:	4041      	eorgt	r1, r0
 8000864:	4048      	eorgt	r0, r1
 8000866:	4041      	eorgt	r1, r0
 8000868:	bfb8      	it	lt
 800086a:	425b      	neglt	r3, r3
 800086c:	2b19      	cmp	r3, #25
 800086e:	bf88      	it	hi
 8000870:	4770      	bxhi	lr
 8000872:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000876:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800087a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800087e:	bf18      	it	ne
 8000880:	4240      	negne	r0, r0
 8000882:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000886:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800088a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800088e:	bf18      	it	ne
 8000890:	4249      	negne	r1, r1
 8000892:	ea92 0f03 	teq	r2, r3
 8000896:	d03f      	beq.n	8000918 <__addsf3+0xd8>
 8000898:	f1a2 0201 	sub.w	r2, r2, #1
 800089c:	fa41 fc03 	asr.w	ip, r1, r3
 80008a0:	eb10 000c 	adds.w	r0, r0, ip
 80008a4:	f1c3 0320 	rsb	r3, r3, #32
 80008a8:	fa01 f103 	lsl.w	r1, r1, r3
 80008ac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008b0:	d502      	bpl.n	80008b8 <__addsf3+0x78>
 80008b2:	4249      	negs	r1, r1
 80008b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008b8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80008bc:	d313      	bcc.n	80008e6 <__addsf3+0xa6>
 80008be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80008c2:	d306      	bcc.n	80008d2 <__addsf3+0x92>
 80008c4:	0840      	lsrs	r0, r0, #1
 80008c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80008ca:	f102 0201 	add.w	r2, r2, #1
 80008ce:	2afe      	cmp	r2, #254	@ 0xfe
 80008d0:	d251      	bcs.n	8000976 <__addsf3+0x136>
 80008d2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	ea40 0003 	orr.w	r0, r0, r3
 80008e4:	4770      	bx	lr
 80008e6:	0049      	lsls	r1, r1, #1
 80008e8:	eb40 0000 	adc.w	r0, r0, r0
 80008ec:	3a01      	subs	r2, #1
 80008ee:	bf28      	it	cs
 80008f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80008f4:	d2ed      	bcs.n	80008d2 <__addsf3+0x92>
 80008f6:	fab0 fc80 	clz	ip, r0
 80008fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80008fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000902:	fa00 f00c 	lsl.w	r0, r0, ip
 8000906:	bfaa      	itet	ge
 8000908:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800090c:	4252      	neglt	r2, r2
 800090e:	4318      	orrge	r0, r3
 8000910:	bfbc      	itt	lt
 8000912:	40d0      	lsrlt	r0, r2
 8000914:	4318      	orrlt	r0, r3
 8000916:	4770      	bx	lr
 8000918:	f092 0f00 	teq	r2, #0
 800091c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000920:	bf06      	itte	eq
 8000922:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000926:	3201      	addeq	r2, #1
 8000928:	3b01      	subne	r3, #1
 800092a:	e7b5      	b.n	8000898 <__addsf3+0x58>
 800092c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000930:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000934:	bf18      	it	ne
 8000936:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093a:	d021      	beq.n	8000980 <__addsf3+0x140>
 800093c:	ea92 0f03 	teq	r2, r3
 8000940:	d004      	beq.n	800094c <__addsf3+0x10c>
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	bf08      	it	eq
 8000948:	4608      	moveq	r0, r1
 800094a:	4770      	bx	lr
 800094c:	ea90 0f01 	teq	r0, r1
 8000950:	bf1c      	itt	ne
 8000952:	2000      	movne	r0, #0
 8000954:	4770      	bxne	lr
 8000956:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800095a:	d104      	bne.n	8000966 <__addsf3+0x126>
 800095c:	0040      	lsls	r0, r0, #1
 800095e:	bf28      	it	cs
 8000960:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000964:	4770      	bx	lr
 8000966:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800096a:	bf3c      	itt	cc
 800096c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000970:	4770      	bxcc	lr
 8000972:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000976:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800097e:	4770      	bx	lr
 8000980:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000984:	bf16      	itet	ne
 8000986:	4608      	movne	r0, r1
 8000988:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800098c:	4601      	movne	r1, r0
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	bf06      	itte	eq
 8000992:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000996:	ea90 0f01 	teqeq	r0, r1
 800099a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800099e:	4770      	bx	lr

080009a0 <__aeabi_ui2f>:
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	e004      	b.n	80009b0 <__aeabi_i2f+0x8>
 80009a6:	bf00      	nop

080009a8 <__aeabi_i2f>:
 80009a8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80009ac:	bf48      	it	mi
 80009ae:	4240      	negmi	r0, r0
 80009b0:	ea5f 0c00 	movs.w	ip, r0
 80009b4:	bf08      	it	eq
 80009b6:	4770      	bxeq	lr
 80009b8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80009bc:	4601      	mov	r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	e01c      	b.n	80009fe <__aeabi_l2f+0x2a>

080009c4 <__aeabi_ul2f>:
 80009c4:	ea50 0201 	orrs.w	r2, r0, r1
 80009c8:	bf08      	it	eq
 80009ca:	4770      	bxeq	lr
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	e00a      	b.n	80009e8 <__aeabi_l2f+0x14>
 80009d2:	bf00      	nop

080009d4 <__aeabi_l2f>:
 80009d4:	ea50 0201 	orrs.w	r2, r0, r1
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80009e0:	d502      	bpl.n	80009e8 <__aeabi_l2f+0x14>
 80009e2:	4240      	negs	r0, r0
 80009e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e8:	ea5f 0c01 	movs.w	ip, r1
 80009ec:	bf02      	ittt	eq
 80009ee:	4684      	moveq	ip, r0
 80009f0:	4601      	moveq	r1, r0
 80009f2:	2000      	moveq	r0, #0
 80009f4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80009f8:	bf08      	it	eq
 80009fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000a02:	fabc f28c 	clz	r2, ip
 8000a06:	3a08      	subs	r2, #8
 8000a08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a0c:	db10      	blt.n	8000a30 <__aeabi_l2f+0x5c>
 8000a0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a12:	4463      	add	r3, ip
 8000a14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a18:	f1c2 0220 	rsb	r2, r2, #32
 8000a1c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a20:	fa20 f202 	lsr.w	r2, r0, r2
 8000a24:	eb43 0002 	adc.w	r0, r3, r2
 8000a28:	bf08      	it	eq
 8000a2a:	f020 0001 	biceq.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	f102 0220 	add.w	r2, r2, #32
 8000a34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a38:	f1c2 0220 	rsb	r2, r2, #32
 8000a3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a40:	fa21 f202 	lsr.w	r2, r1, r2
 8000a44:	eb43 0002 	adc.w	r0, r3, r2
 8000a48:	bf08      	it	eq
 8000a4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4e:	4770      	bx	lr

08000a50 <__aeabi_fmul>:
 8000a50:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a58:	bf1e      	ittt	ne
 8000a5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a5e:	ea92 0f0c 	teqne	r2, ip
 8000a62:	ea93 0f0c 	teqne	r3, ip
 8000a66:	d06f      	beq.n	8000b48 <__aeabi_fmul+0xf8>
 8000a68:	441a      	add	r2, r3
 8000a6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000a6e:	0240      	lsls	r0, r0, #9
 8000a70:	bf18      	it	ne
 8000a72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a76:	d01e      	beq.n	8000ab6 <__aeabi_fmul+0x66>
 8000a78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a84:	fba0 3101 	umull	r3, r1, r0, r1
 8000a88:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a8c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a90:	bf3e      	ittt	cc
 8000a92:	0049      	lslcc	r1, r1, #1
 8000a94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a98:	005b      	lslcc	r3, r3, #1
 8000a9a:	ea40 0001 	orr.w	r0, r0, r1
 8000a9e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000aa2:	2afd      	cmp	r2, #253	@ 0xfd
 8000aa4:	d81d      	bhi.n	8000ae2 <__aeabi_fmul+0x92>
 8000aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000aaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aae:	bf08      	it	eq
 8000ab0:	f020 0001 	biceq.w	r0, r0, #1
 8000ab4:	4770      	bx	lr
 8000ab6:	f090 0f00 	teq	r0, #0
 8000aba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000abe:	bf08      	it	eq
 8000ac0:	0249      	lsleq	r1, r1, #9
 8000ac2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ac6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000aca:	3a7f      	subs	r2, #127	@ 0x7f
 8000acc:	bfc2      	ittt	gt
 8000ace:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ad2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ad6:	4770      	bxgt	lr
 8000ad8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	dc5d      	bgt.n	8000ba0 <__aeabi_fmul+0x150>
 8000ae4:	f112 0f19 	cmn.w	r2, #25
 8000ae8:	bfdc      	itt	le
 8000aea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000aee:	4770      	bxle	lr
 8000af0:	f1c2 0200 	rsb	r2, r2, #0
 8000af4:	0041      	lsls	r1, r0, #1
 8000af6:	fa21 f102 	lsr.w	r1, r1, r2
 8000afa:	f1c2 0220 	rsb	r2, r2, #32
 8000afe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b06:	f140 0000 	adc.w	r0, r0, #0
 8000b0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b0e:	bf08      	it	eq
 8000b10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b14:	4770      	bx	lr
 8000b16:	f092 0f00 	teq	r2, #0
 8000b1a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b1e:	bf02      	ittt	eq
 8000b20:	0040      	lsleq	r0, r0, #1
 8000b22:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b26:	3a01      	subeq	r2, #1
 8000b28:	d0f9      	beq.n	8000b1e <__aeabi_fmul+0xce>
 8000b2a:	ea40 000c 	orr.w	r0, r0, ip
 8000b2e:	f093 0f00 	teq	r3, #0
 8000b32:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b36:	bf02      	ittt	eq
 8000b38:	0049      	lsleq	r1, r1, #1
 8000b3a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b3e:	3b01      	subeq	r3, #1
 8000b40:	d0f9      	beq.n	8000b36 <__aeabi_fmul+0xe6>
 8000b42:	ea41 010c 	orr.w	r1, r1, ip
 8000b46:	e78f      	b.n	8000a68 <__aeabi_fmul+0x18>
 8000b48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	bf18      	it	ne
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d00a      	beq.n	8000b6e <__aeabi_fmul+0x11e>
 8000b58:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b5c:	bf18      	it	ne
 8000b5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b62:	d1d8      	bne.n	8000b16 <__aeabi_fmul+0xc6>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f090 0f00 	teq	r0, #0
 8000b72:	bf17      	itett	ne
 8000b74:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	f091 0f00 	teqne	r1, #0
 8000b7e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b82:	d014      	beq.n	8000bae <__aeabi_fmul+0x15e>
 8000b84:	ea92 0f0c 	teq	r2, ip
 8000b88:	d101      	bne.n	8000b8e <__aeabi_fmul+0x13e>
 8000b8a:	0242      	lsls	r2, r0, #9
 8000b8c:	d10f      	bne.n	8000bae <__aeabi_fmul+0x15e>
 8000b8e:	ea93 0f0c 	teq	r3, ip
 8000b92:	d103      	bne.n	8000b9c <__aeabi_fmul+0x14c>
 8000b94:	024b      	lsls	r3, r1, #9
 8000b96:	bf18      	it	ne
 8000b98:	4608      	movne	r0, r1
 8000b9a:	d108      	bne.n	8000bae <__aeabi_fmul+0x15e>
 8000b9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ba0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bb2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fdiv>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d069      	beq.n	8000ca4 <__aeabi_fdiv+0xec>
 8000bd0:	eba2 0203 	sub.w	r2, r2, r3
 8000bd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd8:	0249      	lsls	r1, r1, #9
 8000bda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bde:	d037      	beq.n	8000c50 <__aeabi_fdiv+0x98>
 8000be0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000be4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000be8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	bf38      	it	cc
 8000bf4:	005b      	lslcc	r3, r3, #1
 8000bf6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000bfa:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	bf24      	itt	cs
 8000c02:	1a5b      	subcs	r3, r3, r1
 8000c04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c0c:	bf24      	itt	cs
 8000c0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c1a:	bf24      	itt	cs
 8000c1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c28:	bf24      	itt	cs
 8000c2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	bf18      	it	ne
 8000c36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c3a:	d1e0      	bne.n	8000bfe <__aeabi_fdiv+0x46>
 8000c3c:	2afd      	cmp	r2, #253	@ 0xfd
 8000c3e:	f63f af50 	bhi.w	8000ae2 <__aeabi_fmul+0x92>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c58:	327f      	adds	r2, #127	@ 0x7f
 8000c5a:	bfc2      	ittt	gt
 8000c5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c64:	4770      	bxgt	lr
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	3a01      	subs	r2, #1
 8000c70:	e737      	b.n	8000ae2 <__aeabi_fmul+0x92>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c7a:	bf02      	ittt	eq
 8000c7c:	0040      	lsleq	r0, r0, #1
 8000c7e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c82:	3a01      	subeq	r2, #1
 8000c84:	d0f9      	beq.n	8000c7a <__aeabi_fdiv+0xc2>
 8000c86:	ea40 000c 	orr.w	r0, r0, ip
 8000c8a:	f093 0f00 	teq	r3, #0
 8000c8e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c92:	bf02      	ittt	eq
 8000c94:	0049      	lsleq	r1, r1, #1
 8000c96:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c9a:	3b01      	subeq	r3, #1
 8000c9c:	d0f9      	beq.n	8000c92 <__aeabi_fdiv+0xda>
 8000c9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ca2:	e795      	b.n	8000bd0 <__aeabi_fdiv+0x18>
 8000ca4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca8:	ea92 0f0c 	teq	r2, ip
 8000cac:	d108      	bne.n	8000cc0 <__aeabi_fdiv+0x108>
 8000cae:	0242      	lsls	r2, r0, #9
 8000cb0:	f47f af7d 	bne.w	8000bae <__aeabi_fmul+0x15e>
 8000cb4:	ea93 0f0c 	teq	r3, ip
 8000cb8:	f47f af70 	bne.w	8000b9c <__aeabi_fmul+0x14c>
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e776      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cc0:	ea93 0f0c 	teq	r3, ip
 8000cc4:	d104      	bne.n	8000cd0 <__aeabi_fdiv+0x118>
 8000cc6:	024b      	lsls	r3, r1, #9
 8000cc8:	f43f af4c 	beq.w	8000b64 <__aeabi_fmul+0x114>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	e76e      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cda:	d1ca      	bne.n	8000c72 <__aeabi_fdiv+0xba>
 8000cdc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ce0:	f47f af5c 	bne.w	8000b9c <__aeabi_fmul+0x14c>
 8000ce4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	f47f af3c 	bne.w	8000b64 <__aeabi_fmul+0x114>
 8000cec:	e75f      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cee:	bf00      	nop

08000cf0 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <LCD_WR_REG+0x40>)
 8000cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d00:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <LCD_WR_REG+0x40>)
 8000d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d08:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <LCD_WR_REG+0x44>)
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <LCD_WR_REG+0x40>)
 8000d12:	2280      	movs	r2, #128	@ 0x80
 8000d14:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <LCD_WR_REG+0x40>)
 8000d18:	2280      	movs	r2, #128	@ 0x80
 8000d1a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <LCD_WR_REG+0x40>)
 8000d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d22:	611a      	str	r2, [r3, #16]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40010c00 	.word	0x40010c00

08000d38 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <LCD_WR_DATAX+0x40>)
 8000d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d48:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <LCD_WR_DATAX+0x40>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d50:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LCD_WR_DATAX+0x44>)
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000d58:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <LCD_WR_DATAX+0x40>)
 8000d5a:	2280      	movs	r2, #128	@ 0x80
 8000d5c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <LCD_WR_DATAX+0x40>)
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <LCD_WR_DATAX+0x40>)
 8000d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6a:	611a      	str	r2, [r3, #16]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <LCD_RD_DATA+0x7c>)
 8000d88:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000d8c:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <LCD_RD_DATA+0x7c>)
 8000d90:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000d94:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000d96:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <LCD_RD_DATA+0x7c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <LCD_RD_DATA+0x80>)
 8000d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000da2:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <LCD_RD_DATA+0x80>)
 8000da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000daa:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <LCD_RD_DATA+0x80>)
 8000dae:	2240      	movs	r2, #64	@ 0x40
 8000db0:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000db2:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <LCD_RD_DATA+0x84>)
 8000db4:	889b      	ldrh	r3, [r3, #4]
 8000db6:	f648 1289 	movw	r2, #35209	@ 0x8989
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d102      	bne.n	8000dc4 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f006 fd4c 	bl	800785c <HAL_Delay>
	t = DATAIN
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <LCD_RD_DATA+0x7c>)
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <LCD_RD_DATA+0x80>)
 8000dcc:	2240      	movs	r2, #64	@ 0x40
 8000dce:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <LCD_RD_DATA+0x80>)
 8000dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dd6:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <LCD_RD_DATA+0x7c>)
 8000dda:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000dde:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <LCD_RD_DATA+0x7c>)
 8000de2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000de6:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <LCD_RD_DATA+0x7c>)
 8000dea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dee:	60da      	str	r2, [r3, #12]
	return t;
 8000df0:	88fb      	ldrh	r3, [r7, #6]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40011000 	.word	0x40011000
 8000e04:	20000080 	.word	0x20000080

08000e08 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	80fb      	strh	r3, [r7, #6]
 8000e14:	4613      	mov	r3, r2
 8000e16:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff68 	bl	8000cf0 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <LCD_WriteReg+0x4c>)
 8000e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <LCD_WriteReg+0x4c>)
 8000e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e2e:	615a      	str	r2, [r3, #20]
 8000e30:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <LCD_WriteReg+0x50>)
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	60d3      	str	r3, [r2, #12]
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <LCD_WriteReg+0x4c>)
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	615a      	str	r2, [r3, #20]
 8000e3c:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <LCD_WriteReg+0x4c>)
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	611a      	str	r2, [r3, #16]
 8000e42:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <LCD_WriteReg+0x4c>)
 8000e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e48:	611a      	str	r2, [r3, #16]
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40010c00 	.word	0x40010c00

08000e5c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff41 	bl	8000cf0 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000e6e:	f7ff ff87 	bl	8000d80 <LCD_RD_DATA>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <LCD_WriteRAM_Prepare+0x14>)
 8000e82:	891b      	ldrh	r3, [r3, #8]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff33 	bl	8000cf0 <LCD_WR_REG>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000080 	.word	0x20000080

08000e94 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	80fb      	strh	r3, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000ea4:	4b73      	ldr	r3, [pc, #460]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000ea6:	889b      	ldrh	r3, [r3, #4]
 8000ea8:	f249 3241 	movw	r2, #37697	@ 0x9341
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d005      	beq.n	8000ebc <LCD_SetCursor+0x28>
 8000eb0:	4b70      	ldr	r3, [pc, #448]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000eb2:	889b      	ldrh	r3, [r3, #4]
 8000eb4:	f245 3210 	movw	r2, #21264	@ 0x5310
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d164      	bne.n	8000f86 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000ebe:	895b      	ldrh	r3, [r3, #10]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff15 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	4b6a      	ldr	r3, [pc, #424]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b67      	ldr	r3, [pc, #412]	@ (800107c <LCD_SetCursor+0x1e8>)
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	4b65      	ldr	r3, [pc, #404]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000ee2:	2280      	movs	r2, #128	@ 0x80
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	4b64      	ldr	r3, [pc, #400]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b62      	ldr	r3, [pc, #392]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000ef4:	4b60      	ldr	r3, [pc, #384]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	4b5e      	ldr	r3, [pc, #376]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	4a5d      	ldr	r2, [pc, #372]	@ (800107c <LCD_SetCursor+0x1e8>)
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	60d3      	str	r3, [r2, #12]
 8000f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f0e:	2280      	movs	r2, #128	@ 0x80
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	4b59      	ldr	r3, [pc, #356]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f14:	2280      	movs	r2, #128	@ 0x80
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	4b57      	ldr	r3, [pc, #348]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f1e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000f20:	4b54      	ldr	r3, [pc, #336]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000f22:	899b      	ldrh	r3, [r3, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fee3 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000f2a:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f30:	611a      	str	r2, [r3, #16]
 8000f32:	4b51      	ldr	r3, [pc, #324]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f38:	615a      	str	r2, [r3, #20]
 8000f3a:	88bb      	ldrh	r3, [r7, #4]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b4e      	ldr	r3, [pc, #312]	@ (800107c <LCD_SetCursor+0x1e8>)
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	4b4c      	ldr	r3, [pc, #304]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	615a      	str	r2, [r3, #20]
 8000f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000f58:	4b47      	ldr	r3, [pc, #284]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	4b45      	ldr	r3, [pc, #276]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	4a44      	ldr	r2, [pc, #272]	@ (800107c <LCD_SetCursor+0x1e8>)
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	60d3      	str	r3, [r2, #12]
 8000f70:	4b41      	ldr	r3, [pc, #260]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f72:	2280      	movs	r2, #128	@ 0x80
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	4b40      	ldr	r3, [pc, #256]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f78:	2280      	movs	r2, #128	@ 0x80
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f82:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000f84:	e248      	b.n	8001418 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000f88:	889b      	ldrh	r3, [r3, #4]
 8000f8a:	f646 0204 	movw	r2, #26628	@ 0x6804
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d176      	bne.n	8001080 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000f94:	799b      	ldrb	r3, [r3, #6]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d106      	bne.n	8000fa8 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000f9a:	4b36      	ldr	r3, [pc, #216]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000f9c:	881a      	ldrh	r2, [r3, #0]
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000fa8:	4b32      	ldr	r3, [pc, #200]	@ (8001074 <LCD_SetCursor+0x1e0>)
 8000faa:	895b      	ldrh	r3, [r3, #10]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fe9f 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000fb2:	4b31      	ldr	r3, [pc, #196]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	4b2f      	ldr	r3, [pc, #188]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800107c <LCD_SetCursor+0x1e8>)
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000fce:	2280      	movs	r2, #128	@ 0x80
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000fd4:	2280      	movs	r2, #128	@ 0x80
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	4b27      	ldr	r3, [pc, #156]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fde:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000fe0:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000fe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4a22      	ldr	r2, [pc, #136]	@ (800107c <LCD_SetCursor+0x1e8>)
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	60d3      	str	r3, [r2, #12]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8000ffa:	2280      	movs	r2, #128	@ 0x80
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800100c:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <LCD_SetCursor+0x1e0>)
 800100e:	899b      	ldrh	r3, [r3, #12]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe6d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001016:	4b18      	ldr	r3, [pc, #96]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <LCD_SetCursor+0x1e8>)
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	615a      	str	r2, [r3, #20]
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <LCD_SetCursor+0x1e4>)
 800103e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001042:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <LCD_SetCursor+0x1e4>)
 800104e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	4a09      	ldr	r2, [pc, #36]	@ (800107c <LCD_SetCursor+0x1e8>)
 8001058:	b2db      	uxtb	r3, r3
 800105a:	60d3      	str	r3, [r2, #12]
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <LCD_SetCursor+0x1e4>)
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <LCD_SetCursor+0x1e4>)
 8001064:	2280      	movs	r2, #128	@ 0x80
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <LCD_SetCursor+0x1e4>)
 800106a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800106e:	611a      	str	r2, [r3, #16]
}
 8001070:	e1d2      	b.n	8001418 <LCD_SetCursor+0x584>
 8001072:	bf00      	nop
 8001074:	20000080 	.word	0x20000080
 8001078:	40011000 	.word	0x40011000
 800107c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001080:	4b99      	ldr	r3, [pc, #612]	@ (80012e8 <LCD_SetCursor+0x454>)
 8001082:	889b      	ldrh	r3, [r3, #4]
 8001084:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001088:	4293      	cmp	r3, r2
 800108a:	f040 8133 	bne.w	80012f4 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 800108e:	4b96      	ldr	r3, [pc, #600]	@ (80012e8 <LCD_SetCursor+0x454>)
 8001090:	799b      	ldrb	r3, [r3, #6]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d163      	bne.n	800115e <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8001096:	4b94      	ldr	r3, [pc, #592]	@ (80012e8 <LCD_SetCursor+0x454>)
 8001098:	881a      	ldrh	r2, [r3, #0]
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	3b01      	subs	r3, #1
 80010a2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80010a4:	4b90      	ldr	r3, [pc, #576]	@ (80012e8 <LCD_SetCursor+0x454>)
 80010a6:	895b      	ldrh	r3, [r3, #10]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe21 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80010ae:	4b8f      	ldr	r3, [pc, #572]	@ (80012ec <LCD_SetCursor+0x458>)
 80010b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	4b8d      	ldr	r3, [pc, #564]	@ (80012ec <LCD_SetCursor+0x458>)
 80010b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010bc:	615a      	str	r2, [r3, #20]
 80010be:	4b8c      	ldr	r3, [pc, #560]	@ (80012f0 <LCD_SetCursor+0x45c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	4b89      	ldr	r3, [pc, #548]	@ (80012ec <LCD_SetCursor+0x458>)
 80010c6:	2280      	movs	r2, #128	@ 0x80
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	4b88      	ldr	r3, [pc, #544]	@ (80012ec <LCD_SetCursor+0x458>)
 80010cc:	2280      	movs	r2, #128	@ 0x80
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	4b86      	ldr	r3, [pc, #536]	@ (80012ec <LCD_SetCursor+0x458>)
 80010d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010d6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80010d8:	4b84      	ldr	r3, [pc, #528]	@ (80012ec <LCD_SetCursor+0x458>)
 80010da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	4b82      	ldr	r3, [pc, #520]	@ (80012ec <LCD_SetCursor+0x458>)
 80010e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010e6:	615a      	str	r2, [r3, #20]
 80010e8:	4b81      	ldr	r3, [pc, #516]	@ (80012f0 <LCD_SetCursor+0x45c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	4b7f      	ldr	r3, [pc, #508]	@ (80012ec <LCD_SetCursor+0x458>)
 80010f0:	2280      	movs	r2, #128	@ 0x80
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	4b7d      	ldr	r3, [pc, #500]	@ (80012ec <LCD_SetCursor+0x458>)
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	4b7c      	ldr	r3, [pc, #496]	@ (80012ec <LCD_SetCursor+0x458>)
 80010fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001100:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8001102:	4b7a      	ldr	r3, [pc, #488]	@ (80012ec <LCD_SetCursor+0x458>)
 8001104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	4b78      	ldr	r3, [pc, #480]	@ (80012ec <LCD_SetCursor+0x458>)
 800110c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b75      	ldr	r3, [pc, #468]	@ (80012f0 <LCD_SetCursor+0x45c>)
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	4b73      	ldr	r3, [pc, #460]	@ (80012ec <LCD_SetCursor+0x458>)
 800111e:	2280      	movs	r2, #128	@ 0x80
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	4b72      	ldr	r3, [pc, #456]	@ (80012ec <LCD_SetCursor+0x458>)
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	4b70      	ldr	r3, [pc, #448]	@ (80012ec <LCD_SetCursor+0x458>)
 800112a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800112e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001130:	4b6e      	ldr	r3, [pc, #440]	@ (80012ec <LCD_SetCursor+0x458>)
 8001132:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	4b6c      	ldr	r3, [pc, #432]	@ (80012ec <LCD_SetCursor+0x458>)
 800113a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	4a6b      	ldr	r2, [pc, #428]	@ (80012f0 <LCD_SetCursor+0x45c>)
 8001144:	b2db      	uxtb	r3, r3
 8001146:	60d3      	str	r3, [r2, #12]
 8001148:	4b68      	ldr	r3, [pc, #416]	@ (80012ec <LCD_SetCursor+0x458>)
 800114a:	2280      	movs	r2, #128	@ 0x80
 800114c:	615a      	str	r2, [r3, #20]
 800114e:	4b67      	ldr	r3, [pc, #412]	@ (80012ec <LCD_SetCursor+0x458>)
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	4b65      	ldr	r3, [pc, #404]	@ (80012ec <LCD_SetCursor+0x458>)
 8001156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	e061      	b.n	8001222 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 800115e:	4b62      	ldr	r3, [pc, #392]	@ (80012e8 <LCD_SetCursor+0x454>)
 8001160:	895b      	ldrh	r3, [r3, #10]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fdc4 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8001168:	4b60      	ldr	r3, [pc, #384]	@ (80012ec <LCD_SetCursor+0x458>)
 800116a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	4b5e      	ldr	r3, [pc, #376]	@ (80012ec <LCD_SetCursor+0x458>)
 8001172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001176:	615a      	str	r2, [r3, #20]
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b5c      	ldr	r3, [pc, #368]	@ (80012f0 <LCD_SetCursor+0x45c>)
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	4b5a      	ldr	r3, [pc, #360]	@ (80012ec <LCD_SetCursor+0x458>)
 8001184:	2280      	movs	r2, #128	@ 0x80
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	4b58      	ldr	r3, [pc, #352]	@ (80012ec <LCD_SetCursor+0x458>)
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	4b57      	ldr	r3, [pc, #348]	@ (80012ec <LCD_SetCursor+0x458>)
 8001190:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001194:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001196:	4b55      	ldr	r3, [pc, #340]	@ (80012ec <LCD_SetCursor+0x458>)
 8001198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <LCD_SetCursor+0x458>)
 80011a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	4a51      	ldr	r2, [pc, #324]	@ (80012f0 <LCD_SetCursor+0x45c>)
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	60d3      	str	r3, [r2, #12]
 80011ae:	4b4f      	ldr	r3, [pc, #316]	@ (80012ec <LCD_SetCursor+0x458>)
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	4b4d      	ldr	r3, [pc, #308]	@ (80012ec <LCD_SetCursor+0x458>)
 80011b6:	2280      	movs	r2, #128	@ 0x80
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	4b4c      	ldr	r3, [pc, #304]	@ (80012ec <LCD_SetCursor+0x458>)
 80011bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011c0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80011c2:	4b4a      	ldr	r3, [pc, #296]	@ (80012ec <LCD_SetCursor+0x458>)
 80011c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	4b48      	ldr	r3, [pc, #288]	@ (80012ec <LCD_SetCursor+0x458>)
 80011cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	4b45      	ldr	r3, [pc, #276]	@ (80012e8 <LCD_SetCursor+0x454>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	121a      	asrs	r2, r3, #8
 80011da:	4b45      	ldr	r3, [pc, #276]	@ (80012f0 <LCD_SetCursor+0x45c>)
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	4b43      	ldr	r3, [pc, #268]	@ (80012ec <LCD_SetCursor+0x458>)
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	615a      	str	r2, [r3, #20]
 80011e4:	4b41      	ldr	r3, [pc, #260]	@ (80012ec <LCD_SetCursor+0x458>)
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <LCD_SetCursor+0x458>)
 80011ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80011f2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ec <LCD_SetCursor+0x458>)
 80011f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <LCD_SetCursor+0x458>)
 80011fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <LCD_SetCursor+0x454>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	3b01      	subs	r3, #1
 8001208:	4a39      	ldr	r2, [pc, #228]	@ (80012f0 <LCD_SetCursor+0x45c>)
 800120a:	b2db      	uxtb	r3, r3
 800120c:	60d3      	str	r3, [r2, #12]
 800120e:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <LCD_SetCursor+0x458>)
 8001210:	2280      	movs	r2, #128	@ 0x80
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <LCD_SetCursor+0x458>)
 8001216:	2280      	movs	r2, #128	@ 0x80
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	4b34      	ldr	r3, [pc, #208]	@ (80012ec <LCD_SetCursor+0x458>)
 800121c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001220:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001222:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <LCD_SetCursor+0x454>)
 8001224:	899b      	ldrh	r3, [r3, #12]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fd62 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800122c:	4b2f      	ldr	r3, [pc, #188]	@ (80012ec <LCD_SetCursor+0x458>)
 800122e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <LCD_SetCursor+0x458>)
 8001236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b2b      	ldr	r3, [pc, #172]	@ (80012f0 <LCD_SetCursor+0x45c>)
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <LCD_SetCursor+0x458>)
 8001248:	2280      	movs	r2, #128	@ 0x80
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <LCD_SetCursor+0x458>)
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <LCD_SetCursor+0x458>)
 8001254:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001258:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <LCD_SetCursor+0x458>)
 800125c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001260:	611a      	str	r2, [r3, #16]
 8001262:	4b22      	ldr	r3, [pc, #136]	@ (80012ec <LCD_SetCursor+0x458>)
 8001264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	4a20      	ldr	r2, [pc, #128]	@ (80012f0 <LCD_SetCursor+0x45c>)
 800126e:	b2db      	uxtb	r3, r3
 8001270:	60d3      	str	r3, [r2, #12]
 8001272:	4b1e      	ldr	r3, [pc, #120]	@ (80012ec <LCD_SetCursor+0x458>)
 8001274:	2280      	movs	r2, #128	@ 0x80
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	4b1c      	ldr	r3, [pc, #112]	@ (80012ec <LCD_SetCursor+0x458>)
 800127a:	2280      	movs	r2, #128	@ 0x80
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ec <LCD_SetCursor+0x458>)
 8001280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001284:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001286:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <LCD_SetCursor+0x458>)
 8001288:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <LCD_SetCursor+0x458>)
 8001290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <LCD_SetCursor+0x454>)
 8001298:	885b      	ldrh	r3, [r3, #2]
 800129a:	3b01      	subs	r3, #1
 800129c:	121a      	asrs	r2, r3, #8
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <LCD_SetCursor+0x45c>)
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <LCD_SetCursor+0x458>)
 80012a4:	2280      	movs	r2, #128	@ 0x80
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	4b10      	ldr	r3, [pc, #64]	@ (80012ec <LCD_SetCursor+0x458>)
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <LCD_SetCursor+0x458>)
 80012b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <LCD_SetCursor+0x458>)
 80012b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012bc:	611a      	str	r2, [r3, #16]
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <LCD_SetCursor+0x458>)
 80012c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012c4:	615a      	str	r2, [r3, #20]
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <LCD_SetCursor+0x454>)
 80012c8:	885b      	ldrh	r3, [r3, #2]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <LCD_SetCursor+0x45c>)
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	60d3      	str	r3, [r2, #12]
 80012d2:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <LCD_SetCursor+0x458>)
 80012d4:	2280      	movs	r2, #128	@ 0x80
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <LCD_SetCursor+0x458>)
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	611a      	str	r2, [r3, #16]
 80012de:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <LCD_SetCursor+0x458>)
 80012e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e4:	611a      	str	r2, [r3, #16]
}
 80012e6:	e097      	b.n	8001418 <LCD_SetCursor+0x584>
 80012e8:	20000080 	.word	0x20000080
 80012ec:	40011000 	.word	0x40011000
 80012f0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 80012f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <LCD_SetCursor+0x58c>)
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	f245 5210 	movw	r2, #21776	@ 0x5510
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d172      	bne.n	80013e6 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001300:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <LCD_SetCursor+0x58c>)
 8001302:	895b      	ldrh	r3, [r3, #10]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fcf3 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800130a:	4b46      	ldr	r3, [pc, #280]	@ (8001424 <LCD_SetCursor+0x590>)
 800130c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001310:	611a      	str	r2, [r3, #16]
 8001312:	4b44      	ldr	r3, [pc, #272]	@ (8001424 <LCD_SetCursor+0x590>)
 8001314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <LCD_SetCursor+0x594>)
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	4b3f      	ldr	r3, [pc, #252]	@ (8001424 <LCD_SetCursor+0x590>)
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	4b3e      	ldr	r3, [pc, #248]	@ (8001424 <LCD_SetCursor+0x590>)
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <LCD_SetCursor+0x590>)
 8001332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001336:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001338:	4b39      	ldr	r3, [pc, #228]	@ (8001420 <LCD_SetCursor+0x58c>)
 800133a:	895b      	ldrh	r3, [r3, #10]
 800133c:	3301      	adds	r3, #1
 800133e:	b29b      	uxth	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fcd5 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8001346:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <LCD_SetCursor+0x590>)
 8001348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800134c:	611a      	str	r2, [r3, #16]
 800134e:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <LCD_SetCursor+0x590>)
 8001350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	4a33      	ldr	r2, [pc, #204]	@ (8001428 <LCD_SetCursor+0x594>)
 800135a:	b2db      	uxtb	r3, r3
 800135c:	60d3      	str	r3, [r2, #12]
 800135e:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <LCD_SetCursor+0x590>)
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	4b2f      	ldr	r3, [pc, #188]	@ (8001424 <LCD_SetCursor+0x590>)
 8001366:	2280      	movs	r2, #128	@ 0x80
 8001368:	611a      	str	r2, [r3, #16]
 800136a:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <LCD_SetCursor+0x590>)
 800136c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001370:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001372:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <LCD_SetCursor+0x58c>)
 8001374:	899b      	ldrh	r3, [r3, #12]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fcba 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800137c:	4b29      	ldr	r3, [pc, #164]	@ (8001424 <LCD_SetCursor+0x590>)
 800137e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <LCD_SetCursor+0x590>)
 8001386:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800138a:	615a      	str	r2, [r3, #20]
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b29a      	uxth	r2, r3
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <LCD_SetCursor+0x594>)
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <LCD_SetCursor+0x590>)
 8001398:	2280      	movs	r2, #128	@ 0x80
 800139a:	615a      	str	r2, [r3, #20]
 800139c:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <LCD_SetCursor+0x590>)
 800139e:	2280      	movs	r2, #128	@ 0x80
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	4b20      	ldr	r3, [pc, #128]	@ (8001424 <LCD_SetCursor+0x590>)
 80013a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <LCD_SetCursor+0x58c>)
 80013ac:	899b      	ldrh	r3, [r3, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc9c 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80013b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <LCD_SetCursor+0x590>)
 80013ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <LCD_SetCursor+0x590>)
 80013c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c6:	615a      	str	r2, [r3, #20]
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <LCD_SetCursor+0x594>)
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	60d3      	str	r3, [r2, #12]
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <LCD_SetCursor+0x590>)
 80013d2:	2280      	movs	r2, #128	@ 0x80
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <LCD_SetCursor+0x590>)
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <LCD_SetCursor+0x590>)
 80013de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e2:	611a      	str	r2, [r3, #16]
}
 80013e4:	e018      	b.n	8001418 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <LCD_SetCursor+0x58c>)
 80013e8:	799b      	ldrb	r3, [r3, #6]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d106      	bne.n	80013fc <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <LCD_SetCursor+0x58c>)
 80013f0:	881a      	ldrh	r2, [r3, #0]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <LCD_SetCursor+0x58c>)
 80013fe:	895b      	ldrh	r3, [r3, #10]
 8001400:	88fa      	ldrh	r2, [r7, #6]
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fcff 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800140a:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <LCD_SetCursor+0x58c>)
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	88ba      	ldrh	r2, [r7, #4]
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fcf8 	bl	8000e08 <LCD_WriteReg>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000080 	.word	0x20000080
 8001424:	40011000 	.word	0x40011000
 8001428:	40010c00 	.word	0x40010c00

0800142c <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800143e:	4b78      	ldr	r3, [pc, #480]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001440:	799b      	ldrb	r3, [r3, #6]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d10b      	bne.n	800145e <LCD_Scan_Dir+0x32>
 8001446:	4b76      	ldr	r3, [pc, #472]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001448:	889b      	ldrh	r3, [r3, #4]
 800144a:	f646 0204 	movw	r2, #26628	@ 0x6804
 800144e:	4293      	cmp	r3, r2
 8001450:	d005      	beq.n	800145e <LCD_Scan_Dir+0x32>
 8001452:	4b73      	ldr	r3, [pc, #460]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001454:	889b      	ldrh	r3, [r3, #4]
 8001456:	f641 1263 	movw	r2, #6499	@ 0x1963
 800145a:	4293      	cmp	r3, r2
 800145c:	d109      	bne.n	8001472 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800145e:	4b70      	ldr	r3, [pc, #448]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001460:	799b      	ldrb	r3, [r3, #6]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d134      	bne.n	80014d0 <LCD_Scan_Dir+0xa4>
 8001466:	4b6e      	ldr	r3, [pc, #440]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001468:	889b      	ldrh	r3, [r3, #4]
 800146a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800146e:	4293      	cmp	r3, r2
 8001470:	d12e      	bne.n	80014d0 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b07      	cmp	r3, #7
 8001476:	d82b      	bhi.n	80014d0 <LCD_Scan_Dir+0xa4>
 8001478:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <LCD_Scan_Dir+0x54>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	080014a1 	.word	0x080014a1
 8001484:	080014a7 	.word	0x080014a7
 8001488:	080014ad 	.word	0x080014ad
 800148c:	080014b3 	.word	0x080014b3
 8001490:	080014b9 	.word	0x080014b9
 8001494:	080014bf 	.word	0x080014bf
 8001498:	080014c5 	.word	0x080014c5
 800149c:	080014cb 	.word	0x080014cb
		{
		case 0:
			dir = 6;
 80014a0:	2306      	movs	r3, #6
 80014a2:	71fb      	strb	r3, [r7, #7]
			break;
 80014a4:	e014      	b.n	80014d0 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80014a6:	2307      	movs	r3, #7
 80014a8:	71fb      	strb	r3, [r7, #7]
			break;
 80014aa:	e011      	b.n	80014d0 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80014ac:	2304      	movs	r3, #4
 80014ae:	71fb      	strb	r3, [r7, #7]
			break;
 80014b0:	e00e      	b.n	80014d0 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80014b2:	2305      	movs	r3, #5
 80014b4:	71fb      	strb	r3, [r7, #7]
			break;
 80014b6:	e00b      	b.n	80014d0 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	71fb      	strb	r3, [r7, #7]
			break;
 80014bc:	e008      	b.n	80014d0 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	71fb      	strb	r3, [r7, #7]
			break;
 80014c2:	e005      	b.n	80014d0 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80014c4:	2303      	movs	r3, #3
 80014c6:	71fb      	strb	r3, [r7, #7]
			break;
 80014c8:	e002      	b.n	80014d0 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	71fb      	strb	r3, [r7, #7]
			break;
 80014ce:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80014d0:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80014d2:	889b      	ldrh	r3, [r3, #4]
 80014d4:	f249 3241 	movw	r2, #37697	@ 0x9341
 80014d8:	4293      	cmp	r3, r2
 80014da:	d018      	beq.n	800150e <LCD_Scan_Dir+0xe2>
 80014dc:	4b50      	ldr	r3, [pc, #320]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	f646 0204 	movw	r2, #26628	@ 0x6804
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d012      	beq.n	800150e <LCD_Scan_Dir+0xe2>
 80014e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	f245 3210 	movw	r2, #21264	@ 0x5310
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00c      	beq.n	800150e <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80014f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	f245 5210 	movw	r2, #21776	@ 0x5510
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d006      	beq.n	800150e <LCD_Scan_Dir+0xe2>
 8001500:	4b47      	ldr	r3, [pc, #284]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001508:	4293      	cmp	r3, r2
 800150a:	f040 8250 	bne.w	80019ae <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b07      	cmp	r3, #7
 8001512:	d836      	bhi.n	8001582 <LCD_Scan_Dir+0x156>
 8001514:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <LCD_Scan_Dir+0xf0>)
 8001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151a:	bf00      	nop
 800151c:	08001583 	.word	0x08001583
 8001520:	0800153d 	.word	0x0800153d
 8001524:	08001547 	.word	0x08001547
 8001528:	08001551 	.word	0x08001551
 800152c:	0800155b 	.word	0x0800155b
 8001530:	08001565 	.word	0x08001565
 8001534:	0800156f 	.word	0x0800156f
 8001538:	08001579 	.word	0x08001579
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001542:	81fb      	strh	r3, [r7, #14]
			break;
 8001544:	e01d      	b.n	8001582 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8001546:	89fb      	ldrh	r3, [r7, #14]
 8001548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800154c:	81fb      	strh	r3, [r7, #14]
			break;
 800154e:	e018      	b.n	8001582 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001556:	81fb      	strh	r3, [r7, #14]
			break;
 8001558:	e013      	b.n	8001582 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	81fb      	strh	r3, [r7, #14]
			break;
 8001562:	e00e      	b.n	8001582 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001564:	89fb      	ldrh	r3, [r7, #14]
 8001566:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800156a:	81fb      	strh	r3, [r7, #14]
			break;
 800156c:	e009      	b.n	8001582 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001574:	81fb      	strh	r3, [r7, #14]
			break;
 8001576:	e004      	b.n	8001582 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800157e:	81fb      	strh	r3, [r7, #14]
			break;
 8001580:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001582:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001584:	889b      	ldrh	r3, [r3, #4]
 8001586:	f245 5210 	movw	r2, #21776	@ 0x5510
 800158a:	4293      	cmp	r3, r2
 800158c:	d103      	bne.n	8001596 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800158e:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8001592:	81bb      	strh	r3, [r7, #12]
 8001594:	e001      	b.n	800159a <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001596:	2336      	movs	r3, #54	@ 0x36
 8001598:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	f245 3210 	movw	r2, #21264	@ 0x5310
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00f      	beq.n	80015c6 <LCD_Scan_Dir+0x19a>
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	f245 5210 	movw	r2, #21776	@ 0x5510
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d009      	beq.n	80015c6 <LCD_Scan_Dir+0x19a>
 80015b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80015b4:	889b      	ldrh	r3, [r3, #4]
 80015b6:	f641 1263 	movw	r2, #6499	@ 0x1963
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d003      	beq.n	80015c6 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80015c6:	4b16      	ldr	r3, [pc, #88]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80015c8:	889b      	ldrh	r3, [r3, #4]
 80015ca:	f646 0204 	movw	r2, #26628	@ 0x6804
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d103      	bne.n	80015da <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80015d2:	89fb      	ldrh	r3, [r7, #14]
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80015da:	89fa      	ldrh	r2, [r7, #14]
 80015dc:	89bb      	ldrh	r3, [r7, #12]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fc11 	bl	8000e08 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	f641 1263 	movw	r2, #6499	@ 0x1963
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d028      	beq.n	8001644 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001602:	885b      	ldrh	r3, [r3, #2]
 8001604:	429a      	cmp	r2, r3
 8001606:	d21d      	bcs.n	8001644 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800160e:	4b04      	ldr	r3, [pc, #16]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001610:	885a      	ldrh	r2, [r3, #2]
 8001612:	4b03      	ldr	r3, [pc, #12]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001614:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001616:	4a02      	ldr	r2, [pc, #8]	@ (8001620 <LCD_Scan_Dir+0x1f4>)
 8001618:	897b      	ldrh	r3, [r7, #10]
 800161a:	8053      	strh	r3, [r2, #2]
 800161c:	e012      	b.n	8001644 <LCD_Scan_Dir+0x218>
 800161e:	bf00      	nop
 8001620:	20000080 	.word	0x20000080
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001624:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	4b7e      	ldr	r3, [pc, #504]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 800162a:	885b      	ldrh	r3, [r3, #2]
 800162c:	429a      	cmp	r2, r3
 800162e:	d909      	bls.n	8001644 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001630:	4b7c      	ldr	r3, [pc, #496]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001636:	4b7b      	ldr	r3, [pc, #492]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001638:	885a      	ldrh	r2, [r3, #2]
 800163a:	4b7a      	ldr	r3, [pc, #488]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 800163c:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800163e:	4a79      	ldr	r2, [pc, #484]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001640:	897b      	ldrh	r3, [r7, #10]
 8001642:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001644:	4b77      	ldr	r3, [pc, #476]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001646:	889b      	ldrh	r3, [r3, #4]
 8001648:	f245 5210 	movw	r2, #21776	@ 0x5510
 800164c:	4293      	cmp	r3, r2
 800164e:	f040 80ef 	bne.w	8001830 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001652:	4b74      	ldr	r3, [pc, #464]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001654:	895b      	ldrh	r3, [r3, #10]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb4a 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800165c:	4b72      	ldr	r3, [pc, #456]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800165e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001662:	611a      	str	r2, [r3, #16]
 8001664:	4b70      	ldr	r3, [pc, #448]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800166a:	615a      	str	r2, [r3, #20]
 800166c:	4b6f      	ldr	r3, [pc, #444]	@ (800182c <LCD_Scan_Dir+0x400>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	4b6d      	ldr	r3, [pc, #436]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001674:	2280      	movs	r2, #128	@ 0x80
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	4b6b      	ldr	r3, [pc, #428]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800167a:	2280      	movs	r2, #128	@ 0x80
 800167c:	611a      	str	r2, [r3, #16]
 800167e:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001684:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001686:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001688:	895b      	ldrh	r3, [r3, #10]
 800168a:	3301      	adds	r3, #1
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fb2e 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001694:	4b64      	ldr	r3, [pc, #400]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	4b62      	ldr	r3, [pc, #392]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800169e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	4b61      	ldr	r3, [pc, #388]	@ (800182c <LCD_Scan_Dir+0x400>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b5d      	ldr	r3, [pc, #372]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016b2:	2280      	movs	r2, #128	@ 0x80
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016bc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80016be:	4b59      	ldr	r3, [pc, #356]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 80016c0:	895b      	ldrh	r3, [r3, #10]
 80016c2:	3302      	adds	r3, #2
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fb12 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80016cc:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	4b54      	ldr	r3, [pc, #336]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	4b51      	ldr	r3, [pc, #324]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	3b01      	subs	r3, #1
 80016e2:	121a      	asrs	r2, r3, #8
 80016e4:	4b51      	ldr	r3, [pc, #324]	@ (800182c <LCD_Scan_Dir+0x400>)
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	615a      	str	r2, [r3, #20]
 80016ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016f0:	2280      	movs	r2, #128	@ 0x80
 80016f2:	611a      	str	r2, [r3, #16]
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80016f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016fa:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80016fc:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 80016fe:	895b      	ldrh	r3, [r3, #10]
 8001700:	3303      	adds	r3, #3
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff faf3 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800170c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001710:	611a      	str	r2, [r3, #16]
 8001712:	4b45      	ldr	r3, [pc, #276]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001718:	615a      	str	r2, [r3, #20]
 800171a:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	4a42      	ldr	r2, [pc, #264]	@ (800182c <LCD_Scan_Dir+0x400>)
 8001722:	b2db      	uxtb	r3, r3
 8001724:	60d3      	str	r3, [r2, #12]
 8001726:	4b40      	ldr	r3, [pc, #256]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001728:	2280      	movs	r2, #128	@ 0x80
 800172a:	615a      	str	r2, [r3, #20]
 800172c:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800172e:	2280      	movs	r2, #128	@ 0x80
 8001730:	611a      	str	r2, [r3, #16]
 8001732:	4b3d      	ldr	r3, [pc, #244]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001738:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800173a:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 800173c:	899b      	ldrh	r3, [r3, #12]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fad6 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001744:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001746:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800174e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	4b35      	ldr	r3, [pc, #212]	@ (800182c <LCD_Scan_Dir+0x400>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	4b33      	ldr	r3, [pc, #204]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800175c:	2280      	movs	r2, #128	@ 0x80
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800176e:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001770:	899b      	ldrh	r3, [r3, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	b29b      	uxth	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff faba 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800177e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001782:	611a      	str	r2, [r3, #16]
 8001784:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800178a:	615a      	str	r2, [r3, #20]
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <LCD_Scan_Dir+0x400>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800179a:	2280      	movs	r2, #128	@ 0x80
 800179c:	611a      	str	r2, [r3, #16]
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80017a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 80017a8:	899b      	ldrh	r3, [r3, #12]
 80017aa:	3302      	adds	r3, #2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fa9e 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ba:	611a      	str	r2, [r3, #16]
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 80017c6:	885b      	ldrh	r3, [r3, #2]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	121a      	asrs	r2, r3, #8
 80017cc:	4b17      	ldr	r3, [pc, #92]	@ (800182c <LCD_Scan_Dir+0x400>)
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017d2:	2280      	movs	r2, #128	@ 0x80
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017d8:	2280      	movs	r2, #128	@ 0x80
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e2:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80017e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 80017e6:	899b      	ldrh	r3, [r3, #12]
 80017e8:	3303      	adds	r3, #3
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa7f 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 80017fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001800:	615a      	str	r2, [r3, #20]
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <LCD_Scan_Dir+0x3f8>)
 8001804:	885b      	ldrh	r3, [r3, #2]
 8001806:	3b01      	subs	r3, #1
 8001808:	4a08      	ldr	r2, [pc, #32]	@ (800182c <LCD_Scan_Dir+0x400>)
 800180a:	b2db      	uxtb	r3, r3
 800180c:	60d3      	str	r3, [r2, #12]
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001810:	2280      	movs	r2, #128	@ 0x80
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 8001816:	2280      	movs	r2, #128	@ 0x80
 8001818:	611a      	str	r2, [r3, #16]
 800181a:	4b03      	ldr	r3, [pc, #12]	@ (8001828 <LCD_Scan_Dir+0x3fc>)
 800181c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001820:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001822:	e10b      	b.n	8001a3c <LCD_Scan_Dir+0x610>
 8001824:	20000080 	.word	0x20000080
 8001828:	40011000 	.word	0x40011000
 800182c:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001830:	4b84      	ldr	r3, [pc, #528]	@ (8001a44 <LCD_Scan_Dir+0x618>)
 8001832:	895b      	ldrh	r3, [r3, #10]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fa5b 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800183a:	4b83      	ldr	r3, [pc, #524]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800183c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	4b81      	ldr	r3, [pc, #516]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	4b80      	ldr	r3, [pc, #512]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	4b7d      	ldr	r3, [pc, #500]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001852:	2280      	movs	r2, #128	@ 0x80
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	4b7c      	ldr	r3, [pc, #496]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	611a      	str	r2, [r3, #16]
 800185c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800185e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001862:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001864:	4b78      	ldr	r3, [pc, #480]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	4b76      	ldr	r3, [pc, #472]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800186e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	4b75      	ldr	r3, [pc, #468]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	4b73      	ldr	r3, [pc, #460]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800187c:	2280      	movs	r2, #128	@ 0x80
 800187e:	615a      	str	r2, [r3, #20]
 8001880:	4b71      	ldr	r3, [pc, #452]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001882:	2280      	movs	r2, #128	@ 0x80
 8001884:	611a      	str	r2, [r3, #16]
 8001886:	4b70      	ldr	r3, [pc, #448]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800188c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800188e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001894:	611a      	str	r2, [r3, #16]
 8001896:	4b6c      	ldr	r3, [pc, #432]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001898:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	4b69      	ldr	r3, [pc, #420]	@ (8001a44 <LCD_Scan_Dir+0x618>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	121a      	asrs	r2, r3, #8
 80018a6:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	4b67      	ldr	r3, [pc, #412]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	4b65      	ldr	r3, [pc, #404]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018b2:	2280      	movs	r2, #128	@ 0x80
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	4b64      	ldr	r3, [pc, #400]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018bc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80018be:	4b62      	ldr	r3, [pc, #392]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	4b60      	ldr	r3, [pc, #384]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018cc:	615a      	str	r2, [r3, #20]
 80018ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001a44 <LCD_Scan_Dir+0x618>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	4a5d      	ldr	r2, [pc, #372]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	60d3      	str	r3, [r2, #12]
 80018da:	4b5b      	ldr	r3, [pc, #364]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018dc:	2280      	movs	r2, #128	@ 0x80
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	4b59      	ldr	r3, [pc, #356]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018e2:	2280      	movs	r2, #128	@ 0x80
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	4b58      	ldr	r3, [pc, #352]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018ec:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80018ee:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <LCD_Scan_Dir+0x618>)
 80018f0:	899b      	ldrh	r3, [r3, #12]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f9fc 	bl	8000cf0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80018f8:	4b53      	ldr	r3, [pc, #332]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80018fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	4b51      	ldr	r3, [pc, #324]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	4b50      	ldr	r3, [pc, #320]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	615a      	str	r2, [r3, #20]
 8001914:	4b4c      	ldr	r3, [pc, #304]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001916:	2280      	movs	r2, #128	@ 0x80
 8001918:	611a      	str	r2, [r3, #16]
 800191a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800191c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001920:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001922:	4b49      	ldr	r3, [pc, #292]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800192c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001930:	615a      	str	r2, [r3, #20]
 8001932:	4b46      	ldr	r3, [pc, #280]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800193a:	2280      	movs	r2, #128	@ 0x80
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	4b42      	ldr	r3, [pc, #264]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001940:	2280      	movs	r2, #128	@ 0x80
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b40      	ldr	r3, [pc, #256]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 800194c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800194e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	4b3c      	ldr	r3, [pc, #240]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <LCD_Scan_Dir+0x618>)
 800195e:	885b      	ldrh	r3, [r3, #2]
 8001960:	3b01      	subs	r3, #1
 8001962:	121a      	asrs	r2, r3, #8
 8001964:	4b39      	ldr	r3, [pc, #228]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	4b37      	ldr	r3, [pc, #220]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800196a:	2280      	movs	r2, #128	@ 0x80
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001970:	2280      	movs	r2, #128	@ 0x80
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	4b34      	ldr	r3, [pc, #208]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800197a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800197c:	4b32      	ldr	r3, [pc, #200]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800197e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	4b30      	ldr	r3, [pc, #192]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 8001986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800198a:	615a      	str	r2, [r3, #20]
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <LCD_Scan_Dir+0x618>)
 800198e:	885b      	ldrh	r3, [r3, #2]
 8001990:	3b01      	subs	r3, #1
 8001992:	4a2e      	ldr	r2, [pc, #184]	@ (8001a4c <LCD_Scan_Dir+0x620>)
 8001994:	b2db      	uxtb	r3, r3
 8001996:	60d3      	str	r3, [r2, #12]
 8001998:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 800199a:	2280      	movs	r2, #128	@ 0x80
 800199c:	615a      	str	r2, [r3, #20]
 800199e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	611a      	str	r2, [r3, #16]
 80019a4:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <LCD_Scan_Dir+0x61c>)
 80019a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019aa:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80019ac:	e046      	b.n	8001a3c <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b07      	cmp	r3, #7
 80019b2:	d836      	bhi.n	8001a22 <LCD_Scan_Dir+0x5f6>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <LCD_Scan_Dir+0x590>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019dd 	.word	0x080019dd
 80019c0:	080019e7 	.word	0x080019e7
 80019c4:	080019f1 	.word	0x080019f1
 80019c8:	08001a23 	.word	0x08001a23
 80019cc:	080019fb 	.word	0x080019fb
 80019d0:	08001a05 	.word	0x08001a05
 80019d4:	08001a0f 	.word	0x08001a0f
 80019d8:	08001a19 	.word	0x08001a19
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80019dc:	89fb      	ldrh	r3, [r7, #14]
 80019de:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80019e2:	81fb      	strh	r3, [r7, #14]
			break;
 80019e4:	e01d      	b.n	8001a22 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80019e6:	89fb      	ldrh	r3, [r7, #14]
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	81fb      	strh	r3, [r7, #14]
			break;
 80019ee:	e018      	b.n	8001a22 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	f043 0320 	orr.w	r3, r3, #32
 80019f6:	81fb      	strh	r3, [r7, #14]
			break;
 80019f8:	e013      	b.n	8001a22 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80019fa:	89fb      	ldrh	r3, [r7, #14]
 80019fc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8001a00:	81fb      	strh	r3, [r7, #14]
			break;
 8001a02:	e00e      	b.n	8001a22 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001a04:	89fb      	ldrh	r3, [r7, #14]
 8001a06:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001a0a:	81fb      	strh	r3, [r7, #14]
			break;
 8001a0c:	e009      	b.n	8001a22 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	f043 0318 	orr.w	r3, r3, #24
 8001a14:	81fb      	strh	r3, [r7, #14]
			break;
 8001a16:	e004      	b.n	8001a22 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	81fb      	strh	r3, [r7, #14]
			break;
 8001a20:	bf00      	nop
		}
		dirreg = 0X03;
 8001a22:	2303      	movs	r3, #3
 8001a24:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a2c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001a2e:	89fa      	ldrh	r2, [r7, #14]
 8001a30:	89bb      	ldrh	r3, [r7, #12]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f9e7 	bl	8000e08 <LCD_WriteReg>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000080 	.word	0x20000080
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	460a      	mov	r2, r1
 8001a5a:	80fb      	strh	r3, [r7, #6]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8001a60:	88ba      	ldrh	r2, [r7, #4]
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fa14 	bl	8000e94 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8001a6c:	f7ff fa06 	bl	8000e7c <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <LCD_DrawPoint+0x54>)
 8001a72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <LCD_DrawPoint+0x54>)
 8001a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a7e:	615a      	str	r2, [r3, #20]
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <LCD_DrawPoint+0x58>)
 8001a82:	881a      	ldrh	r2, [r3, #0]
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <LCD_DrawPoint+0x5c>)
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <LCD_DrawPoint+0x54>)
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <LCD_DrawPoint+0x54>)
 8001a90:	2280      	movs	r2, #128	@ 0x80
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <LCD_DrawPoint+0x54>)
 8001a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9a:	611a      	str	r2, [r3, #16]
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40011000 	.word	0x40011000
 8001aa8:	2000007c 	.word	0x2000007c
 8001aac:	40010c00 	.word	0x40010c00

08001ab0 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	80fb      	strh	r3, [r7, #6]
 8001aba:	460b      	mov	r3, r1
 8001abc:	80bb      	strh	r3, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001ac2:	4b75      	ldr	r3, [pc, #468]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001ac4:	889b      	ldrh	r3, [r3, #4]
 8001ac6:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d005      	beq.n	8001ada <LCD_Fast_DrawPoint+0x2a>
 8001ace:	4b72      	ldr	r3, [pc, #456]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001ad0:	889b      	ldrh	r3, [r3, #4]
 8001ad2:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d164      	bne.n	8001ba4 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001ada:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001adc:	895b      	ldrh	r3, [r3, #10]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f906 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001ae4:	4b6d      	ldr	r3, [pc, #436]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	4b6b      	ldr	r3, [pc, #428]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	4b69      	ldr	r3, [pc, #420]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	4b67      	ldr	r3, [pc, #412]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b00:	2280      	movs	r2, #128	@ 0x80
 8001b02:	615a      	str	r2, [r3, #20]
 8001b04:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	4b64      	ldr	r3, [pc, #400]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b10:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001b12:	4b62      	ldr	r3, [pc, #392]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	4b60      	ldr	r3, [pc, #384]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	4a5e      	ldr	r2, [pc, #376]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	60d3      	str	r3, [r2, #12]
 8001b2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	4b5a      	ldr	r3, [pc, #360]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	4b59      	ldr	r3, [pc, #356]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b3e:	4b56      	ldr	r3, [pc, #344]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001b40:	899b      	ldrh	r3, [r3, #12]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f8d4 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b48:	4b54      	ldr	r3, [pc, #336]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	4b52      	ldr	r3, [pc, #328]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	88bb      	ldrh	r3, [r7, #4]
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b50      	ldr	r3, [pc, #320]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b64:	2280      	movs	r2, #128	@ 0x80
 8001b66:	615a      	str	r2, [r3, #20]
 8001b68:	4b4c      	ldr	r3, [pc, #304]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b74:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b76:	4b49      	ldr	r3, [pc, #292]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b7c:	611a      	str	r2, [r3, #16]
 8001b7e:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b84:	615a      	str	r2, [r3, #20]
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	4a45      	ldr	r2, [pc, #276]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	60d3      	str	r3, [r2, #12]
 8001b8e:	4b43      	ldr	r3, [pc, #268]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b90:	2280      	movs	r2, #128	@ 0x80
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	611a      	str	r2, [r3, #16]
 8001b9a:	4b40      	ldr	r3, [pc, #256]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba0:	611a      	str	r2, [r3, #16]
 8001ba2:	e1e6      	b.n	8001f72 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001ba6:	889b      	ldrh	r3, [r3, #4]
 8001ba8:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d179      	bne.n	8001ca4 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001bb0:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001bb2:	895b      	ldrh	r3, [r3, #10]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f89b 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001bba:	4b38      	ldr	r3, [pc, #224]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001bbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bc0:	611a      	str	r2, [r3, #16]
 8001bc2:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001bd6:	2280      	movs	r2, #128	@ 0x80
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001be2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001be6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001be8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001bea:	895b      	ldrh	r3, [r3, #10]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f87d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001bf6:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001bf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bfc:	611a      	str	r2, [r3, #16]
 8001bfe:	4b27      	ldr	r3, [pc, #156]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	4a25      	ldr	r2, [pc, #148]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	60d3      	str	r3, [r2, #12]
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c10:	2280      	movs	r2, #128	@ 0x80
 8001c12:	615a      	str	r2, [r3, #20]
 8001c14:	4b21      	ldr	r3, [pc, #132]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c20:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001c24:	899b      	ldrh	r3, [r3, #12]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f862 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	88bb      	ldrh	r3, [r7, #4]
 8001c3e:	0a1b      	lsrs	r3, r3, #8
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b17      	ldr	r3, [pc, #92]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	4b13      	ldr	r3, [pc, #76]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c4e:	2280      	movs	r2, #128	@ 0x80
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c58:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <LCD_Fast_DrawPoint+0x1e8>)
 8001c5c:	899b      	ldrh	r3, [r3, #12]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f844 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c6e:	611a      	str	r2, [r3, #16]
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c76:	615a      	str	r2, [r3, #20]
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <LCD_Fast_DrawPoint+0x1f0>)
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	60d3      	str	r3, [r2, #12]
 8001c80:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c82:	2280      	movs	r2, #128	@ 0x80
 8001c84:	615a      	str	r2, [r3, #20]
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	611a      	str	r2, [r3, #16]
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <LCD_Fast_DrawPoint+0x1ec>)
 8001c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c92:	611a      	str	r2, [r3, #16]
 8001c94:	e16d      	b.n	8001f72 <LCD_Fast_DrawPoint+0x4c2>
 8001c96:	bf00      	nop
 8001c98:	20000080 	.word	0x20000080
 8001c9c:	40011000 	.word	0x40011000
 8001ca0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001ca4:	4b68      	ldr	r3, [pc, #416]	@ (8001e48 <LCD_Fast_DrawPoint+0x398>)
 8001ca6:	889b      	ldrh	r3, [r3, #4]
 8001ca8:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001cac:	4293      	cmp	r3, r2
 8001cae:	f040 80d1 	bne.w	8001e54 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001cb2:	4b65      	ldr	r3, [pc, #404]	@ (8001e48 <LCD_Fast_DrawPoint+0x398>)
 8001cb4:	799b      	ldrb	r3, [r3, #6]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001cba:	4b63      	ldr	r3, [pc, #396]	@ (8001e48 <LCD_Fast_DrawPoint+0x398>)
 8001cbc:	881a      	ldrh	r2, [r3, #0]
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001cc8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e48 <LCD_Fast_DrawPoint+0x398>)
 8001cca:	895b      	ldrh	r3, [r3, #10]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f80f 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001cd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	4b5c      	ldr	r3, [pc, #368]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b59      	ldr	r3, [pc, #356]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001cea:	60da      	str	r2, [r3, #12]
 8001cec:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001cee:	2280      	movs	r2, #128	@ 0x80
 8001cf0:	615a      	str	r2, [r3, #20]
 8001cf2:	4b56      	ldr	r3, [pc, #344]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001cf4:	2280      	movs	r2, #128	@ 0x80
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	4b54      	ldr	r3, [pc, #336]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001cfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cfe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001d00:	4b52      	ldr	r3, [pc, #328]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d06:	611a      	str	r2, [r3, #16]
 8001d08:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	4a4f      	ldr	r2, [pc, #316]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	60d3      	str	r3, [r2, #12]
 8001d18:	4b4c      	ldr	r3, [pc, #304]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d1a:	2280      	movs	r2, #128	@ 0x80
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d20:	2280      	movs	r2, #128	@ 0x80
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	4b49      	ldr	r3, [pc, #292]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d2a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001d2c:	4b47      	ldr	r3, [pc, #284]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d32:	611a      	str	r2, [r3, #16]
 8001d34:	4b45      	ldr	r3, [pc, #276]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d3a:	615a      	str	r2, [r3, #20]
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d48:	2280      	movs	r2, #128	@ 0x80
 8001d4a:	615a      	str	r2, [r3, #20]
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d4e:	2280      	movs	r2, #128	@ 0x80
 8001d50:	611a      	str	r2, [r3, #16]
 8001d52:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d58:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d60:	611a      	str	r2, [r3, #16]
 8001d62:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4a38      	ldr	r2, [pc, #224]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	60d3      	str	r3, [r2, #12]
 8001d72:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d74:	2280      	movs	r2, #128	@ 0x80
 8001d76:	615a      	str	r2, [r3, #20]
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d7a:	2280      	movs	r2, #128	@ 0x80
 8001d7c:	611a      	str	r2, [r3, #16]
 8001d7e:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d84:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001d86:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <LCD_Fast_DrawPoint+0x398>)
 8001d88:	899b      	ldrh	r3, [r3, #12]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe ffb0 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001d90:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d96:	611a      	str	r2, [r3, #16]
 8001d98:	4b2c      	ldr	r3, [pc, #176]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	88bb      	ldrh	r3, [r7, #4]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001db2:	2280      	movs	r2, #128	@ 0x80
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001db8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dbc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dc4:	611a      	str	r2, [r3, #16]
 8001dc6:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dcc:	615a      	str	r2, [r3, #20]
 8001dce:	88bb      	ldrh	r3, [r7, #4]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	60d3      	str	r3, [r2, #12]
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001dd8:	2280      	movs	r2, #128	@ 0x80
 8001dda:	615a      	str	r2, [r3, #20]
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001dec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001df0:	611a      	str	r2, [r3, #16]
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001df4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	88bb      	ldrh	r3, [r7, #4]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	88bb      	ldrh	r3, [r7, #4]
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <LCD_Fast_DrawPoint+0x3a0>)
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	60d3      	str	r3, [r2, #12]
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e32:	2280      	movs	r2, #128	@ 0x80
 8001e34:	615a      	str	r2, [r3, #20]
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	611a      	str	r2, [r3, #16]
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <LCD_Fast_DrawPoint+0x39c>)
 8001e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	e095      	b.n	8001f72 <LCD_Fast_DrawPoint+0x4c2>
 8001e46:	bf00      	nop
 8001e48:	20000080 	.word	0x20000080
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001e54:	4b5e      	ldr	r3, [pc, #376]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001e56:	889b      	ldrh	r3, [r3, #4]
 8001e58:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d16f      	bne.n	8001f40 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001e60:	4b5b      	ldr	r3, [pc, #364]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001e62:	799b      	ldrb	r3, [r3, #6]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001e68:	4b59      	ldr	r3, [pc, #356]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001e6a:	881a      	ldrh	r2, [r3, #0]
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001e76:	4b56      	ldr	r3, [pc, #344]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001e78:	895b      	ldrh	r3, [r3, #10]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe ff38 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001e80:	4b54      	ldr	r3, [pc, #336]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001e82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e86:	611a      	str	r2, [r3, #16]
 8001e88:	4b52      	ldr	r3, [pc, #328]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e8e:	615a      	str	r2, [r3, #20]
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <LCD_Fast_DrawPoint+0x528>)
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	615a      	str	r2, [r3, #20]
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001ea2:	2280      	movs	r2, #128	@ 0x80
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001eae:	4b49      	ldr	r3, [pc, #292]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001eb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ebc:	615a      	str	r2, [r3, #20]
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	4a45      	ldr	r2, [pc, #276]	@ (8001fd8 <LCD_Fast_DrawPoint+0x528>)
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	60d3      	str	r3, [r2, #12]
 8001ec6:	4b43      	ldr	r3, [pc, #268]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001ec8:	2280      	movs	r2, #128	@ 0x80
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001ece:	2280      	movs	r2, #128	@ 0x80
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001eda:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001edc:	899b      	ldrh	r3, [r3, #12]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe ff06 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001ee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ef2:	615a      	str	r2, [r3, #20]
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	4b37      	ldr	r3, [pc, #220]	@ (8001fd8 <LCD_Fast_DrawPoint+0x528>)
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	4b35      	ldr	r3, [pc, #212]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f00:	2280      	movs	r2, #128	@ 0x80
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	4b33      	ldr	r3, [pc, #204]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f06:	2280      	movs	r2, #128	@ 0x80
 8001f08:	611a      	str	r2, [r3, #16]
 8001f0a:	4b32      	ldr	r3, [pc, #200]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f10:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001f12:	4b30      	ldr	r3, [pc, #192]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	88bb      	ldrh	r3, [r7, #4]
 8001f24:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd8 <LCD_Fast_DrawPoint+0x528>)
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	60d3      	str	r3, [r2, #12]
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	e018      	b.n	8001f72 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001f40:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001f42:	799b      	ldrb	r3, [r3, #6]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001f48:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001f4a:	881a      	ldrh	r2, [r3, #0]
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	3b01      	subs	r3, #1
 8001f54:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001f58:	895b      	ldrh	r3, [r3, #10]
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ff52 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001f66:	899b      	ldrh	r3, [r3, #12]
 8001f68:	88ba      	ldrh	r2, [r7, #4]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe ff4b 	bl	8000e08 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001f72:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f78:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f80:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001f82:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <LCD_Fast_DrawPoint+0x520>)
 8001f84:	891a      	ldrh	r2, [r3, #8]
 8001f86:	4b14      	ldr	r3, [pc, #80]	@ (8001fd8 <LCD_Fast_DrawPoint+0x528>)
 8001f88:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001f8a:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001f90:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f92:	2280      	movs	r2, #128	@ 0x80
 8001f94:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001fa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa4:	611a      	str	r2, [r3, #16]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <LCD_Fast_DrawPoint+0x528>)
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	60d3      	str	r3, [r2, #12]
 8001fb4:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <LCD_Fast_DrawPoint+0x524>)
 8001fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc6:	611a      	str	r2, [r3, #16]
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000080 	.word	0x20000080
 8001fd4:	40011000 	.word	0x40011000
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	00000000 	.word	0x00000000

08001fe0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001fea:	20be      	movs	r0, #190	@ 0xbe
 8001fec:	f7fe fe80 	bl	8000cf0 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8001ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	4b49      	ldr	r3, [pc, #292]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8001ffa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ffe:	615a      	str	r2, [r3, #20]
 8002000:	4b48      	ldr	r3, [pc, #288]	@ (8002124 <LCD_SSD_BackLightSet+0x144>)
 8002002:	2205      	movs	r2, #5
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	4b46      	ldr	r3, [pc, #280]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	615a      	str	r2, [r3, #20]
 800200c:	4b44      	ldr	r3, [pc, #272]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 800200e:	2280      	movs	r2, #128	@ 0x80
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	4b43      	ldr	r3, [pc, #268]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002018:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 800201a:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 800201c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002020:	611a      	str	r2, [r3, #16]
 8002022:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002024:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fb77 	bl	8000720 <__aeabi_i2d>
 8002032:	a339      	add	r3, pc, #228	@ (adr r3, 8002118 <LCD_SSD_BackLightSet+0x138>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe f8f6 	bl	8000228 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4c38      	ldr	r4, [pc, #224]	@ (8002124 <LCD_SSD_BackLightSet+0x144>)
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fbd5 	bl	80007f4 <__aeabi_d2uiz>
 800204a:	4603      	mov	r3, r0
 800204c:	60e3      	str	r3, [r4, #12]
 800204e:	4b34      	ldr	r3, [pc, #208]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002050:	2280      	movs	r2, #128	@ 0x80
 8002052:	615a      	str	r2, [r3, #20]
 8002054:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002056:	2280      	movs	r2, #128	@ 0x80
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 800205c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002060:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8002062:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 800206c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	4b2c      	ldr	r3, [pc, #176]	@ (8002124 <LCD_SSD_BackLightSet+0x144>)
 8002074:	2201      	movs	r2, #1
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 800207a:	2280      	movs	r2, #128	@ 0x80
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	4b28      	ldr	r3, [pc, #160]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800208a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 800208c:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 800208e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	4b22      	ldr	r3, [pc, #136]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800209a:	615a      	str	r2, [r3, #20]
 800209c:	4b21      	ldr	r3, [pc, #132]	@ (8002124 <LCD_SSD_BackLightSet+0x144>)
 800209e:	22ff      	movs	r2, #255	@ 0xff
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020a4:	2280      	movs	r2, #128	@ 0x80
 80020a6:	615a      	str	r2, [r3, #20]
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020aa:	2280      	movs	r2, #128	@ 0x80
 80020ac:	611a      	str	r2, [r3, #16]
 80020ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020b4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 80020b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c4:	615a      	str	r2, [r3, #20]
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <LCD_SSD_BackLightSet+0x144>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020ce:	2280      	movs	r2, #128	@ 0x80
 80020d0:	615a      	str	r2, [r3, #20]
 80020d2:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020d4:	2280      	movs	r2, #128	@ 0x80
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	4b11      	ldr	r3, [pc, #68]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020de:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020e6:	611a      	str	r2, [r3, #16]
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ee:	615a      	str	r2, [r3, #20]
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <LCD_SSD_BackLightSet+0x144>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	4b08      	ldr	r3, [pc, #32]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 80020fe:	2280      	movs	r2, #128	@ 0x80
 8002100:	611a      	str	r2, [r3, #16]
 8002102:	4b07      	ldr	r3, [pc, #28]	@ (8002120 <LCD_SSD_BackLightSet+0x140>)
 8002104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002108:	611a      	str	r2, [r3, #16]
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	bf00      	nop
 8002114:	f3af 8000 	nop.w
 8002118:	66666666 	.word	0x66666666
 800211c:	40046666 	.word	0x40046666
 8002120:	40011000 	.word	0x40011000
 8002124:	40010c00 	.word	0x40010c00

08002128 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d177      	bne.n	8002228 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8002138:	4b80      	ldr	r3, [pc, #512]	@ (800233c <LCD_Display_Dir+0x214>)
 800213a:	2200      	movs	r2, #0
 800213c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 800213e:	4b7f      	ldr	r3, [pc, #508]	@ (800233c <LCD_Display_Dir+0x214>)
 8002140:	22f0      	movs	r2, #240	@ 0xf0
 8002142:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8002144:	4b7d      	ldr	r3, [pc, #500]	@ (800233c <LCD_Display_Dir+0x214>)
 8002146:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800214a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800214c:	4b7b      	ldr	r3, [pc, #492]	@ (800233c <LCD_Display_Dir+0x214>)
 800214e:	889b      	ldrh	r3, [r3, #4]
 8002150:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002154:	4293      	cmp	r3, r2
 8002156:	d00b      	beq.n	8002170 <LCD_Display_Dir+0x48>
 8002158:	4b78      	ldr	r3, [pc, #480]	@ (800233c <LCD_Display_Dir+0x214>)
 800215a:	889b      	ldrh	r3, [r3, #4]
 800215c:	f646 0204 	movw	r2, #26628	@ 0x6804
 8002160:	4293      	cmp	r3, r2
 8002162:	d005      	beq.n	8002170 <LCD_Display_Dir+0x48>
 8002164:	4b75      	ldr	r3, [pc, #468]	@ (800233c <LCD_Display_Dir+0x214>)
 8002166:	889b      	ldrh	r3, [r3, #4]
 8002168:	f245 3210 	movw	r2, #21264	@ 0x5310
 800216c:	4293      	cmp	r3, r2
 800216e:	d11e      	bne.n	80021ae <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8002170:	4b72      	ldr	r3, [pc, #456]	@ (800233c <LCD_Display_Dir+0x214>)
 8002172:	222c      	movs	r2, #44	@ 0x2c
 8002174:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8002176:	4b71      	ldr	r3, [pc, #452]	@ (800233c <LCD_Display_Dir+0x214>)
 8002178:	222a      	movs	r2, #42	@ 0x2a
 800217a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 800217c:	4b6f      	ldr	r3, [pc, #444]	@ (800233c <LCD_Display_Dir+0x214>)
 800217e:	222b      	movs	r2, #43	@ 0x2b
 8002180:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002182:	4b6e      	ldr	r3, [pc, #440]	@ (800233c <LCD_Display_Dir+0x214>)
 8002184:	889b      	ldrh	r3, [r3, #4]
 8002186:	f646 0204 	movw	r2, #26628	@ 0x6804
 800218a:	4293      	cmp	r3, r2
 800218c:	d006      	beq.n	800219c <LCD_Display_Dir+0x74>
 800218e:	4b6b      	ldr	r3, [pc, #428]	@ (800233c <LCD_Display_Dir+0x214>)
 8002190:	889b      	ldrh	r3, [r3, #4]
 8002192:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002196:	4293      	cmp	r3, r2
 8002198:	f040 80c7 	bne.w	800232a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 800219c:	4b67      	ldr	r3, [pc, #412]	@ (800233c <LCD_Display_Dir+0x214>)
 800219e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80021a2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 80021a4:	4b65      	ldr	r3, [pc, #404]	@ (800233c <LCD_Display_Dir+0x214>)
 80021a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80021aa:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80021ac:	e0bd      	b.n	800232a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 80021ae:	4b63      	ldr	r3, [pc, #396]	@ (800233c <LCD_Display_Dir+0x214>)
 80021b0:	889b      	ldrh	r3, [r3, #4]
 80021b2:	f245 5210 	movw	r2, #21776	@ 0x5510
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d114      	bne.n	80021e4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 80021ba:	4b60      	ldr	r3, [pc, #384]	@ (800233c <LCD_Display_Dir+0x214>)
 80021bc:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80021c0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80021c2:	4b5e      	ldr	r3, [pc, #376]	@ (800233c <LCD_Display_Dir+0x214>)
 80021c4:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80021c8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80021ca:	4b5c      	ldr	r3, [pc, #368]	@ (800233c <LCD_Display_Dir+0x214>)
 80021cc:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80021d0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 80021d2:	4b5a      	ldr	r3, [pc, #360]	@ (800233c <LCD_Display_Dir+0x214>)
 80021d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80021d8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 80021da:	4b58      	ldr	r3, [pc, #352]	@ (800233c <LCD_Display_Dir+0x214>)
 80021dc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80021e0:	805a      	strh	r2, [r3, #2]
 80021e2:	e0a3      	b.n	800232c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 80021e4:	4b55      	ldr	r3, [pc, #340]	@ (800233c <LCD_Display_Dir+0x214>)
 80021e6:	889b      	ldrh	r3, [r3, #4]
 80021e8:	f641 1263 	movw	r2, #6499	@ 0x1963
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d111      	bne.n	8002214 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80021f0:	4b52      	ldr	r3, [pc, #328]	@ (800233c <LCD_Display_Dir+0x214>)
 80021f2:	222c      	movs	r2, #44	@ 0x2c
 80021f4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 80021f6:	4b51      	ldr	r3, [pc, #324]	@ (800233c <LCD_Display_Dir+0x214>)
 80021f8:	222b      	movs	r2, #43	@ 0x2b
 80021fa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 80021fc:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <LCD_Display_Dir+0x214>)
 80021fe:	222a      	movs	r2, #42	@ 0x2a
 8002200:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8002202:	4b4e      	ldr	r3, [pc, #312]	@ (800233c <LCD_Display_Dir+0x214>)
 8002204:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002208:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800220a:	4b4c      	ldr	r3, [pc, #304]	@ (800233c <LCD_Display_Dir+0x214>)
 800220c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002210:	805a      	strh	r2, [r3, #2]
 8002212:	e08b      	b.n	800232c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8002214:	4b49      	ldr	r3, [pc, #292]	@ (800233c <LCD_Display_Dir+0x214>)
 8002216:	2222      	movs	r2, #34	@ 0x22
 8002218:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800221a:	4b48      	ldr	r3, [pc, #288]	@ (800233c <LCD_Display_Dir+0x214>)
 800221c:	2220      	movs	r2, #32
 800221e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002220:	4b46      	ldr	r3, [pc, #280]	@ (800233c <LCD_Display_Dir+0x214>)
 8002222:	2221      	movs	r2, #33	@ 0x21
 8002224:	819a      	strh	r2, [r3, #12]
 8002226:	e081      	b.n	800232c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8002228:	4b44      	ldr	r3, [pc, #272]	@ (800233c <LCD_Display_Dir+0x214>)
 800222a:	2201      	movs	r2, #1
 800222c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800222e:	4b43      	ldr	r3, [pc, #268]	@ (800233c <LCD_Display_Dir+0x214>)
 8002230:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002234:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8002236:	4b41      	ldr	r3, [pc, #260]	@ (800233c <LCD_Display_Dir+0x214>)
 8002238:	22f0      	movs	r2, #240	@ 0xf0
 800223a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800223c:	4b3f      	ldr	r3, [pc, #252]	@ (800233c <LCD_Display_Dir+0x214>)
 800223e:	889b      	ldrh	r3, [r3, #4]
 8002240:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002244:	4293      	cmp	r3, r2
 8002246:	d005      	beq.n	8002254 <LCD_Display_Dir+0x12c>
 8002248:	4b3c      	ldr	r3, [pc, #240]	@ (800233c <LCD_Display_Dir+0x214>)
 800224a:	889b      	ldrh	r3, [r3, #4]
 800224c:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002250:	4293      	cmp	r3, r2
 8002252:	d109      	bne.n	8002268 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8002254:	4b39      	ldr	r3, [pc, #228]	@ (800233c <LCD_Display_Dir+0x214>)
 8002256:	222c      	movs	r2, #44	@ 0x2c
 8002258:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800225a:	4b38      	ldr	r3, [pc, #224]	@ (800233c <LCD_Display_Dir+0x214>)
 800225c:	222a      	movs	r2, #42	@ 0x2a
 800225e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002260:	4b36      	ldr	r3, [pc, #216]	@ (800233c <LCD_Display_Dir+0x214>)
 8002262:	222b      	movs	r2, #43	@ 0x2b
 8002264:	819a      	strh	r2, [r3, #12]
 8002266:	e04b      	b.n	8002300 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8002268:	4b34      	ldr	r3, [pc, #208]	@ (800233c <LCD_Display_Dir+0x214>)
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	f646 0204 	movw	r2, #26628	@ 0x6804
 8002270:	4293      	cmp	r3, r2
 8002272:	d109      	bne.n	8002288 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8002274:	4b31      	ldr	r3, [pc, #196]	@ (800233c <LCD_Display_Dir+0x214>)
 8002276:	222c      	movs	r2, #44	@ 0x2c
 8002278:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 800227a:	4b30      	ldr	r3, [pc, #192]	@ (800233c <LCD_Display_Dir+0x214>)
 800227c:	222b      	movs	r2, #43	@ 0x2b
 800227e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8002280:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <LCD_Display_Dir+0x214>)
 8002282:	222a      	movs	r2, #42	@ 0x2a
 8002284:	819a      	strh	r2, [r3, #12]
 8002286:	e03b      	b.n	8002300 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8002288:	4b2c      	ldr	r3, [pc, #176]	@ (800233c <LCD_Display_Dir+0x214>)
 800228a:	889b      	ldrh	r3, [r3, #4]
 800228c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002290:	4293      	cmp	r3, r2
 8002292:	d114      	bne.n	80022be <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8002294:	4b29      	ldr	r3, [pc, #164]	@ (800233c <LCD_Display_Dir+0x214>)
 8002296:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 800229a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800229c:	4b27      	ldr	r3, [pc, #156]	@ (800233c <LCD_Display_Dir+0x214>)
 800229e:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 80022a2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <LCD_Display_Dir+0x214>)
 80022a6:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 80022aa:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <LCD_Display_Dir+0x214>)
 80022ae:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80022b2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80022b4:	4b21      	ldr	r3, [pc, #132]	@ (800233c <LCD_Display_Dir+0x214>)
 80022b6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80022ba:	805a      	strh	r2, [r3, #2]
 80022bc:	e020      	b.n	8002300 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80022be:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <LCD_Display_Dir+0x214>)
 80022c0:	889b      	ldrh	r3, [r3, #4]
 80022c2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d111      	bne.n	80022ee <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80022ca:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <LCD_Display_Dir+0x214>)
 80022cc:	222c      	movs	r2, #44	@ 0x2c
 80022ce:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <LCD_Display_Dir+0x214>)
 80022d2:	222a      	movs	r2, #42	@ 0x2a
 80022d4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80022d6:	4b19      	ldr	r3, [pc, #100]	@ (800233c <LCD_Display_Dir+0x214>)
 80022d8:	222b      	movs	r2, #43	@ 0x2b
 80022da:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 80022dc:	4b17      	ldr	r3, [pc, #92]	@ (800233c <LCD_Display_Dir+0x214>)
 80022de:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80022e2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <LCD_Display_Dir+0x214>)
 80022e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80022ea:	805a      	strh	r2, [r3, #2]
 80022ec:	e008      	b.n	8002300 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80022ee:	4b13      	ldr	r3, [pc, #76]	@ (800233c <LCD_Display_Dir+0x214>)
 80022f0:	2222      	movs	r2, #34	@ 0x22
 80022f2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 80022f4:	4b11      	ldr	r3, [pc, #68]	@ (800233c <LCD_Display_Dir+0x214>)
 80022f6:	2221      	movs	r2, #33	@ 0x21
 80022f8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 80022fa:	4b10      	ldr	r3, [pc, #64]	@ (800233c <LCD_Display_Dir+0x214>)
 80022fc:	2220      	movs	r2, #32
 80022fe:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002300:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <LCD_Display_Dir+0x214>)
 8002302:	889b      	ldrh	r3, [r3, #4]
 8002304:	f646 0204 	movw	r2, #26628	@ 0x6804
 8002308:	4293      	cmp	r3, r2
 800230a:	d005      	beq.n	8002318 <LCD_Display_Dir+0x1f0>
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <LCD_Display_Dir+0x214>)
 800230e:	889b      	ldrh	r3, [r3, #4]
 8002310:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002314:	4293      	cmp	r3, r2
 8002316:	d109      	bne.n	800232c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002318:	4b08      	ldr	r3, [pc, #32]	@ (800233c <LCD_Display_Dir+0x214>)
 800231a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800231e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <LCD_Display_Dir+0x214>)
 8002322:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002326:	805a      	strh	r2, [r3, #2]
 8002328:	e000      	b.n	800232c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800232a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800232c:	2000      	movs	r0, #0
 800232e:	f7ff f87d 	bl	800142c <LCD_Scan_Dir>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000080 	.word	0x20000080

08002340 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8002346:	4b90      	ldr	r3, [pc, #576]	@ (8002588 <LCD_Init+0x248>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	4a8f      	ldr	r2, [pc, #572]	@ (8002588 <LCD_Init+0x248>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	6193      	str	r3, [r2, #24]
 8002352:	4b8d      	ldr	r3, [pc, #564]	@ (8002588 <LCD_Init+0x248>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 800235e:	4b8a      	ldr	r3, [pc, #552]	@ (8002588 <LCD_Init+0x248>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4a89      	ldr	r2, [pc, #548]	@ (8002588 <LCD_Init+0x248>)
 8002364:	f043 0310 	orr.w	r3, r3, #16
 8002368:	6193      	str	r3, [r2, #24]
 800236a:	4b87      	ldr	r3, [pc, #540]	@ (8002588 <LCD_Init+0x248>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8002376:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800237a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 800237c:	2301      	movs	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8002380:	2301      	movs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8002384:	2303      	movs	r3, #3
 8002386:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	4619      	mov	r1, r3
 800238e:	487f      	ldr	r0, [pc, #508]	@ (800258c <LCD_Init+0x24c>)
 8002390:	f005 fbc8 	bl	8007b24 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8002394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002398:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4619      	mov	r1, r3
 80023a0:	487b      	ldr	r0, [pc, #492]	@ (8002590 <LCD_Init+0x250>)
 80023a2:	f005 fbbf 	bl	8007b24 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80023a6:	2032      	movs	r0, #50	@ 0x32
 80023a8:	f005 fa58 	bl	800785c <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80023ac:	2101      	movs	r1, #1
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fd2a 	bl	8000e08 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80023b4:	2032      	movs	r0, #50	@ 0x32
 80023b6:	f005 fa51 	bl	800785c <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe fd4e 	bl	8000e5c <LCD_ReadReg>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b73      	ldr	r3, [pc, #460]	@ (8002594 <LCD_Init+0x254>)
 80023c6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80023c8:	4b72      	ldr	r3, [pc, #456]	@ (8002594 <LCD_Init+0x254>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	2bfe      	cmp	r3, #254	@ 0xfe
 80023ce:	d90b      	bls.n	80023e8 <LCD_Init+0xa8>
 80023d0:	4b70      	ldr	r3, [pc, #448]	@ (8002594 <LCD_Init+0x254>)
 80023d2:	889b      	ldrh	r3, [r3, #4]
 80023d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023d8:	4293      	cmp	r3, r2
 80023da:	d005      	beq.n	80023e8 <LCD_Init+0xa8>
 80023dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <LCD_Init+0x254>)
 80023de:	889b      	ldrh	r3, [r3, #4]
 80023e0:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 80023e4:	f040 80c8 	bne.w	8002578 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80023e8:	20d3      	movs	r0, #211	@ 0xd3
 80023ea:	f7fe fc81 	bl	8000cf0 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 80023ee:	f7fe fcc7 	bl	8000d80 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 80023f2:	f7fe fcc5 	bl	8000d80 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 80023f6:	f7fe fcc3 	bl	8000d80 <LCD_RD_DATA>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b65      	ldr	r3, [pc, #404]	@ (8002594 <LCD_Init+0x254>)
 8002400:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8002402:	4b64      	ldr	r3, [pc, #400]	@ (8002594 <LCD_Init+0x254>)
 8002404:	889b      	ldrh	r3, [r3, #4]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b62      	ldr	r3, [pc, #392]	@ (8002594 <LCD_Init+0x254>)
 800240c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800240e:	f7fe fcb7 	bl	8000d80 <LCD_RD_DATA>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	4b5f      	ldr	r3, [pc, #380]	@ (8002594 <LCD_Init+0x254>)
 8002418:	889b      	ldrh	r3, [r3, #4]
 800241a:	4313      	orrs	r3, r2
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b5d      	ldr	r3, [pc, #372]	@ (8002594 <LCD_Init+0x254>)
 8002420:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8002422:	4b5c      	ldr	r3, [pc, #368]	@ (8002594 <LCD_Init+0x254>)
 8002424:	889b      	ldrh	r3, [r3, #4]
 8002426:	f249 3241 	movw	r2, #37697	@ 0x9341
 800242a:	4293      	cmp	r3, r2
 800242c:	f000 80a4 	beq.w	8002578 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002430:	20bf      	movs	r0, #191	@ 0xbf
 8002432:	f7fe fc5d 	bl	8000cf0 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8002436:	f7fe fca3 	bl	8000d80 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800243a:	f7fe fca1 	bl	8000d80 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800243e:	f7fe fc9f 	bl	8000d80 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8002442:	f7fe fc9d 	bl	8000d80 <LCD_RD_DATA>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	4b52      	ldr	r3, [pc, #328]	@ (8002594 <LCD_Init+0x254>)
 800244c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800244e:	4b51      	ldr	r3, [pc, #324]	@ (8002594 <LCD_Init+0x254>)
 8002450:	889b      	ldrh	r3, [r3, #4]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	b29a      	uxth	r2, r3
 8002456:	4b4f      	ldr	r3, [pc, #316]	@ (8002594 <LCD_Init+0x254>)
 8002458:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800245a:	f7fe fc91 	bl	8000d80 <LCD_RD_DATA>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	4b4c      	ldr	r3, [pc, #304]	@ (8002594 <LCD_Init+0x254>)
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	4313      	orrs	r3, r2
 8002468:	b29a      	uxth	r2, r3
 800246a:	4b4a      	ldr	r3, [pc, #296]	@ (8002594 <LCD_Init+0x254>)
 800246c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <LCD_Init+0x254>)
 8002470:	889b      	ldrh	r3, [r3, #4]
 8002472:	f646 0204 	movw	r2, #26628	@ 0x6804
 8002476:	4293      	cmp	r3, r2
 8002478:	d07e      	beq.n	8002578 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800247a:	20d4      	movs	r0, #212	@ 0xd4
 800247c:	f7fe fc38 	bl	8000cf0 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002480:	f7fe fc7e 	bl	8000d80 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8002484:	f7fe fc7c 	bl	8000d80 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002488:	f7fe fc7a 	bl	8000d80 <LCD_RD_DATA>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	4b40      	ldr	r3, [pc, #256]	@ (8002594 <LCD_Init+0x254>)
 8002492:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8002494:	4b3f      	ldr	r3, [pc, #252]	@ (8002594 <LCD_Init+0x254>)
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	b29a      	uxth	r2, r3
 800249c:	4b3d      	ldr	r3, [pc, #244]	@ (8002594 <LCD_Init+0x254>)
 800249e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80024a0:	f7fe fc6e 	bl	8000d80 <LCD_RD_DATA>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461a      	mov	r2, r3
 80024a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <LCD_Init+0x254>)
 80024aa:	889b      	ldrh	r3, [r3, #4]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <LCD_Init+0x254>)
 80024b2:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80024b4:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <LCD_Init+0x254>)
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80024bc:	4293      	cmp	r3, r2
 80024be:	d05b      	beq.n	8002578 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80024c0:	f44f 405a 	mov.w	r0, #55808	@ 0xda00
 80024c4:	f7fe fc14 	bl	8000cf0 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80024c8:	f7fe fc5a 	bl	8000d80 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80024cc:	f44f 405b 	mov.w	r0, #56064	@ 0xdb00
 80024d0:	f7fe fc0e 	bl	8000cf0 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80024d4:	f7fe fc54 	bl	8000d80 <LCD_RD_DATA>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002594 <LCD_Init+0x254>)
 80024de:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80024e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002594 <LCD_Init+0x254>)
 80024e2:	889b      	ldrh	r3, [r3, #4]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <LCD_Init+0x254>)
 80024ea:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80024ec:	f44f 405c 	mov.w	r0, #56320	@ 0xdc00
 80024f0:	f7fe fbfe 	bl	8000cf0 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 80024f4:	f7fe fc44 	bl	8000d80 <LCD_RD_DATA>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <LCD_Init+0x254>)
 80024fe:	889b      	ldrh	r3, [r3, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	b29a      	uxth	r2, r3
 8002504:	4b23      	ldr	r3, [pc, #140]	@ (8002594 <LCD_Init+0x254>)
 8002506:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <LCD_Init+0x254>)
 800250a:	889b      	ldrh	r3, [r3, #4]
 800250c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002510:	d103      	bne.n	800251a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002512:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <LCD_Init+0x254>)
 8002514:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002518:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800251a:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <LCD_Init+0x254>)
 800251c:	889b      	ldrh	r3, [r3, #4]
 800251e:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002522:	4293      	cmp	r3, r2
 8002524:	d028      	beq.n	8002578 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8002526:	20a1      	movs	r0, #161	@ 0xa1
 8002528:	f7fe fbe2 	bl	8000cf0 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800252c:	f7fe fc28 	bl	8000d80 <LCD_RD_DATA>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <LCD_Init+0x254>)
 8002536:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002538:	f7fe fc22 	bl	8000d80 <LCD_RD_DATA>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <LCD_Init+0x254>)
 8002542:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8002544:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <LCD_Init+0x254>)
 8002546:	889b      	ldrh	r3, [r3, #4]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <LCD_Init+0x254>)
 800254e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002550:	f7fe fc16 	bl	8000d80 <LCD_RD_DATA>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <LCD_Init+0x254>)
 800255a:	889b      	ldrh	r3, [r3, #4]
 800255c:	4313      	orrs	r3, r2
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <LCD_Init+0x254>)
 8002562:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <LCD_Init+0x254>)
 8002566:	889b      	ldrh	r3, [r3, #4]
 8002568:	f245 7261 	movw	r2, #22369	@ 0x5761
 800256c:	4293      	cmp	r3, r2
 800256e:	d103      	bne.n	8002578 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <LCD_Init+0x254>)
 8002572:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002576:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <LCD_Init+0x254>)
 800257a:	889b      	ldrh	r3, [r3, #4]
 800257c:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002580:	4293      	cmp	r3, r2
 8002582:	f040 811f 	bne.w	80027c4 <LCD_Init+0x484>
 8002586:	e007      	b.n	8002598 <LCD_Init+0x258>
 8002588:	40021000 	.word	0x40021000
 800258c:	40011000 	.word	0x40011000
 8002590:	40010c00 	.word	0x40010c00
 8002594:	20000080 	.word	0x20000080
			{
		LCD_WR_REG(0xCF);
 8002598:	20cf      	movs	r0, #207	@ 0xcf
 800259a:	f7fe fba9 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe fbca 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80025a4:	20c1      	movs	r0, #193	@ 0xc1
 80025a6:	f7fe fbc7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80025aa:	2030      	movs	r0, #48	@ 0x30
 80025ac:	f7fe fbc4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80025b0:	20ed      	movs	r0, #237	@ 0xed
 80025b2:	f7fe fb9d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80025b6:	2064      	movs	r0, #100	@ 0x64
 80025b8:	f7fe fbbe 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80025bc:	2003      	movs	r0, #3
 80025be:	f7fe fbbb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80025c2:	2012      	movs	r0, #18
 80025c4:	f7fe fbb8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80025c8:	2081      	movs	r0, #129	@ 0x81
 80025ca:	f7fe fbb5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80025ce:	20e8      	movs	r0, #232	@ 0xe8
 80025d0:	f7fe fb8e 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80025d4:	2085      	movs	r0, #133	@ 0x85
 80025d6:	f7fe fbaf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80025da:	2010      	movs	r0, #16
 80025dc:	f7fe fbac 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80025e0:	207a      	movs	r0, #122	@ 0x7a
 80025e2:	f7fe fba9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80025e6:	20cb      	movs	r0, #203	@ 0xcb
 80025e8:	f7fe fb82 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80025ec:	2039      	movs	r0, #57	@ 0x39
 80025ee:	f7fe fba3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80025f2:	202c      	movs	r0, #44	@ 0x2c
 80025f4:	f7fe fba0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe fb9d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80025fe:	2034      	movs	r0, #52	@ 0x34
 8002600:	f7fe fb9a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002604:	2002      	movs	r0, #2
 8002606:	f7fe fb97 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800260a:	20f7      	movs	r0, #247	@ 0xf7
 800260c:	f7fe fb70 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002610:	2020      	movs	r0, #32
 8002612:	f7fe fb91 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8002616:	20ea      	movs	r0, #234	@ 0xea
 8002618:	f7fe fb6a 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800261c:	2000      	movs	r0, #0
 800261e:	f7fe fb8b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe fb88 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002628:	20c0      	movs	r0, #192	@ 0xc0
 800262a:	f7fe fb61 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800262e:	201b      	movs	r0, #27
 8002630:	f7fe fb82 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8002634:	20c1      	movs	r0, #193	@ 0xc1
 8002636:	f7fe fb5b 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800263a:	2001      	movs	r0, #1
 800263c:	f7fe fb7c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002640:	20c5      	movs	r0, #197	@ 0xc5
 8002642:	f7fe fb55 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8002646:	2030      	movs	r0, #48	@ 0x30
 8002648:	f7fe fb76 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800264c:	2030      	movs	r0, #48	@ 0x30
 800264e:	f7fe fb73 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002652:	20c7      	movs	r0, #199	@ 0xc7
 8002654:	f7fe fb4c 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002658:	20b7      	movs	r0, #183	@ 0xb7
 800265a:	f7fe fb6d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800265e:	2036      	movs	r0, #54	@ 0x36
 8002660:	f7fe fb46 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002664:	2048      	movs	r0, #72	@ 0x48
 8002666:	f7fe fb67 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800266a:	203a      	movs	r0, #58	@ 0x3a
 800266c:	f7fe fb40 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002670:	2055      	movs	r0, #85	@ 0x55
 8002672:	f7fe fb61 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002676:	20b1      	movs	r0, #177	@ 0xb1
 8002678:	f7fe fb3a 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe fb5b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8002682:	201a      	movs	r0, #26
 8002684:	f7fe fb58 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002688:	20b6      	movs	r0, #182	@ 0xb6
 800268a:	f7fe fb31 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800268e:	200a      	movs	r0, #10
 8002690:	f7fe fb52 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002694:	20a2      	movs	r0, #162	@ 0xa2
 8002696:	f7fe fb4f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800269a:	20f2      	movs	r0, #242	@ 0xf2
 800269c:	f7fe fb28 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe fb49 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80026a6:	2026      	movs	r0, #38	@ 0x26
 80026a8:	f7fe fb22 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80026ac:	2001      	movs	r0, #1
 80026ae:	f7fe fb43 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80026b2:	20e0      	movs	r0, #224	@ 0xe0
 80026b4:	f7fe fb1c 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80026b8:	200f      	movs	r0, #15
 80026ba:	f7fe fb3d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80026be:	202a      	movs	r0, #42	@ 0x2a
 80026c0:	f7fe fb3a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80026c4:	2028      	movs	r0, #40	@ 0x28
 80026c6:	f7fe fb37 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80026ca:	2008      	movs	r0, #8
 80026cc:	f7fe fb34 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80026d0:	200e      	movs	r0, #14
 80026d2:	f7fe fb31 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80026d6:	2008      	movs	r0, #8
 80026d8:	f7fe fb2e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80026dc:	2054      	movs	r0, #84	@ 0x54
 80026de:	f7fe fb2b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80026e2:	20a9      	movs	r0, #169	@ 0xa9
 80026e4:	f7fe fb28 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80026e8:	2043      	movs	r0, #67	@ 0x43
 80026ea:	f7fe fb25 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80026ee:	200a      	movs	r0, #10
 80026f0:	f7fe fb22 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80026f4:	200f      	movs	r0, #15
 80026f6:	f7fe fb1f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe fb1c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe fb19 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fb16 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe fb13 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8002712:	20e1      	movs	r0, #225	@ 0xe1
 8002714:	f7fe faec 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe fb0d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800271e:	2015      	movs	r0, #21
 8002720:	f7fe fb0a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002724:	2017      	movs	r0, #23
 8002726:	f7fe fb07 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800272a:	2007      	movs	r0, #7
 800272c:	f7fe fb04 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002730:	2011      	movs	r0, #17
 8002732:	f7fe fb01 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8002736:	2006      	movs	r0, #6
 8002738:	f7fe fafe 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800273c:	202b      	movs	r0, #43	@ 0x2b
 800273e:	f7fe fafb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002742:	2056      	movs	r0, #86	@ 0x56
 8002744:	f7fe faf8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002748:	203c      	movs	r0, #60	@ 0x3c
 800274a:	f7fe faf5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800274e:	2005      	movs	r0, #5
 8002750:	f7fe faf2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002754:	2010      	movs	r0, #16
 8002756:	f7fe faef 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800275a:	200f      	movs	r0, #15
 800275c:	f7fe faec 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002760:	203f      	movs	r0, #63	@ 0x3f
 8002762:	f7fe fae9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002766:	203f      	movs	r0, #63	@ 0x3f
 8002768:	f7fe fae6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800276c:	200f      	movs	r0, #15
 800276e:	f7fe fae3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002772:	202b      	movs	r0, #43	@ 0x2b
 8002774:	f7fe fabc 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe fadd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe fada 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002784:	2001      	movs	r0, #1
 8002786:	f7fe fad7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 800278a:	203f      	movs	r0, #63	@ 0x3f
 800278c:	f7fe fad4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002790:	202a      	movs	r0, #42	@ 0x2a
 8002792:	f7fe faad 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe face 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f7fe facb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe fac8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80027a8:	20ef      	movs	r0, #239	@ 0xef
 80027aa:	f7fe fac5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80027ae:	2011      	movs	r0, #17
 80027b0:	f7fe fa9e 	bl	8000cf0 <LCD_WR_REG>
		HAL_Delay(120);
 80027b4:	2078      	movs	r0, #120	@ 0x78
 80027b6:	f005 f851 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80027ba:	2029      	movs	r0, #41	@ 0x29
 80027bc:	f7fe fa98 	bl	8000cf0 <LCD_WR_REG>
 80027c0:	f003 bcd8 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80027c4:	4b58      	ldr	r3, [pc, #352]	@ (8002928 <LCD_Init+0x5e8>)
 80027c6:	889b      	ldrh	r3, [r3, #4]
 80027c8:	f646 0204 	movw	r2, #26628	@ 0x6804
 80027cc:	4293      	cmp	r3, r2
 80027ce:	f040 80ad 	bne.w	800292c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80027d2:	2011      	movs	r0, #17
 80027d4:	f7fe fa8c 	bl	8000cf0 <LCD_WR_REG>
		HAL_Delay(20);
 80027d8:	2014      	movs	r0, #20
 80027da:	f005 f83f 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80027de:	20d0      	movs	r0, #208	@ 0xd0
 80027e0:	f7fe fa86 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80027e4:	2007      	movs	r0, #7
 80027e6:	f7fe faa7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80027ea:	2042      	movs	r0, #66	@ 0x42
 80027ec:	f7fe faa4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80027f0:	201d      	movs	r0, #29
 80027f2:	f7fe faa1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80027f6:	20d1      	movs	r0, #209	@ 0xd1
 80027f8:	f7fe fa7a 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe fa9b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8002802:	201a      	movs	r0, #26
 8002804:	f7fe fa98 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002808:	2009      	movs	r0, #9
 800280a:	f7fe fa95 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800280e:	20d2      	movs	r0, #210	@ 0xd2
 8002810:	f7fe fa6e 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002814:	2001      	movs	r0, #1
 8002816:	f7fe fa8f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800281a:	2022      	movs	r0, #34	@ 0x22
 800281c:	f7fe fa8c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002820:	20c0      	movs	r0, #192	@ 0xc0
 8002822:	f7fe fa65 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8002826:	2010      	movs	r0, #16
 8002828:	f7fe fa86 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800282c:	203b      	movs	r0, #59	@ 0x3b
 800282e:	f7fe fa83 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe fa80 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002838:	2002      	movs	r0, #2
 800283a:	f7fe fa7d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800283e:	2011      	movs	r0, #17
 8002840:	f7fe fa7a 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8002844:	20c5      	movs	r0, #197	@ 0xc5
 8002846:	f7fe fa53 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800284a:	2003      	movs	r0, #3
 800284c:	f7fe fa74 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002850:	20c8      	movs	r0, #200	@ 0xc8
 8002852:	f7fe fa4d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe fa6e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800285c:	2025      	movs	r0, #37	@ 0x25
 800285e:	f7fe fa6b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002862:	2021      	movs	r0, #33	@ 0x21
 8002864:	f7fe fa68 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002868:	2005      	movs	r0, #5
 800286a:	f7fe fa65 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe fa62 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002874:	200a      	movs	r0, #10
 8002876:	f7fe fa5f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800287a:	2065      	movs	r0, #101	@ 0x65
 800287c:	f7fe fa5c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002880:	2025      	movs	r0, #37	@ 0x25
 8002882:	f7fe fa59 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002886:	2077      	movs	r0, #119	@ 0x77
 8002888:	f7fe fa56 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800288c:	2050      	movs	r0, #80	@ 0x50
 800288e:	f7fe fa53 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002892:	200f      	movs	r0, #15
 8002894:	f7fe fa50 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002898:	2000      	movs	r0, #0
 800289a:	f7fe fa4d 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800289e:	20f8      	movs	r0, #248	@ 0xf8
 80028a0:	f7fe fa26 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80028a4:	2001      	movs	r0, #1
 80028a6:	f7fe fa47 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80028aa:	20fe      	movs	r0, #254	@ 0xfe
 80028ac:	f7fe fa20 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe fa41 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80028b6:	2002      	movs	r0, #2
 80028b8:	f7fe fa3e 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80028bc:	2020      	movs	r0, #32
 80028be:	f7fe fa17 	bl	8000cf0 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80028c2:	2036      	movs	r0, #54	@ 0x36
 80028c4:	f7fe fa14 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80028c8:	2008      	movs	r0, #8
 80028ca:	f7fe fa35 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80028ce:	203a      	movs	r0, #58	@ 0x3a
 80028d0:	f7fe fa0e 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80028d4:	2055      	movs	r0, #85	@ 0x55
 80028d6:	f7fe fa2f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80028da:	202b      	movs	r0, #43	@ 0x2b
 80028dc:	f7fe fa08 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe fa29 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe fa26 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80028ec:	2001      	movs	r0, #1
 80028ee:	f7fe fa23 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80028f2:	203f      	movs	r0, #63	@ 0x3f
 80028f4:	f7fe fa20 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80028f8:	202a      	movs	r0, #42	@ 0x2a
 80028fa:	f7fe f9f9 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe fa1a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe fa17 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800290a:	2001      	movs	r0, #1
 800290c:	f7fe fa14 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002910:	20df      	movs	r0, #223	@ 0xdf
 8002912:	f7fe fa11 	bl	8000d38 <LCD_WR_DATAX>
		HAL_Delay(120);
 8002916:	2078      	movs	r0, #120	@ 0x78
 8002918:	f004 ffa0 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0X29);
 800291c:	2029      	movs	r0, #41	@ 0x29
 800291e:	f7fe f9e7 	bl	8000cf0 <LCD_WR_REG>
 8002922:	f003 bc27 	b.w	8006174 <LCD_Init+0x3e34>
 8002926:	bf00      	nop
 8002928:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5310) {
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <LCD_Init+0x5fc>)
 800292e:	889b      	ldrh	r3, [r3, #4]
 8002930:	f245 3210 	movw	r2, #21264	@ 0x5310
 8002934:	4293      	cmp	r3, r2
 8002936:	f040 877c 	bne.w	8003832 <LCD_Init+0x14f2>
 800293a:	e001      	b.n	8002940 <LCD_Init+0x600>
 800293c:	20000080 	.word	0x20000080
		LCD_WR_REG(0xED);
 8002940:	20ed      	movs	r0, #237	@ 0xed
 8002942:	f7fe f9d5 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002946:	2001      	movs	r0, #1
 8002948:	f7fe f9f6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800294c:	20fe      	movs	r0, #254	@ 0xfe
 800294e:	f7fe f9f3 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002952:	20ee      	movs	r0, #238	@ 0xee
 8002954:	f7fe f9cc 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002958:	20de      	movs	r0, #222	@ 0xde
 800295a:	f7fe f9ed 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800295e:	2021      	movs	r0, #33	@ 0x21
 8002960:	f7fe f9ea 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002964:	20f1      	movs	r0, #241	@ 0xf1
 8002966:	f7fe f9c3 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800296a:	2001      	movs	r0, #1
 800296c:	f7fe f9e4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002970:	20df      	movs	r0, #223	@ 0xdf
 8002972:	f7fe f9bd 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002976:	2010      	movs	r0, #16
 8002978:	f7fe f9de 	bl	8000d38 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800297c:	20c4      	movs	r0, #196	@ 0xc4
 800297e:	f7fe f9b7 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002982:	208f      	movs	r0, #143	@ 0x8f
 8002984:	f7fe f9d8 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002988:	20c6      	movs	r0, #198	@ 0xc6
 800298a:	f7fe f9b1 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe f9d2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002994:	20e2      	movs	r0, #226	@ 0xe2
 8002996:	f7fe f9cf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800299a:	20e2      	movs	r0, #226	@ 0xe2
 800299c:	f7fe f9cc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80029a0:	20e2      	movs	r0, #226	@ 0xe2
 80029a2:	f7fe f9c9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80029a6:	20bf      	movs	r0, #191	@ 0xbf
 80029a8:	f7fe f9a2 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80029ac:	20aa      	movs	r0, #170	@ 0xaa
 80029ae:	f7fe f9c3 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80029b2:	20b0      	movs	r0, #176	@ 0xb0
 80029b4:	f7fe f99c 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80029b8:	200d      	movs	r0, #13
 80029ba:	f7fe f9bd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe f9ba 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80029c4:	200d      	movs	r0, #13
 80029c6:	f7fe f9b7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe f9b4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80029d0:	2011      	movs	r0, #17
 80029d2:	f7fe f9b1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fe f9ae 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80029dc:	2019      	movs	r0, #25
 80029de:	f7fe f9ab 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fe f9a8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80029e8:	2021      	movs	r0, #33	@ 0x21
 80029ea:	f7fe f9a5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7fe f9a2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80029f4:	202d      	movs	r0, #45	@ 0x2d
 80029f6:	f7fe f99f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7fe f99c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002a00:	203d      	movs	r0, #61	@ 0x3d
 8002a02:	f7fe f999 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f7fe f996 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002a0c:	205d      	movs	r0, #93	@ 0x5d
 8002a0e:	f7fe f993 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7fe f990 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002a18:	205d      	movs	r0, #93	@ 0x5d
 8002a1a:	f7fe f98d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe f98a 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8002a24:	20b1      	movs	r0, #177	@ 0xb1
 8002a26:	f7fe f963 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002a2a:	2080      	movs	r0, #128	@ 0x80
 8002a2c:	f7fe f984 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fe f981 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002a36:	208b      	movs	r0, #139	@ 0x8b
 8002a38:	f7fe f97e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fe f97b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002a42:	2096      	movs	r0, #150	@ 0x96
 8002a44:	f7fe f978 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe f975 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002a4e:	20b2      	movs	r0, #178	@ 0xb2
 8002a50:	f7fe f94e 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fe f96f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7fe f96c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002a60:	2002      	movs	r0, #2
 8002a62:	f7fe f969 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7fe f966 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f7fe f963 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7fe f960 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002a78:	20b3      	movs	r0, #179	@ 0xb3
 8002a7a:	f7fe f939 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f7fe f95a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fe f957 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe f954 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fe f951 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe f94e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe f94b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fe f948 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe f945 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fe f942 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fe f93f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fe f93c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe f939 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fe f936 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe f933 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fe f930 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f92d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fe f92a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fe f927 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7fe f924 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fe f921 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fe f91e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fe f91b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fe f918 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fe f915 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002b0e:	20b4      	movs	r0, #180	@ 0xb4
 8002b10:	f7fe f8ee 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8002b14:	208b      	movs	r0, #139	@ 0x8b
 8002b16:	f7fe f90f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fe f90c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002b20:	2096      	movs	r0, #150	@ 0x96
 8002b22:	f7fe f909 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe f906 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002b2c:	20a1      	movs	r0, #161	@ 0xa1
 8002b2e:	f7fe f903 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe f900 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002b38:	20b5      	movs	r0, #181	@ 0xb5
 8002b3a:	f7fe f8d9 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002b3e:	2002      	movs	r0, #2
 8002b40:	f7fe f8fa 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe f8f7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	f7fe f8f4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fe f8f1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002b56:	2004      	movs	r0, #4
 8002b58:	f7fe f8ee 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fe f8eb 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002b62:	20b6      	movs	r0, #182	@ 0xb6
 8002b64:	f7fe f8c4 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fe f8e5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe f8e2 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002b74:	20b7      	movs	r0, #183	@ 0xb7
 8002b76:	f7fe f8bb 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe f8dc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fe f8d9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002b86:	203f      	movs	r0, #63	@ 0x3f
 8002b88:	f7fe f8d6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fe f8d3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002b92:	205e      	movs	r0, #94	@ 0x5e
 8002b94:	f7fe f8d0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7fe f8cd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002b9e:	2064      	movs	r0, #100	@ 0x64
 8002ba0:	f7fe f8ca 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fe f8c7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002baa:	208c      	movs	r0, #140	@ 0x8c
 8002bac:	f7fe f8c4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fe f8c1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002bb6:	20ac      	movs	r0, #172	@ 0xac
 8002bb8:	f7fe f8be 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fe f8bb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002bc2:	20dc      	movs	r0, #220	@ 0xdc
 8002bc4:	f7fe f8b8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fe f8b5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002bce:	2070      	movs	r0, #112	@ 0x70
 8002bd0:	f7fe f8b2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fe f8af 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002bda:	2090      	movs	r0, #144	@ 0x90
 8002bdc:	f7fe f8ac 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7fe f8a9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002be6:	20eb      	movs	r0, #235	@ 0xeb
 8002be8:	f7fe f8a6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7fe f8a3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002bf2:	20dc      	movs	r0, #220	@ 0xdc
 8002bf4:	f7fe f8a0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fe f89d 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002bfe:	20b8      	movs	r0, #184	@ 0xb8
 8002c00:	f7fe f876 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fe f897 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fe f894 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fe f891 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fe f88e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fe f88b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fe f888 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fe f885 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fe f882 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002c34:	20ba      	movs	r0, #186	@ 0xba
 8002c36:	f7fe f85b 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002c3a:	2024      	movs	r0, #36	@ 0x24
 8002c3c:	f7fe f87c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fe f879 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fe f876 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fe f873 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002c52:	20c1      	movs	r0, #193	@ 0xc1
 8002c54:	f7fe f84c 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002c58:	2020      	movs	r0, #32
 8002c5a:	f7fe f86d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fe f86a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002c64:	2054      	movs	r0, #84	@ 0x54
 8002c66:	f7fe f867 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fe f864 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002c70:	20ff      	movs	r0, #255	@ 0xff
 8002c72:	f7fe f861 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7fe f85e 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002c7c:	20c2      	movs	r0, #194	@ 0xc2
 8002c7e:	f7fe f837 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002c82:	200a      	movs	r0, #10
 8002c84:	f7fe f858 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fe f855 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002c8e:	2004      	movs	r0, #4
 8002c90:	f7fe f852 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fe f84f 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002c9a:	20c3      	movs	r0, #195	@ 0xc3
 8002c9c:	f7fe f828 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002ca0:	203c      	movs	r0, #60	@ 0x3c
 8002ca2:	f7fe f849 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fe f846 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002cac:	203a      	movs	r0, #58	@ 0x3a
 8002cae:	f7fe f843 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fe f840 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002cb8:	2039      	movs	r0, #57	@ 0x39
 8002cba:	f7fe f83d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fe f83a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002cc4:	2037      	movs	r0, #55	@ 0x37
 8002cc6:	f7fe f837 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fe f834 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002cd0:	203c      	movs	r0, #60	@ 0x3c
 8002cd2:	f7fe f831 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fe f82e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002cdc:	2036      	movs	r0, #54	@ 0x36
 8002cde:	f7fe f82b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fe f828 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002ce8:	2032      	movs	r0, #50	@ 0x32
 8002cea:	f7fe f825 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fe f822 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002cf4:	202f      	movs	r0, #47	@ 0x2f
 8002cf6:	f7fe f81f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fe f81c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002d00:	202c      	movs	r0, #44	@ 0x2c
 8002d02:	f7fe f819 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fe f816 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002d0c:	2029      	movs	r0, #41	@ 0x29
 8002d0e:	f7fe f813 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fe f810 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002d18:	2026      	movs	r0, #38	@ 0x26
 8002d1a:	f7fe f80d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fe f80a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002d24:	2024      	movs	r0, #36	@ 0x24
 8002d26:	f7fe f807 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fe f804 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002d30:	2024      	movs	r0, #36	@ 0x24
 8002d32:	f7fe f801 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fffe 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002d3c:	2023      	movs	r0, #35	@ 0x23
 8002d3e:	f7fd fffb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd fff8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002d48:	203c      	movs	r0, #60	@ 0x3c
 8002d4a:	f7fd fff5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd fff2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002d54:	2036      	movs	r0, #54	@ 0x36
 8002d56:	f7fd ffef 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7fd ffec 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002d60:	2032      	movs	r0, #50	@ 0x32
 8002d62:	f7fd ffe9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fd ffe6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002d6c:	202f      	movs	r0, #47	@ 0x2f
 8002d6e:	f7fd ffe3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7fd ffe0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002d78:	202c      	movs	r0, #44	@ 0x2c
 8002d7a:	f7fd ffdd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7fd ffda 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002d84:	2029      	movs	r0, #41	@ 0x29
 8002d86:	f7fd ffd7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd ffd4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002d90:	2026      	movs	r0, #38	@ 0x26
 8002d92:	f7fd ffd1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd ffce 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002d9c:	2024      	movs	r0, #36	@ 0x24
 8002d9e:	f7fd ffcb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd ffc8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002da8:	2024      	movs	r0, #36	@ 0x24
 8002daa:	f7fd ffc5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd ffc2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002db4:	2023      	movs	r0, #35	@ 0x23
 8002db6:	f7fd ffbf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7fd ffbc 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002dc0:	20c4      	movs	r0, #196	@ 0xc4
 8002dc2:	f7fd ff95 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002dc6:	2062      	movs	r0, #98	@ 0x62
 8002dc8:	f7fd ffb6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd ffb3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002dd2:	2005      	movs	r0, #5
 8002dd4:	f7fd ffb0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd ffad 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002dde:	2084      	movs	r0, #132	@ 0x84
 8002de0:	f7fd ffaa 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd ffa7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002dea:	20f0      	movs	r0, #240	@ 0xf0
 8002dec:	f7fd ffa4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd ffa1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002df6:	2018      	movs	r0, #24
 8002df8:	f7fd ff9e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd ff9b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002e02:	20a4      	movs	r0, #164	@ 0xa4
 8002e04:	f7fd ff98 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd ff95 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002e0e:	2018      	movs	r0, #24
 8002e10:	f7fd ff92 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd ff8f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e1a:	2050      	movs	r0, #80	@ 0x50
 8002e1c:	f7fd ff8c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd ff89 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002e26:	200c      	movs	r0, #12
 8002e28:	f7fd ff86 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd ff83 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002e32:	2017      	movs	r0, #23
 8002e34:	f7fd ff80 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd ff7d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002e3e:	2095      	movs	r0, #149	@ 0x95
 8002e40:	f7fd ff7a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd ff77 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e4a:	20f3      	movs	r0, #243	@ 0xf3
 8002e4c:	f7fd ff74 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd ff71 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002e56:	20e6      	movs	r0, #230	@ 0xe6
 8002e58:	f7fd ff6e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd ff6b 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002e62:	20c5      	movs	r0, #197	@ 0xc5
 8002e64:	f7fd ff44 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002e68:	2032      	movs	r0, #50	@ 0x32
 8002e6a:	f7fd ff65 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fd ff62 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e74:	2044      	movs	r0, #68	@ 0x44
 8002e76:	f7fd ff5f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fd ff5c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002e80:	2065      	movs	r0, #101	@ 0x65
 8002e82:	f7fd ff59 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd ff56 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002e8c:	2076      	movs	r0, #118	@ 0x76
 8002e8e:	f7fd ff53 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd ff50 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e98:	2088      	movs	r0, #136	@ 0x88
 8002e9a:	f7fd ff4d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd ff4a 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002ea4:	20c6      	movs	r0, #198	@ 0xc6
 8002ea6:	f7fd ff23 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002eaa:	2020      	movs	r0, #32
 8002eac:	f7fd ff44 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fd ff41 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002eb6:	2017      	movs	r0, #23
 8002eb8:	f7fd ff3e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fd ff3b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f7fd ff38 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fd ff35 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002ece:	20c7      	movs	r0, #199	@ 0xc7
 8002ed0:	f7fd ff0e 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd ff2f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd ff2c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fd ff29 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd ff26 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002eec:	20c8      	movs	r0, #200	@ 0xc8
 8002eee:	f7fd feff 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd ff20 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7fd ff1d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd ff1a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fd ff17 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002f0a:	20c9      	movs	r0, #201	@ 0xc9
 8002f0c:	f7fd fef0 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7fd ff11 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd ff0e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fd ff0b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd ff08 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fd ff05 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd ff02 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fd feff 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fefc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fd fef9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fef6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fd fef3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fef0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fd feed 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd feea 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7fd fee7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fee4 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002f70:	20e0      	movs	r0, #224	@ 0xe0
 8002f72:	f7fd febd 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002f76:	2016      	movs	r0, #22
 8002f78:	f7fd fede 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fd fedb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002f82:	201c      	movs	r0, #28
 8002f84:	f7fd fed8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fd fed5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002f8e:	2021      	movs	r0, #33	@ 0x21
 8002f90:	f7fd fed2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fecf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002f9a:	2036      	movs	r0, #54	@ 0x36
 8002f9c:	f7fd fecc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fd fec9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002fa6:	2046      	movs	r0, #70	@ 0x46
 8002fa8:	f7fd fec6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fd fec3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002fb2:	2052      	movs	r0, #82	@ 0x52
 8002fb4:	f7fd fec0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd febd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002fbe:	2064      	movs	r0, #100	@ 0x64
 8002fc0:	f7fd feba 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd feb7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002fca:	207a      	movs	r0, #122	@ 0x7a
 8002fcc:	f7fd feb4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd feb1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002fd6:	208b      	movs	r0, #139	@ 0x8b
 8002fd8:	f7fd feae 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd feab 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002fe2:	2099      	movs	r0, #153	@ 0x99
 8002fe4:	f7fd fea8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fea5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002fee:	20a8      	movs	r0, #168	@ 0xa8
 8002ff0:	f7fd fea2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fe9f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002ffa:	20b9      	movs	r0, #185	@ 0xb9
 8002ffc:	f7fd fe9c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fe99 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003006:	20c4      	movs	r0, #196	@ 0xc4
 8003008:	f7fd fe96 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fe93 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8003012:	20ca      	movs	r0, #202	@ 0xca
 8003014:	f7fd fe90 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fe8d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800301e:	20d2      	movs	r0, #210	@ 0xd2
 8003020:	f7fd fe8a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fe87 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 800302a:	20d9      	movs	r0, #217	@ 0xd9
 800302c:	f7fd fe84 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fe81 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8003036:	20e0      	movs	r0, #224	@ 0xe0
 8003038:	f7fd fe7e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fe7b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003042:	20f3      	movs	r0, #243	@ 0xf3
 8003044:	f7fd fe78 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fe75 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 800304e:	20e1      	movs	r0, #225	@ 0xe1
 8003050:	f7fd fe4e 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8003054:	2016      	movs	r0, #22
 8003056:	f7fd fe6f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd fe6c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003060:	201c      	movs	r0, #28
 8003062:	f7fd fe69 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fe66 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 800306c:	2022      	movs	r0, #34	@ 0x22
 800306e:	f7fd fe63 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fe60 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003078:	2036      	movs	r0, #54	@ 0x36
 800307a:	f7fd fe5d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fe5a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003084:	2045      	movs	r0, #69	@ 0x45
 8003086:	f7fd fe57 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fe54 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8003090:	2052      	movs	r0, #82	@ 0x52
 8003092:	f7fd fe51 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fe4e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800309c:	2064      	movs	r0, #100	@ 0x64
 800309e:	f7fd fe4b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fe48 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80030a8:	207a      	movs	r0, #122	@ 0x7a
 80030aa:	f7fd fe45 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fe42 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80030b4:	208b      	movs	r0, #139	@ 0x8b
 80030b6:	f7fd fe3f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fe3c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80030c0:	2099      	movs	r0, #153	@ 0x99
 80030c2:	f7fd fe39 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fe36 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80030cc:	20a8      	movs	r0, #168	@ 0xa8
 80030ce:	f7fd fe33 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fe30 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80030d8:	20b9      	movs	r0, #185	@ 0xb9
 80030da:	f7fd fe2d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fe2a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80030e4:	20c4      	movs	r0, #196	@ 0xc4
 80030e6:	f7fd fe27 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fe24 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80030f0:	20ca      	movs	r0, #202	@ 0xca
 80030f2:	f7fd fe21 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fe1e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80030fc:	20d2      	movs	r0, #210	@ 0xd2
 80030fe:	f7fd fe1b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fe18 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8003108:	20d8      	movs	r0, #216	@ 0xd8
 800310a:	f7fd fe15 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fe12 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8003114:	20e0      	movs	r0, #224	@ 0xe0
 8003116:	f7fd fe0f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fe0c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003120:	20f3      	movs	r0, #243	@ 0xf3
 8003122:	f7fd fe09 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fe06 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 800312c:	20e2      	movs	r0, #226	@ 0xe2
 800312e:	f7fd fddf 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003132:	2005      	movs	r0, #5
 8003134:	f7fd fe00 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003138:	2000      	movs	r0, #0
 800313a:	f7fd fdfd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 800313e:	200b      	movs	r0, #11
 8003140:	f7fd fdfa 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fdf7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 800314a:	201b      	movs	r0, #27
 800314c:	f7fd fdf4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fdf1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003156:	2034      	movs	r0, #52	@ 0x34
 8003158:	f7fd fdee 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fdeb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003162:	2044      	movs	r0, #68	@ 0x44
 8003164:	f7fd fde8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fde5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 800316e:	204f      	movs	r0, #79	@ 0x4f
 8003170:	f7fd fde2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fddf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 800317a:	2061      	movs	r0, #97	@ 0x61
 800317c:	f7fd fddc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fdd9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8003186:	2079      	movs	r0, #121	@ 0x79
 8003188:	f7fd fdd6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fdd3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003192:	2088      	movs	r0, #136	@ 0x88
 8003194:	f7fd fdd0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fd fdcd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800319e:	2097      	movs	r0, #151	@ 0x97
 80031a0:	f7fd fdca 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fdc7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80031aa:	20a6      	movs	r0, #166	@ 0xa6
 80031ac:	f7fd fdc4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fdc1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80031b6:	20b7      	movs	r0, #183	@ 0xb7
 80031b8:	f7fd fdbe 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fdbb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80031c2:	20c2      	movs	r0, #194	@ 0xc2
 80031c4:	f7fd fdb8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fdb5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80031ce:	20c7      	movs	r0, #199	@ 0xc7
 80031d0:	f7fd fdb2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fdaf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80031da:	20d1      	movs	r0, #209	@ 0xd1
 80031dc:	f7fd fdac 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fda9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 80031e6:	20d6      	movs	r0, #214	@ 0xd6
 80031e8:	f7fd fda6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fda3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80031f2:	20dd      	movs	r0, #221	@ 0xdd
 80031f4:	f7fd fda0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fd9d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80031fe:	20f3      	movs	r0, #243	@ 0xf3
 8003200:	f7fd fd9a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd fd97 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800320a:	20e3      	movs	r0, #227	@ 0xe3
 800320c:	f7fd fd70 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003210:	2005      	movs	r0, #5
 8003212:	f7fd fd91 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd fd8e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800321c:	200a      	movs	r0, #10
 800321e:	f7fd fd8b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fd88 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003228:	201c      	movs	r0, #28
 800322a:	f7fd fd85 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fd82 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003234:	2033      	movs	r0, #51	@ 0x33
 8003236:	f7fd fd7f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fd7c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003240:	2044      	movs	r0, #68	@ 0x44
 8003242:	f7fd fd79 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fd76 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800324c:	2050      	movs	r0, #80	@ 0x50
 800324e:	f7fd fd73 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fd70 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003258:	2062      	movs	r0, #98	@ 0x62
 800325a:	f7fd fd6d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fd6a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8003264:	2078      	movs	r0, #120	@ 0x78
 8003266:	f7fd fd67 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fd fd64 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003270:	2088      	movs	r0, #136	@ 0x88
 8003272:	f7fd fd61 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003276:	2000      	movs	r0, #0
 8003278:	f7fd fd5e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800327c:	2097      	movs	r0, #151	@ 0x97
 800327e:	f7fd fd5b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fd58 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003288:	20a6      	movs	r0, #166	@ 0xa6
 800328a:	f7fd fd55 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fd52 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003294:	20b7      	movs	r0, #183	@ 0xb7
 8003296:	f7fd fd4f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fd4c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80032a0:	20c2      	movs	r0, #194	@ 0xc2
 80032a2:	f7fd fd49 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fd46 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80032ac:	20c7      	movs	r0, #199	@ 0xc7
 80032ae:	f7fd fd43 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd fd40 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80032b8:	20d1      	movs	r0, #209	@ 0xd1
 80032ba:	f7fd fd3d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fd3a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80032c4:	20d5      	movs	r0, #213	@ 0xd5
 80032c6:	f7fd fd37 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fd fd34 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80032d0:	20dd      	movs	r0, #221	@ 0xdd
 80032d2:	f7fd fd31 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fd2e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80032dc:	20f3      	movs	r0, #243	@ 0xf3
 80032de:	f7fd fd2b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fd fd28 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80032e8:	20e4      	movs	r0, #228	@ 0xe4
 80032ea:	f7fd fd01 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7fd fd22 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fd fd1f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80032fa:	2001      	movs	r0, #1
 80032fc:	f7fd fd1c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fd19 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003306:	2002      	movs	r0, #2
 8003308:	f7fd fd16 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fd13 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003312:	202a      	movs	r0, #42	@ 0x2a
 8003314:	f7fd fd10 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd fd0d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800331e:	203c      	movs	r0, #60	@ 0x3c
 8003320:	f7fd fd0a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fd fd07 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800332a:	204b      	movs	r0, #75	@ 0x4b
 800332c:	f7fd fd04 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd fd01 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003336:	205d      	movs	r0, #93	@ 0x5d
 8003338:	f7fd fcfe 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd fcfb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003342:	2074      	movs	r0, #116	@ 0x74
 8003344:	f7fd fcf8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003348:	2000      	movs	r0, #0
 800334a:	f7fd fcf5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800334e:	2084      	movs	r0, #132	@ 0x84
 8003350:	f7fd fcf2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fcef 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 800335a:	2093      	movs	r0, #147	@ 0x93
 800335c:	f7fd fcec 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fce9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003366:	20a2      	movs	r0, #162	@ 0xa2
 8003368:	f7fd fce6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fce3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003372:	20b3      	movs	r0, #179	@ 0xb3
 8003374:	f7fd fce0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fcdd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800337e:	20be      	movs	r0, #190	@ 0xbe
 8003380:	f7fd fcda 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fcd7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800338a:	20c4      	movs	r0, #196	@ 0xc4
 800338c:	f7fd fcd4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fcd1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003396:	20cd      	movs	r0, #205	@ 0xcd
 8003398:	f7fd fcce 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fccb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80033a2:	20d3      	movs	r0, #211	@ 0xd3
 80033a4:	f7fd fcc8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fd fcc5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80033ae:	20dd      	movs	r0, #221	@ 0xdd
 80033b0:	f7fd fcc2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fd fcbf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80033ba:	20f3      	movs	r0, #243	@ 0xf3
 80033bc:	f7fd fcbc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fd fcb9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80033c6:	20e5      	movs	r0, #229	@ 0xe5
 80033c8:	f7fd fc92 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fd fcb3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fd fcb0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fcad 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fd fcaa 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80033e4:	2002      	movs	r0, #2
 80033e6:	f7fd fca7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fd fca4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80033f0:	2029      	movs	r0, #41	@ 0x29
 80033f2:	f7fd fca1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fd fc9e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80033fc:	203c      	movs	r0, #60	@ 0x3c
 80033fe:	f7fd fc9b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fc98 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003408:	204b      	movs	r0, #75	@ 0x4b
 800340a:	f7fd fc95 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fd fc92 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003414:	205d      	movs	r0, #93	@ 0x5d
 8003416:	f7fd fc8f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fd fc8c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003420:	2074      	movs	r0, #116	@ 0x74
 8003422:	f7fd fc89 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fc86 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800342c:	2084      	movs	r0, #132	@ 0x84
 800342e:	f7fd fc83 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fc80 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003438:	2093      	movs	r0, #147	@ 0x93
 800343a:	f7fd fc7d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fc7a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003444:	20a2      	movs	r0, #162	@ 0xa2
 8003446:	f7fd fc77 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fc74 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003450:	20b3      	movs	r0, #179	@ 0xb3
 8003452:	f7fd fc71 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fc6e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800345c:	20be      	movs	r0, #190	@ 0xbe
 800345e:	f7fd fc6b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fc68 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003468:	20c4      	movs	r0, #196	@ 0xc4
 800346a:	f7fd fc65 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fc62 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003474:	20cd      	movs	r0, #205	@ 0xcd
 8003476:	f7fd fc5f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347a:	2000      	movs	r0, #0
 800347c:	f7fd fc5c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003480:	20d3      	movs	r0, #211	@ 0xd3
 8003482:	f7fd fc59 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003486:	2000      	movs	r0, #0
 8003488:	f7fd fc56 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800348c:	20dc      	movs	r0, #220	@ 0xdc
 800348e:	f7fd fc53 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003492:	2000      	movs	r0, #0
 8003494:	f7fd fc50 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003498:	20f3      	movs	r0, #243	@ 0xf3
 800349a:	f7fd fc4d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd fc4a 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80034a4:	20e6      	movs	r0, #230	@ 0xe6
 80034a6:	f7fd fc23 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80034aa:	2011      	movs	r0, #17
 80034ac:	f7fd fc44 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fd fc41 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80034b6:	2034      	movs	r0, #52	@ 0x34
 80034b8:	f7fd fc3e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034bc:	2000      	movs	r0, #0
 80034be:	f7fd fc3b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80034c2:	2056      	movs	r0, #86	@ 0x56
 80034c4:	f7fd fc38 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fd fc35 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80034ce:	2076      	movs	r0, #118	@ 0x76
 80034d0:	f7fd fc32 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7fd fc2f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80034da:	2077      	movs	r0, #119	@ 0x77
 80034dc:	f7fd fc2c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fd fc29 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80034e6:	2066      	movs	r0, #102	@ 0x66
 80034e8:	f7fd fc26 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fd fc23 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80034f2:	2088      	movs	r0, #136	@ 0x88
 80034f4:	f7fd fc20 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fd fc1d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80034fe:	2099      	movs	r0, #153	@ 0x99
 8003500:	f7fd fc1a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd fc17 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800350a:	20bb      	movs	r0, #187	@ 0xbb
 800350c:	f7fd fc14 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fc11 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003516:	2099      	movs	r0, #153	@ 0x99
 8003518:	f7fd fc0e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351c:	2000      	movs	r0, #0
 800351e:	f7fd fc0b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003522:	2066      	movs	r0, #102	@ 0x66
 8003524:	f7fd fc08 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003528:	2000      	movs	r0, #0
 800352a:	f7fd fc05 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800352e:	2055      	movs	r0, #85	@ 0x55
 8003530:	f7fd fc02 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003534:	2000      	movs	r0, #0
 8003536:	f7fd fbff 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800353a:	2055      	movs	r0, #85	@ 0x55
 800353c:	f7fd fbfc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fbf9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003546:	2045      	movs	r0, #69	@ 0x45
 8003548:	f7fd fbf6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800354c:	2000      	movs	r0, #0
 800354e:	f7fd fbf3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003552:	2043      	movs	r0, #67	@ 0x43
 8003554:	f7fd fbf0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003558:	2000      	movs	r0, #0
 800355a:	f7fd fbed 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800355e:	2044      	movs	r0, #68	@ 0x44
 8003560:	f7fd fbea 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd fbe7 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800356a:	20e7      	movs	r0, #231	@ 0xe7
 800356c:	f7fd fbc0 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003570:	2032      	movs	r0, #50	@ 0x32
 8003572:	f7fd fbe1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7fd fbde 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800357c:	2055      	movs	r0, #85	@ 0x55
 800357e:	f7fd fbdb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fd fbd8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003588:	2076      	movs	r0, #118	@ 0x76
 800358a:	f7fd fbd5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd fbd2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003594:	2066      	movs	r0, #102	@ 0x66
 8003596:	f7fd fbcf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fd fbcc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80035a0:	2067      	movs	r0, #103	@ 0x67
 80035a2:	f7fd fbc9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fd fbc6 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80035ac:	2067      	movs	r0, #103	@ 0x67
 80035ae:	f7fd fbc3 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fd fbc0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80035b8:	2087      	movs	r0, #135	@ 0x87
 80035ba:	f7fd fbbd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd fbba 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80035c4:	2099      	movs	r0, #153	@ 0x99
 80035c6:	f7fd fbb7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7fd fbb4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80035d0:	20bb      	movs	r0, #187	@ 0xbb
 80035d2:	f7fd fbb1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fd fbae 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80035dc:	2099      	movs	r0, #153	@ 0x99
 80035de:	f7fd fbab 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd fba8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80035e8:	2077      	movs	r0, #119	@ 0x77
 80035ea:	f7fd fba5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd fba2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80035f4:	2044      	movs	r0, #68	@ 0x44
 80035f6:	f7fd fb9f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd fb9c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003600:	2056      	movs	r0, #86	@ 0x56
 8003602:	f7fd fb99 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7fd fb96 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800360c:	2023      	movs	r0, #35	@ 0x23
 800360e:	f7fd fb93 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003612:	2000      	movs	r0, #0
 8003614:	f7fd fb90 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003618:	2033      	movs	r0, #51	@ 0x33
 800361a:	f7fd fb8d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800361e:	2000      	movs	r0, #0
 8003620:	f7fd fb8a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003624:	2045      	movs	r0, #69	@ 0x45
 8003626:	f7fd fb87 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd fb84 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003630:	20e8      	movs	r0, #232	@ 0xe8
 8003632:	f7fd fb5d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003636:	2000      	movs	r0, #0
 8003638:	f7fd fb7e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800363c:	2000      	movs	r0, #0
 800363e:	f7fd fb7b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003642:	2099      	movs	r0, #153	@ 0x99
 8003644:	f7fd fb78 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003648:	2000      	movs	r0, #0
 800364a:	f7fd fb75 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800364e:	2087      	movs	r0, #135	@ 0x87
 8003650:	f7fd fb72 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003654:	2000      	movs	r0, #0
 8003656:	f7fd fb6f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800365a:	2088      	movs	r0, #136	@ 0x88
 800365c:	f7fd fb6c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003660:	2000      	movs	r0, #0
 8003662:	f7fd fb69 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003666:	2077      	movs	r0, #119	@ 0x77
 8003668:	f7fd fb66 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800366c:	2000      	movs	r0, #0
 800366e:	f7fd fb63 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003672:	2066      	movs	r0, #102	@ 0x66
 8003674:	f7fd fb60 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003678:	2000      	movs	r0, #0
 800367a:	f7fd fb5d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800367e:	2088      	movs	r0, #136	@ 0x88
 8003680:	f7fd fb5a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003684:	2000      	movs	r0, #0
 8003686:	f7fd fb57 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 800368a:	20aa      	movs	r0, #170	@ 0xaa
 800368c:	f7fd fb54 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003690:	2000      	movs	r0, #0
 8003692:	f7fd fb51 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003696:	20bb      	movs	r0, #187	@ 0xbb
 8003698:	f7fd fb4e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800369c:	2000      	movs	r0, #0
 800369e:	f7fd fb4b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80036a2:	2099      	movs	r0, #153	@ 0x99
 80036a4:	f7fd fb48 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7fd fb45 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80036ae:	2066      	movs	r0, #102	@ 0x66
 80036b0:	f7fd fb42 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b4:	2000      	movs	r0, #0
 80036b6:	f7fd fb3f 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80036ba:	2055      	movs	r0, #85	@ 0x55
 80036bc:	f7fd fb3c 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fd fb39 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80036c6:	2055      	movs	r0, #85	@ 0x55
 80036c8:	f7fd fb36 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036cc:	2000      	movs	r0, #0
 80036ce:	f7fd fb33 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80036d2:	2044      	movs	r0, #68	@ 0x44
 80036d4:	f7fd fb30 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036d8:	2000      	movs	r0, #0
 80036da:	f7fd fb2d 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80036de:	2044      	movs	r0, #68	@ 0x44
 80036e0:	f7fd fb2a 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fd fb27 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80036ea:	2055      	movs	r0, #85	@ 0x55
 80036ec:	f7fd fb24 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036f0:	2000      	movs	r0, #0
 80036f2:	f7fd fb21 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80036f6:	20e9      	movs	r0, #233	@ 0xe9
 80036f8:	f7fd fafa 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80036fc:	20aa      	movs	r0, #170	@ 0xaa
 80036fe:	f7fd fb1b 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003702:	2000      	movs	r0, #0
 8003704:	f7fd fb18 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003708:	2000      	movs	r0, #0
 800370a:	f7fd fb15 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800370e:	2000      	movs	r0, #0
 8003710:	f7fd fb12 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8003714:	2000      	movs	r0, #0
 8003716:	f7fd faeb 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800371a:	20aa      	movs	r0, #170	@ 0xaa
 800371c:	f7fd fb0c 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003720:	20cf      	movs	r0, #207	@ 0xcf
 8003722:	f7fd fae5 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003726:	2000      	movs	r0, #0
 8003728:	f7fd fb06 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fd fb03 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003732:	2000      	movs	r0, #0
 8003734:	f7fd fb00 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fd fafd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800373e:	2000      	movs	r0, #0
 8003740:	f7fd fafa 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd faf7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800374a:	2000      	movs	r0, #0
 800374c:	f7fd faf4 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003750:	2000      	movs	r0, #0
 8003752:	f7fd faf1 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003756:	2000      	movs	r0, #0
 8003758:	f7fd faee 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800375c:	2000      	movs	r0, #0
 800375e:	f7fd faeb 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003762:	2000      	movs	r0, #0
 8003764:	f7fd fae8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003768:	2000      	movs	r0, #0
 800376a:	f7fd fae5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800376e:	2000      	movs	r0, #0
 8003770:	f7fd fae2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003774:	2000      	movs	r0, #0
 8003776:	f7fd fadf 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800377a:	2000      	movs	r0, #0
 800377c:	f7fd fadc 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003780:	2000      	movs	r0, #0
 8003782:	f7fd fad9 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003786:	2000      	movs	r0, #0
 8003788:	f7fd fad6 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 800378c:	20f0      	movs	r0, #240	@ 0xf0
 800378e:	f7fd faaf 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003792:	2000      	movs	r0, #0
 8003794:	f7fd fad0 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003798:	2050      	movs	r0, #80	@ 0x50
 800379a:	f7fd facd 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800379e:	2000      	movs	r0, #0
 80037a0:	f7fd faca 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7fd fac7 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7fd fac4 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80037b0:	20f3      	movs	r0, #243	@ 0xf3
 80037b2:	f7fd fa9d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7fd fabe 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80037bc:	20f9      	movs	r0, #249	@ 0xf9
 80037be:	f7fd fa97 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80037c2:	2006      	movs	r0, #6
 80037c4:	f7fd fab8 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80037c8:	2010      	movs	r0, #16
 80037ca:	f7fd fab5 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80037ce:	2029      	movs	r0, #41	@ 0x29
 80037d0:	f7fd fab2 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7fd faaf 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80037da:	203a      	movs	r0, #58	@ 0x3a
 80037dc:	f7fd fa88 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80037e0:	2055      	movs	r0, #85	@ 0x55
 80037e2:	f7fd faa9 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80037e6:	2011      	movs	r0, #17
 80037e8:	f7fd fa82 	bl	8000cf0 <LCD_WR_REG>
		HAL_Delay(100);
 80037ec:	2064      	movs	r0, #100	@ 0x64
 80037ee:	f004 f835 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0x29);
 80037f2:	2029      	movs	r0, #41	@ 0x29
 80037f4:	f7fd fa7c 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80037f8:	2035      	movs	r0, #53	@ 0x35
 80037fa:	f7fd fa79 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80037fe:	2000      	movs	r0, #0
 8003800:	f7fd fa9a 	bl	8000d38 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8003804:	2051      	movs	r0, #81	@ 0x51
 8003806:	f7fd fa73 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800380a:	20ff      	movs	r0, #255	@ 0xff
 800380c:	f7fd fa94 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003810:	2053      	movs	r0, #83	@ 0x53
 8003812:	f7fd fa6d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8003816:	202c      	movs	r0, #44	@ 0x2c
 8003818:	f7fd fa8e 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800381c:	2055      	movs	r0, #85	@ 0x55
 800381e:	f7fd fa67 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8003822:	2082      	movs	r0, #130	@ 0x82
 8003824:	f7fd fa88 	bl	8000d38 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003828:	202c      	movs	r0, #44	@ 0x2c
 800382a:	f7fd fa61 	bl	8000cf0 <LCD_WR_REG>
 800382e:	f002 bca1 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8003832:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <LCD_Init+0x1504>)
 8003834:	889b      	ldrh	r3, [r3, #4]
 8003836:	f245 5210 	movw	r2, #21776	@ 0x5510
 800383a:	4293      	cmp	r3, r2
 800383c:	f040 8782 	bne.w	8004744 <LCD_Init+0x2404>
 8003840:	e002      	b.n	8003848 <LCD_Init+0x1508>
 8003842:	bf00      	nop
 8003844:	20000080 	.word	0x20000080
		LCD_WriteReg(0xF000, 0x55);
 8003848:	2155      	movs	r1, #85	@ 0x55
 800384a:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 800384e:	f7fd fadb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003852:	21aa      	movs	r1, #170	@ 0xaa
 8003854:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8003858:	f7fd fad6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800385c:	2152      	movs	r1, #82	@ 0x52
 800385e:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8003862:	f7fd fad1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003866:	2108      	movs	r1, #8
 8003868:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800386c:	f7fd facc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003870:	2101      	movs	r1, #1
 8003872:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8003876:	f7fd fac7 	bl	8000e08 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800387a:	210d      	movs	r1, #13
 800387c:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8003880:	f7fd fac2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003884:	210d      	movs	r1, #13
 8003886:	f24b 0001 	movw	r0, #45057	@ 0xb001
 800388a:	f7fd fabd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800388e:	210d      	movs	r1, #13
 8003890:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8003894:	f7fd fab8 	bl	8000e08 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003898:	2134      	movs	r1, #52	@ 0x34
 800389a:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 800389e:	f7fd fab3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80038a2:	2134      	movs	r1, #52	@ 0x34
 80038a4:	f24b 6001 	movw	r0, #46593	@ 0xb601
 80038a8:	f7fd faae 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80038ac:	2134      	movs	r1, #52	@ 0x34
 80038ae:	f24b 6002 	movw	r0, #46594	@ 0xb602
 80038b2:	f7fd faa9 	bl	8000e08 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80038b6:	210d      	movs	r1, #13
 80038b8:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80038bc:	f7fd faa4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80038c0:	210d      	movs	r1, #13
 80038c2:	f24b 1001 	movw	r0, #45313	@ 0xb101
 80038c6:	f7fd fa9f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80038ca:	210d      	movs	r1, #13
 80038cc:	f24b 1002 	movw	r0, #45314	@ 0xb102
 80038d0:	f7fd fa9a 	bl	8000e08 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80038d4:	2134      	movs	r1, #52	@ 0x34
 80038d6:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 80038da:	f7fd fa95 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80038de:	2134      	movs	r1, #52	@ 0x34
 80038e0:	f24b 7001 	movw	r0, #46849	@ 0xb701
 80038e4:	f7fd fa90 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80038e8:	2134      	movs	r1, #52	@ 0x34
 80038ea:	f24b 7002 	movw	r0, #46850	@ 0xb702
 80038ee:	f7fd fa8b 	bl	8000e08 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80038f2:	2100      	movs	r1, #0
 80038f4:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 80038f8:	f7fd fa86 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80038fc:	2100      	movs	r1, #0
 80038fe:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8003902:	f7fd fa81 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8003906:	2100      	movs	r1, #0
 8003908:	f24b 2002 	movw	r0, #45570	@ 0xb202
 800390c:	f7fd fa7c 	bl	8000e08 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003910:	2124      	movs	r1, #36	@ 0x24
 8003912:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8003916:	f7fd fa77 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800391a:	2124      	movs	r1, #36	@ 0x24
 800391c:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8003920:	f7fd fa72 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8003924:	2124      	movs	r1, #36	@ 0x24
 8003926:	f64b 0002 	movw	r0, #47106	@ 0xb802
 800392a:	f7fd fa6d 	bl	8000e08 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800392e:	2101      	movs	r1, #1
 8003930:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8003934:	f7fd fa68 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003938:	210f      	movs	r1, #15
 800393a:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 800393e:	f7fd fa63 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8003942:	210f      	movs	r1, #15
 8003944:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8003948:	f7fd fa5e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800394c:	210f      	movs	r1, #15
 800394e:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8003952:	f7fd fa59 	bl	8000e08 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003956:	2134      	movs	r1, #52	@ 0x34
 8003958:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 800395c:	f7fd fa54 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003960:	2134      	movs	r1, #52	@ 0x34
 8003962:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8003966:	f7fd fa4f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800396a:	2134      	movs	r1, #52	@ 0x34
 800396c:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8003970:	f7fd fa4a 	bl	8000e08 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003974:	2108      	movs	r1, #8
 8003976:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 800397a:	f7fd fa45 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800397e:	2108      	movs	r1, #8
 8003980:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8003984:	f7fd fa40 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003988:	2108      	movs	r1, #8
 800398a:	f24b 5002 	movw	r0, #46338	@ 0xb502
 800398e:	f7fd fa3b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003992:	2103      	movs	r1, #3
 8003994:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8003998:	f7fd fa36 	bl	8000e08 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800399c:	2124      	movs	r1, #36	@ 0x24
 800399e:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 80039a2:	f7fd fa31 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80039a6:	2124      	movs	r1, #36	@ 0x24
 80039a8:	f64b 2001 	movw	r0, #47617	@ 0xba01
 80039ac:	f7fd fa2c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80039b0:	2124      	movs	r1, #36	@ 0x24
 80039b2:	f64b 2002 	movw	r0, #47618	@ 0xba02
 80039b6:	f7fd fa27 	bl	8000e08 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80039ba:	2100      	movs	r1, #0
 80039bc:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80039c0:	f7fd fa22 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80039c4:	2178      	movs	r1, #120	@ 0x78
 80039c6:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80039ca:	f7fd fa1d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80039ce:	2100      	movs	r1, #0
 80039d0:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80039d4:	f7fd fa18 	bl	8000e08 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80039d8:	2100      	movs	r1, #0
 80039da:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 80039de:	f7fd fa13 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80039e2:	2178      	movs	r1, #120	@ 0x78
 80039e4:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 80039e8:	f7fd fa0e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80039ec:	2100      	movs	r1, #0
 80039ee:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 80039f2:	f7fd fa09 	bl	8000e08 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80039f6:	2100      	movs	r1, #0
 80039f8:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 80039fc:	f7fd fa04 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003a00:	2164      	movs	r1, #100	@ 0x64
 8003a02:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 8003a06:	f7fd f9ff 	bl	8000e08 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8003a10:	f7fd f9fa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8003a14:	2133      	movs	r1, #51	@ 0x33
 8003a16:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8003a1a:	f7fd f9f5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8003a24:	f7fd f9f0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003a28:	2134      	movs	r1, #52	@ 0x34
 8003a2a:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8003a2e:	f7fd f9eb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8003a32:	2100      	movs	r1, #0
 8003a34:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8003a38:	f7fd f9e6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003a3c:	213a      	movs	r1, #58	@ 0x3a
 8003a3e:	f24d 1005 	movw	r0, #53509	@ 0xd105
 8003a42:	f7fd f9e1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8003a46:	2100      	movs	r1, #0
 8003a48:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8003a4c:	f7fd f9dc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003a50:	214a      	movs	r1, #74	@ 0x4a
 8003a52:	f24d 1007 	movw	r0, #53511	@ 0xd107
 8003a56:	f7fd f9d7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8003a60:	f7fd f9d2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003a64:	215c      	movs	r1, #92	@ 0x5c
 8003a66:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8003a6a:	f7fd f9cd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 8003a74:	f7fd f9c8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003a78:	2181      	movs	r1, #129	@ 0x81
 8003a7a:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 8003a7e:	f7fd f9c3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003a82:	2100      	movs	r1, #0
 8003a84:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 8003a88:	f7fd f9be 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003a8c:	21a6      	movs	r1, #166	@ 0xa6
 8003a8e:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 8003a92:	f7fd f9b9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8003a9c:	f7fd f9b4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003aa0:	21e5      	movs	r1, #229	@ 0xe5
 8003aa2:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 8003aa6:	f7fd f9af 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003aaa:	2101      	movs	r1, #1
 8003aac:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8003ab0:	f7fd f9aa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003ab4:	2113      	movs	r1, #19
 8003ab6:	f24d 1011 	movw	r0, #53521	@ 0xd111
 8003aba:	f7fd f9a5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003abe:	2101      	movs	r1, #1
 8003ac0:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8003ac4:	f7fd f9a0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003ac8:	2154      	movs	r1, #84	@ 0x54
 8003aca:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8003ace:	f7fd f99b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8003ad8:	f7fd f996 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003adc:	2182      	movs	r1, #130	@ 0x82
 8003ade:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8003ae2:	f7fd f991 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8003aec:	f7fd f98c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003af0:	21ca      	movs	r1, #202	@ 0xca
 8003af2:	f24d 1017 	movw	r0, #53527	@ 0xd117
 8003af6:	f7fd f987 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003afa:	2102      	movs	r1, #2
 8003afc:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8003b00:	f7fd f982 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8003b04:	2100      	movs	r1, #0
 8003b06:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8003b0a:	f7fd f97d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003b0e:	2102      	movs	r1, #2
 8003b10:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8003b14:	f7fd f978 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003b18:	2101      	movs	r1, #1
 8003b1a:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8003b1e:	f7fd f973 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8003b22:	2102      	movs	r1, #2
 8003b24:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8003b28:	f7fd f96e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003b2c:	2134      	movs	r1, #52	@ 0x34
 8003b2e:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8003b32:	f7fd f969 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8003b36:	2102      	movs	r1, #2
 8003b38:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8003b3c:	f7fd f964 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003b40:	2167      	movs	r1, #103	@ 0x67
 8003b42:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 8003b46:	f7fd f95f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8003b50:	f7fd f95a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003b54:	2184      	movs	r1, #132	@ 0x84
 8003b56:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8003b5a:	f7fd f955 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	f24d 1022 	movw	r0, #53538	@ 0xd122
 8003b64:	f7fd f950 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003b68:	21a4      	movs	r1, #164	@ 0xa4
 8003b6a:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8003b6e:	f7fd f94b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003b72:	2102      	movs	r1, #2
 8003b74:	f24d 1024 	movw	r0, #53540	@ 0xd124
 8003b78:	f7fd f946 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003b7c:	21b7      	movs	r1, #183	@ 0xb7
 8003b7e:	f24d 1025 	movw	r0, #53541	@ 0xd125
 8003b82:	f7fd f941 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 1026 	movw	r0, #53542	@ 0xd126
 8003b8c:	f7fd f93c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003b90:	21cf      	movs	r1, #207	@ 0xcf
 8003b92:	f24d 1027 	movw	r0, #53543	@ 0xd127
 8003b96:	f7fd f937 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8003ba0:	f7fd f932 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003ba4:	21de      	movs	r1, #222	@ 0xde
 8003ba6:	f24d 1029 	movw	r0, #53545	@ 0xd129
 8003baa:	f7fd f92d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8003bb4:	f7fd f928 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003bb8:	21f2      	movs	r1, #242	@ 0xf2
 8003bba:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8003bbe:	f7fd f923 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 8003bc8:	f7fd f91e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003bcc:	21fe      	movs	r1, #254	@ 0xfe
 8003bce:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8003bd2:	f7fd f919 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003bd6:	2103      	movs	r1, #3
 8003bd8:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8003bdc:	f7fd f914 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003be0:	2110      	movs	r1, #16
 8003be2:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 8003be6:	f7fd f90f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003bea:	2103      	movs	r1, #3
 8003bec:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8003bf0:	f7fd f90a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003bf4:	2133      	movs	r1, #51	@ 0x33
 8003bf6:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8003bfa:	f7fd f905 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003bfe:	2103      	movs	r1, #3
 8003c00:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8003c04:	f7fd f900 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003c08:	216d      	movs	r1, #109	@ 0x6d
 8003c0a:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8003c0e:	f7fd f8fb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003c12:	2100      	movs	r1, #0
 8003c14:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8003c18:	f7fd f8f6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003c1c:	2133      	movs	r1, #51	@ 0x33
 8003c1e:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8003c22:	f7fd f8f1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003c26:	2100      	movs	r1, #0
 8003c28:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8003c2c:	f7fd f8ec 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003c30:	2134      	movs	r1, #52	@ 0x34
 8003c32:	f24d 2003 	movw	r0, #53763	@ 0xd203
 8003c36:	f7fd f8e7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8003c40:	f7fd f8e2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003c44:	213a      	movs	r1, #58	@ 0x3a
 8003c46:	f24d 2005 	movw	r0, #53765	@ 0xd205
 8003c4a:	f7fd f8dd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f24d 2006 	movw	r0, #53766	@ 0xd206
 8003c54:	f7fd f8d8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003c58:	214a      	movs	r1, #74	@ 0x4a
 8003c5a:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8003c5e:	f7fd f8d3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003c62:	2100      	movs	r1, #0
 8003c64:	f24d 2008 	movw	r0, #53768	@ 0xd208
 8003c68:	f7fd f8ce 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003c6c:	215c      	movs	r1, #92	@ 0x5c
 8003c6e:	f24d 2009 	movw	r0, #53769	@ 0xd209
 8003c72:	f7fd f8c9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003c76:	2100      	movs	r1, #0
 8003c78:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 8003c7c:	f7fd f8c4 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003c80:	2181      	movs	r1, #129	@ 0x81
 8003c82:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 8003c86:	f7fd f8bf 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 8003c90:	f7fd f8ba 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003c94:	21a6      	movs	r1, #166	@ 0xa6
 8003c96:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 8003c9a:	f7fd f8b5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8003ca4:	f7fd f8b0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003ca8:	21e5      	movs	r1, #229	@ 0xe5
 8003caa:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8003cae:	f7fd f8ab 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	f24d 2010 	movw	r0, #53776	@ 0xd210
 8003cb8:	f7fd f8a6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003cbc:	2113      	movs	r1, #19
 8003cbe:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8003cc2:	f7fd f8a1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8003ccc:	f7fd f89c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003cd0:	2154      	movs	r1, #84	@ 0x54
 8003cd2:	f24d 2013 	movw	r0, #53779	@ 0xd213
 8003cd6:	f7fd f897 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8003ce0:	f7fd f892 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003ce4:	2182      	movs	r1, #130	@ 0x82
 8003ce6:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8003cea:	f7fd f88d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8003cf4:	f7fd f888 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003cf8:	21ca      	movs	r1, #202	@ 0xca
 8003cfa:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8003cfe:	f7fd f883 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003d02:	2102      	movs	r1, #2
 8003d04:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8003d08:	f7fd f87e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8003d12:	f7fd f879 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003d16:	2102      	movs	r1, #2
 8003d18:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8003d1c:	f7fd f874 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003d20:	2101      	movs	r1, #1
 8003d22:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 8003d26:	f7fd f86f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8003d30:	f7fd f86a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003d34:	2134      	movs	r1, #52	@ 0x34
 8003d36:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8003d3a:	f7fd f865 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003d3e:	2102      	movs	r1, #2
 8003d40:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 8003d44:	f7fd f860 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003d48:	2167      	movs	r1, #103	@ 0x67
 8003d4a:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8003d4e:	f7fd f85b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003d52:	2102      	movs	r1, #2
 8003d54:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8003d58:	f7fd f856 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003d5c:	2184      	movs	r1, #132	@ 0x84
 8003d5e:	f24d 2021 	movw	r0, #53793	@ 0xd221
 8003d62:	f7fd f851 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003d66:	2102      	movs	r1, #2
 8003d68:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8003d6c:	f7fd f84c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003d70:	21a4      	movs	r1, #164	@ 0xa4
 8003d72:	f24d 2023 	movw	r0, #53795	@ 0xd223
 8003d76:	f7fd f847 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	f24d 2024 	movw	r0, #53796	@ 0xd224
 8003d80:	f7fd f842 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003d84:	21b7      	movs	r1, #183	@ 0xb7
 8003d86:	f24d 2025 	movw	r0, #53797	@ 0xd225
 8003d8a:	f7fd f83d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003d8e:	2102      	movs	r1, #2
 8003d90:	f24d 2026 	movw	r0, #53798	@ 0xd226
 8003d94:	f7fd f838 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003d98:	21cf      	movs	r1, #207	@ 0xcf
 8003d9a:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8003d9e:	f7fd f833 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003da2:	2102      	movs	r1, #2
 8003da4:	f24d 2028 	movw	r0, #53800	@ 0xd228
 8003da8:	f7fd f82e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003dac:	21de      	movs	r1, #222	@ 0xde
 8003dae:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8003db2:	f7fd f829 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003db6:	2102      	movs	r1, #2
 8003db8:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8003dbc:	f7fd f824 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003dc0:	21f2      	movs	r1, #242	@ 0xf2
 8003dc2:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 8003dc6:	f7fd f81f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003dca:	2102      	movs	r1, #2
 8003dcc:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8003dd0:	f7fd f81a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003dd4:	21fe      	movs	r1, #254	@ 0xfe
 8003dd6:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8003dda:	f7fd f815 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003dde:	2103      	movs	r1, #3
 8003de0:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8003de4:	f7fd f810 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003de8:	2110      	movs	r1, #16
 8003dea:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8003dee:	f7fd f80b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003df2:	2103      	movs	r1, #3
 8003df4:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8003df8:	f7fd f806 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003dfc:	2133      	movs	r1, #51	@ 0x33
 8003dfe:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8003e02:	f7fd f801 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003e06:	2103      	movs	r1, #3
 8003e08:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8003e0c:	f7fc fffc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003e10:	216d      	movs	r1, #109	@ 0x6d
 8003e12:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8003e16:	f7fc fff7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8003e20:	f7fc fff2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003e24:	2133      	movs	r1, #51	@ 0x33
 8003e26:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8003e2a:	f7fc ffed 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003e2e:	2100      	movs	r1, #0
 8003e30:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8003e34:	f7fc ffe8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003e38:	2134      	movs	r1, #52	@ 0x34
 8003e3a:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8003e3e:	f7fc ffe3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003e42:	2100      	movs	r1, #0
 8003e44:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8003e48:	f7fc ffde 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003e4c:	213a      	movs	r1, #58	@ 0x3a
 8003e4e:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8003e52:	f7fc ffd9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003e56:	2100      	movs	r1, #0
 8003e58:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8003e5c:	f7fc ffd4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003e60:	214a      	movs	r1, #74	@ 0x4a
 8003e62:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8003e66:	f7fc ffcf 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8003e70:	f7fc ffca 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003e74:	215c      	movs	r1, #92	@ 0x5c
 8003e76:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8003e7a:	f7fc ffc5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8003e84:	f7fc ffc0 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003e88:	2181      	movs	r1, #129	@ 0x81
 8003e8a:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8003e8e:	f7fc ffbb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003e92:	2100      	movs	r1, #0
 8003e94:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8003e98:	f7fc ffb6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003e9c:	21a6      	movs	r1, #166	@ 0xa6
 8003e9e:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8003ea2:	f7fc ffb1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8003eac:	f7fc ffac 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003eb0:	21e5      	movs	r1, #229	@ 0xe5
 8003eb2:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8003eb6:	f7fc ffa7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003eba:	2101      	movs	r1, #1
 8003ebc:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8003ec0:	f7fc ffa2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003ec4:	2113      	movs	r1, #19
 8003ec6:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8003eca:	f7fc ff9d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003ece:	2101      	movs	r1, #1
 8003ed0:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8003ed4:	f7fc ff98 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003ed8:	2154      	movs	r1, #84	@ 0x54
 8003eda:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8003ede:	f7fc ff93 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8003ee8:	f7fc ff8e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003eec:	2182      	movs	r1, #130	@ 0x82
 8003eee:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8003ef2:	f7fc ff89 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8003efc:	f7fc ff84 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003f00:	21ca      	movs	r1, #202	@ 0xca
 8003f02:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8003f06:	f7fc ff7f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8003f10:	f7fc ff7a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003f14:	2100      	movs	r1, #0
 8003f16:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8003f1a:	f7fc ff75 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003f1e:	2102      	movs	r1, #2
 8003f20:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8003f24:	f7fc ff70 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003f28:	2101      	movs	r1, #1
 8003f2a:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8003f2e:	f7fc ff6b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003f32:	2102      	movs	r1, #2
 8003f34:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8003f38:	f7fc ff66 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003f3c:	2134      	movs	r1, #52	@ 0x34
 8003f3e:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8003f42:	f7fc ff61 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003f46:	2102      	movs	r1, #2
 8003f48:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8003f4c:	f7fc ff5c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003f50:	2167      	movs	r1, #103	@ 0x67
 8003f52:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8003f56:	f7fc ff57 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8003f60:	f7fc ff52 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003f64:	2184      	movs	r1, #132	@ 0x84
 8003f66:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8003f6a:	f7fc ff4d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003f6e:	2102      	movs	r1, #2
 8003f70:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8003f74:	f7fc ff48 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003f78:	21a4      	movs	r1, #164	@ 0xa4
 8003f7a:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8003f7e:	f7fc ff43 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003f82:	2102      	movs	r1, #2
 8003f84:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8003f88:	f7fc ff3e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003f8c:	21b7      	movs	r1, #183	@ 0xb7
 8003f8e:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8003f92:	f7fc ff39 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003f96:	2102      	movs	r1, #2
 8003f98:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8003f9c:	f7fc ff34 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003fa0:	21cf      	movs	r1, #207	@ 0xcf
 8003fa2:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8003fa6:	f7fc ff2f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003faa:	2102      	movs	r1, #2
 8003fac:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8003fb0:	f7fc ff2a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003fb4:	21de      	movs	r1, #222	@ 0xde
 8003fb6:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8003fba:	f7fc ff25 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8003fc4:	f7fc ff20 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003fc8:	21f2      	movs	r1, #242	@ 0xf2
 8003fca:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8003fce:	f7fc ff1b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8003fd8:	f7fc ff16 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003fdc:	21fe      	movs	r1, #254	@ 0xfe
 8003fde:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8003fe2:	f7fc ff11 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8003fec:	f7fc ff0c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003ff0:	2110      	movs	r1, #16
 8003ff2:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8003ff6:	f7fc ff07 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003ffa:	2103      	movs	r1, #3
 8003ffc:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8004000:	f7fc ff02 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8004004:	2133      	movs	r1, #51	@ 0x33
 8004006:	f24d 3031 	movw	r0, #54065	@ 0xd331
 800400a:	f7fc fefd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 800400e:	2103      	movs	r1, #3
 8004010:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8004014:	f7fc fef8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8004018:	216d      	movs	r1, #109	@ 0x6d
 800401a:	f24d 3033 	movw	r0, #54067	@ 0xd333
 800401e:	f7fc fef3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8004022:	2100      	movs	r1, #0
 8004024:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8004028:	f7fc feee 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 800402c:	2133      	movs	r1, #51	@ 0x33
 800402e:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8004032:	f7fc fee9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8004036:	2100      	movs	r1, #0
 8004038:	f24d 4002 	movw	r0, #54274	@ 0xd402
 800403c:	f7fc fee4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8004040:	2134      	movs	r1, #52	@ 0x34
 8004042:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8004046:	f7fc fedf 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 800404a:	2100      	movs	r1, #0
 800404c:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8004050:	f7fc feda 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8004054:	213a      	movs	r1, #58	@ 0x3a
 8004056:	f24d 4005 	movw	r0, #54277	@ 0xd405
 800405a:	f7fc fed5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 800405e:	2100      	movs	r1, #0
 8004060:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8004064:	f7fc fed0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8004068:	214a      	movs	r1, #74	@ 0x4a
 800406a:	f24d 4007 	movw	r0, #54279	@ 0xd407
 800406e:	f7fc fecb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8004072:	2100      	movs	r1, #0
 8004074:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8004078:	f7fc fec6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 800407c:	215c      	movs	r1, #92	@ 0x5c
 800407e:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8004082:	f7fc fec1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8004086:	2100      	movs	r1, #0
 8004088:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 800408c:	f7fc febc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8004090:	2181      	movs	r1, #129	@ 0x81
 8004092:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8004096:	f7fc feb7 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 800409a:	2100      	movs	r1, #0
 800409c:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 80040a0:	f7fc feb2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 80040a4:	21a6      	movs	r1, #166	@ 0xa6
 80040a6:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 80040aa:	f7fc fead 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 80040ae:	2100      	movs	r1, #0
 80040b0:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 80040b4:	f7fc fea8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 80040b8:	21e5      	movs	r1, #229	@ 0xe5
 80040ba:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 80040be:	f7fc fea3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 80040c2:	2101      	movs	r1, #1
 80040c4:	f24d 4010 	movw	r0, #54288	@ 0xd410
 80040c8:	f7fc fe9e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 80040cc:	2113      	movs	r1, #19
 80040ce:	f24d 4011 	movw	r0, #54289	@ 0xd411
 80040d2:	f7fc fe99 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80040d6:	2101      	movs	r1, #1
 80040d8:	f24d 4012 	movw	r0, #54290	@ 0xd412
 80040dc:	f7fc fe94 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80040e0:	2154      	movs	r1, #84	@ 0x54
 80040e2:	f24d 4013 	movw	r0, #54291	@ 0xd413
 80040e6:	f7fc fe8f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80040ea:	2101      	movs	r1, #1
 80040ec:	f24d 4014 	movw	r0, #54292	@ 0xd414
 80040f0:	f7fc fe8a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 80040f4:	2182      	movs	r1, #130	@ 0x82
 80040f6:	f24d 4015 	movw	r0, #54293	@ 0xd415
 80040fa:	f7fc fe85 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 80040fe:	2101      	movs	r1, #1
 8004100:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8004104:	f7fc fe80 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8004108:	21ca      	movs	r1, #202	@ 0xca
 800410a:	f24d 4017 	movw	r0, #54295	@ 0xd417
 800410e:	f7fc fe7b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8004112:	2102      	movs	r1, #2
 8004114:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8004118:	f7fc fe76 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 800411c:	2100      	movs	r1, #0
 800411e:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8004122:	f7fc fe71 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8004126:	2102      	movs	r1, #2
 8004128:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 800412c:	f7fc fe6c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8004130:	2101      	movs	r1, #1
 8004132:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8004136:	f7fc fe67 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 800413a:	2102      	movs	r1, #2
 800413c:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8004140:	f7fc fe62 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8004144:	2134      	movs	r1, #52	@ 0x34
 8004146:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 800414a:	f7fc fe5d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 800414e:	2102      	movs	r1, #2
 8004150:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8004154:	f7fc fe58 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8004158:	2167      	movs	r1, #103	@ 0x67
 800415a:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 800415e:	f7fc fe53 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8004162:	2102      	movs	r1, #2
 8004164:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8004168:	f7fc fe4e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 800416c:	2184      	movs	r1, #132	@ 0x84
 800416e:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8004172:	f7fc fe49 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8004176:	2102      	movs	r1, #2
 8004178:	f24d 4022 	movw	r0, #54306	@ 0xd422
 800417c:	f7fc fe44 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8004180:	21a4      	movs	r1, #164	@ 0xa4
 8004182:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8004186:	f7fc fe3f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 800418a:	2102      	movs	r1, #2
 800418c:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8004190:	f7fc fe3a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8004194:	21b7      	movs	r1, #183	@ 0xb7
 8004196:	f24d 4025 	movw	r0, #54309	@ 0xd425
 800419a:	f7fc fe35 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 800419e:	2102      	movs	r1, #2
 80041a0:	f24d 4026 	movw	r0, #54310	@ 0xd426
 80041a4:	f7fc fe30 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 80041a8:	21cf      	movs	r1, #207	@ 0xcf
 80041aa:	f24d 4027 	movw	r0, #54311	@ 0xd427
 80041ae:	f7fc fe2b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 80041b2:	2102      	movs	r1, #2
 80041b4:	f24d 4028 	movw	r0, #54312	@ 0xd428
 80041b8:	f7fc fe26 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 80041bc:	21de      	movs	r1, #222	@ 0xde
 80041be:	f24d 4029 	movw	r0, #54313	@ 0xd429
 80041c2:	f7fc fe21 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 80041c6:	2102      	movs	r1, #2
 80041c8:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 80041cc:	f7fc fe1c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 80041d0:	21f2      	movs	r1, #242	@ 0xf2
 80041d2:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 80041d6:	f7fc fe17 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 80041da:	2102      	movs	r1, #2
 80041dc:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 80041e0:	f7fc fe12 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 80041e4:	21fe      	movs	r1, #254	@ 0xfe
 80041e6:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 80041ea:	f7fc fe0d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80041ee:	2103      	movs	r1, #3
 80041f0:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 80041f4:	f7fc fe08 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 80041f8:	2110      	movs	r1, #16
 80041fa:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 80041fe:	f7fc fe03 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8004202:	2103      	movs	r1, #3
 8004204:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8004208:	f7fc fdfe 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800420c:	2133      	movs	r1, #51	@ 0x33
 800420e:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8004212:	f7fc fdf9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8004216:	2103      	movs	r1, #3
 8004218:	f24d 4032 	movw	r0, #54322	@ 0xd432
 800421c:	f7fc fdf4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004220:	216d      	movs	r1, #109	@ 0x6d
 8004222:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8004226:	f7fc fdef 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800422a:	2100      	movs	r1, #0
 800422c:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8004230:	f7fc fdea 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8004234:	2133      	movs	r1, #51	@ 0x33
 8004236:	f24d 5001 	movw	r0, #54529	@ 0xd501
 800423a:	f7fc fde5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800423e:	2100      	movs	r1, #0
 8004240:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8004244:	f7fc fde0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004248:	2134      	movs	r1, #52	@ 0x34
 800424a:	f24d 5003 	movw	r0, #54531	@ 0xd503
 800424e:	f7fc fddb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8004252:	2100      	movs	r1, #0
 8004254:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8004258:	f7fc fdd6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 800425c:	213a      	movs	r1, #58	@ 0x3a
 800425e:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8004262:	f7fc fdd1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8004266:	2100      	movs	r1, #0
 8004268:	f24d 5006 	movw	r0, #54534	@ 0xd506
 800426c:	f7fc fdcc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8004270:	214a      	movs	r1, #74	@ 0x4a
 8004272:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8004276:	f7fc fdc7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 800427a:	2100      	movs	r1, #0
 800427c:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8004280:	f7fc fdc2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8004284:	215c      	movs	r1, #92	@ 0x5c
 8004286:	f24d 5009 	movw	r0, #54537	@ 0xd509
 800428a:	f7fc fdbd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 800428e:	2100      	movs	r1, #0
 8004290:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8004294:	f7fc fdb8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8004298:	2181      	movs	r1, #129	@ 0x81
 800429a:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 800429e:	f7fc fdb3 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80042a2:	2100      	movs	r1, #0
 80042a4:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 80042a8:	f7fc fdae 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80042ac:	21a6      	movs	r1, #166	@ 0xa6
 80042ae:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 80042b2:	f7fc fda9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80042b6:	2100      	movs	r1, #0
 80042b8:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 80042bc:	f7fc fda4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80042c0:	21e5      	movs	r1, #229	@ 0xe5
 80042c2:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 80042c6:	f7fc fd9f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80042ca:	2101      	movs	r1, #1
 80042cc:	f24d 5010 	movw	r0, #54544	@ 0xd510
 80042d0:	f7fc fd9a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80042d4:	2113      	movs	r1, #19
 80042d6:	f24d 5011 	movw	r0, #54545	@ 0xd511
 80042da:	f7fc fd95 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 80042de:	2101      	movs	r1, #1
 80042e0:	f24d 5012 	movw	r0, #54546	@ 0xd512
 80042e4:	f7fc fd90 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80042e8:	2154      	movs	r1, #84	@ 0x54
 80042ea:	f24d 5013 	movw	r0, #54547	@ 0xd513
 80042ee:	f7fc fd8b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 80042f2:	2101      	movs	r1, #1
 80042f4:	f24d 5014 	movw	r0, #54548	@ 0xd514
 80042f8:	f7fc fd86 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 80042fc:	2182      	movs	r1, #130	@ 0x82
 80042fe:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8004302:	f7fc fd81 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8004306:	2101      	movs	r1, #1
 8004308:	f24d 5016 	movw	r0, #54550	@ 0xd516
 800430c:	f7fc fd7c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004310:	21ca      	movs	r1, #202	@ 0xca
 8004312:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8004316:	f7fc fd77 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800431a:	2102      	movs	r1, #2
 800431c:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8004320:	f7fc fd72 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8004324:	2100      	movs	r1, #0
 8004326:	f24d 5019 	movw	r0, #54553	@ 0xd519
 800432a:	f7fc fd6d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800432e:	2102      	movs	r1, #2
 8004330:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8004334:	f7fc fd68 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8004338:	2101      	movs	r1, #1
 800433a:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 800433e:	f7fc fd63 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8004342:	2102      	movs	r1, #2
 8004344:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8004348:	f7fc fd5e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800434c:	2134      	movs	r1, #52	@ 0x34
 800434e:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8004352:	f7fc fd59 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8004356:	2102      	movs	r1, #2
 8004358:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 800435c:	f7fc fd54 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004360:	2167      	movs	r1, #103	@ 0x67
 8004362:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8004366:	f7fc fd4f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 800436a:	2102      	movs	r1, #2
 800436c:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8004370:	f7fc fd4a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8004374:	2184      	movs	r1, #132	@ 0x84
 8004376:	f24d 5021 	movw	r0, #54561	@ 0xd521
 800437a:	f7fc fd45 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 800437e:	2102      	movs	r1, #2
 8004380:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8004384:	f7fc fd40 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8004388:	21a4      	movs	r1, #164	@ 0xa4
 800438a:	f24d 5023 	movw	r0, #54563	@ 0xd523
 800438e:	f7fc fd3b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8004392:	2102      	movs	r1, #2
 8004394:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8004398:	f7fc fd36 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 800439c:	21b7      	movs	r1, #183	@ 0xb7
 800439e:	f24d 5025 	movw	r0, #54565	@ 0xd525
 80043a2:	f7fc fd31 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80043a6:	2102      	movs	r1, #2
 80043a8:	f24d 5026 	movw	r0, #54566	@ 0xd526
 80043ac:	f7fc fd2c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80043b0:	21cf      	movs	r1, #207	@ 0xcf
 80043b2:	f24d 5027 	movw	r0, #54567	@ 0xd527
 80043b6:	f7fc fd27 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80043ba:	2102      	movs	r1, #2
 80043bc:	f24d 5028 	movw	r0, #54568	@ 0xd528
 80043c0:	f7fc fd22 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80043c4:	21de      	movs	r1, #222	@ 0xde
 80043c6:	f24d 5029 	movw	r0, #54569	@ 0xd529
 80043ca:	f7fc fd1d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80043ce:	2102      	movs	r1, #2
 80043d0:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 80043d4:	f7fc fd18 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 80043d8:	21f2      	movs	r1, #242	@ 0xf2
 80043da:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 80043de:	f7fc fd13 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 80043e2:	2102      	movs	r1, #2
 80043e4:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 80043e8:	f7fc fd0e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 80043ec:	21fe      	movs	r1, #254	@ 0xfe
 80043ee:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 80043f2:	f7fc fd09 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 80043f6:	2103      	movs	r1, #3
 80043f8:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 80043fc:	f7fc fd04 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004400:	2110      	movs	r1, #16
 8004402:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8004406:	f7fc fcff 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800440a:	2103      	movs	r1, #3
 800440c:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8004410:	f7fc fcfa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8004414:	2133      	movs	r1, #51	@ 0x33
 8004416:	f24d 5031 	movw	r0, #54577	@ 0xd531
 800441a:	f7fc fcf5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800441e:	2103      	movs	r1, #3
 8004420:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8004424:	f7fc fcf0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004428:	216d      	movs	r1, #109	@ 0x6d
 800442a:	f24d 5033 	movw	r0, #54579	@ 0xd533
 800442e:	f7fc fceb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8004432:	2100      	movs	r1, #0
 8004434:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8004438:	f7fc fce6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800443c:	2133      	movs	r1, #51	@ 0x33
 800443e:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8004442:	f7fc fce1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8004446:	2100      	movs	r1, #0
 8004448:	f24d 6002 	movw	r0, #54786	@ 0xd602
 800444c:	f7fc fcdc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004450:	2134      	movs	r1, #52	@ 0x34
 8004452:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8004456:	f7fc fcd7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800445a:	2100      	movs	r1, #0
 800445c:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8004460:	f7fc fcd2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8004464:	213a      	movs	r1, #58	@ 0x3a
 8004466:	f24d 6005 	movw	r0, #54789	@ 0xd605
 800446a:	f7fc fccd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800446e:	2100      	movs	r1, #0
 8004470:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8004474:	f7fc fcc8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004478:	214a      	movs	r1, #74	@ 0x4a
 800447a:	f24d 6007 	movw	r0, #54791	@ 0xd607
 800447e:	f7fc fcc3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8004482:	2100      	movs	r1, #0
 8004484:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8004488:	f7fc fcbe 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 800448c:	215c      	movs	r1, #92	@ 0x5c
 800448e:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8004492:	f7fc fcb9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8004496:	2100      	movs	r1, #0
 8004498:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 800449c:	f7fc fcb4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80044a0:	2181      	movs	r1, #129	@ 0x81
 80044a2:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 80044a6:	f7fc fcaf 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80044aa:	2100      	movs	r1, #0
 80044ac:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 80044b0:	f7fc fcaa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80044b4:	21a6      	movs	r1, #166	@ 0xa6
 80044b6:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 80044ba:	f7fc fca5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80044be:	2100      	movs	r1, #0
 80044c0:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 80044c4:	f7fc fca0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80044c8:	21e5      	movs	r1, #229	@ 0xe5
 80044ca:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 80044ce:	f7fc fc9b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80044d2:	2101      	movs	r1, #1
 80044d4:	f24d 6010 	movw	r0, #54800	@ 0xd610
 80044d8:	f7fc fc96 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80044dc:	2113      	movs	r1, #19
 80044de:	f24d 6011 	movw	r0, #54801	@ 0xd611
 80044e2:	f7fc fc91 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80044e6:	2101      	movs	r1, #1
 80044e8:	f24d 6012 	movw	r0, #54802	@ 0xd612
 80044ec:	f7fc fc8c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 80044f0:	2154      	movs	r1, #84	@ 0x54
 80044f2:	f24d 6013 	movw	r0, #54803	@ 0xd613
 80044f6:	f7fc fc87 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 80044fa:	2101      	movs	r1, #1
 80044fc:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8004500:	f7fc fc82 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8004504:	2182      	movs	r1, #130	@ 0x82
 8004506:	f24d 6015 	movw	r0, #54805	@ 0xd615
 800450a:	f7fc fc7d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800450e:	2101      	movs	r1, #1
 8004510:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8004514:	f7fc fc78 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004518:	21ca      	movs	r1, #202	@ 0xca
 800451a:	f24d 6017 	movw	r0, #54807	@ 0xd617
 800451e:	f7fc fc73 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8004522:	2102      	movs	r1, #2
 8004524:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8004528:	f7fc fc6e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800452c:	2100      	movs	r1, #0
 800452e:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8004532:	f7fc fc69 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8004536:	2102      	movs	r1, #2
 8004538:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 800453c:	f7fc fc64 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004540:	2101      	movs	r1, #1
 8004542:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8004546:	f7fc fc5f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800454a:	2102      	movs	r1, #2
 800454c:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8004550:	f7fc fc5a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8004554:	2134      	movs	r1, #52	@ 0x34
 8004556:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 800455a:	f7fc fc55 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800455e:	2102      	movs	r1, #2
 8004560:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8004564:	f7fc fc50 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004568:	2167      	movs	r1, #103	@ 0x67
 800456a:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 800456e:	f7fc fc4b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8004572:	2102      	movs	r1, #2
 8004574:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8004578:	f7fc fc46 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800457c:	2184      	movs	r1, #132	@ 0x84
 800457e:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8004582:	f7fc fc41 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8004586:	2102      	movs	r1, #2
 8004588:	f24d 6022 	movw	r0, #54818	@ 0xd622
 800458c:	f7fc fc3c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004590:	21a4      	movs	r1, #164	@ 0xa4
 8004592:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8004596:	f7fc fc37 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 800459a:	2102      	movs	r1, #2
 800459c:	f24d 6024 	movw	r0, #54820	@ 0xd624
 80045a0:	f7fc fc32 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80045a4:	21b7      	movs	r1, #183	@ 0xb7
 80045a6:	f24d 6025 	movw	r0, #54821	@ 0xd625
 80045aa:	f7fc fc2d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80045ae:	2102      	movs	r1, #2
 80045b0:	f24d 6026 	movw	r0, #54822	@ 0xd626
 80045b4:	f7fc fc28 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80045b8:	21cf      	movs	r1, #207	@ 0xcf
 80045ba:	f24d 6027 	movw	r0, #54823	@ 0xd627
 80045be:	f7fc fc23 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80045c2:	2102      	movs	r1, #2
 80045c4:	f24d 6028 	movw	r0, #54824	@ 0xd628
 80045c8:	f7fc fc1e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80045cc:	21de      	movs	r1, #222	@ 0xde
 80045ce:	f24d 6029 	movw	r0, #54825	@ 0xd629
 80045d2:	f7fc fc19 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80045d6:	2102      	movs	r1, #2
 80045d8:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 80045dc:	f7fc fc14 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80045e0:	21f2      	movs	r1, #242	@ 0xf2
 80045e2:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 80045e6:	f7fc fc0f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80045ea:	2102      	movs	r1, #2
 80045ec:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 80045f0:	f7fc fc0a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80045f4:	21fe      	movs	r1, #254	@ 0xfe
 80045f6:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 80045fa:	f7fc fc05 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80045fe:	2103      	movs	r1, #3
 8004600:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8004604:	f7fc fc00 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004608:	2110      	movs	r1, #16
 800460a:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 800460e:	f7fc fbfb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8004612:	2103      	movs	r1, #3
 8004614:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8004618:	f7fc fbf6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800461c:	2133      	movs	r1, #51	@ 0x33
 800461e:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8004622:	f7fc fbf1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8004626:	2103      	movs	r1, #3
 8004628:	f24d 6032 	movw	r0, #54834	@ 0xd632
 800462c:	f7fc fbec 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004630:	216d      	movs	r1, #109	@ 0x6d
 8004632:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8004636:	f7fc fbe7 	bl	8000e08 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800463a:	2155      	movs	r1, #85	@ 0x55
 800463c:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004640:	f7fc fbe2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004644:	21aa      	movs	r1, #170	@ 0xaa
 8004646:	f24f 0001 	movw	r0, #61441	@ 0xf001
 800464a:	f7fc fbdd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800464e:	2152      	movs	r1, #82	@ 0x52
 8004650:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8004654:	f7fc fbd8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004658:	2108      	movs	r1, #8
 800465a:	f24f 0003 	movw	r0, #61443	@ 0xf003
 800465e:	f7fc fbd3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004662:	2100      	movs	r1, #0
 8004664:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004668:	f7fc fbce 	bl	8000e08 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800466c:	21cc      	movs	r1, #204	@ 0xcc
 800466e:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8004672:	f7fc fbc9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004676:	2100      	movs	r1, #0
 8004678:	f24b 1001 	movw	r0, #45313	@ 0xb101
 800467c:	f7fc fbc4 	bl	8000e08 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004680:	2105      	movs	r1, #5
 8004682:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8004686:	f7fc fbbf 	bl	8000e08 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 800468a:	2170      	movs	r1, #112	@ 0x70
 800468c:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8004690:	f7fc fbba 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004694:	2170      	movs	r1, #112	@ 0x70
 8004696:	f24b 7001 	movw	r0, #46849	@ 0xb701
 800469a:	f7fc fbb5 	bl	8000e08 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 800469e:	2101      	movs	r1, #1
 80046a0:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 80046a4:	f7fc fbb0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80046a8:	2103      	movs	r1, #3
 80046aa:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80046ae:	f7fc fbab 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80046b2:	2103      	movs	r1, #3
 80046b4:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80046b8:	f7fc fba6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80046bc:	2103      	movs	r1, #3
 80046be:	f64b 0003 	movw	r0, #47107	@ 0xb803
 80046c2:	f7fc fba1 	bl	8000e08 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80046c6:	2102      	movs	r1, #2
 80046c8:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80046cc:	f7fc fb9c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80046d0:	2100      	movs	r1, #0
 80046d2:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80046d6:	f7fc fb97 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80046da:	2100      	movs	r1, #0
 80046dc:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80046e0:	f7fc fb92 	bl	8000e08 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80046e4:	21d0      	movs	r1, #208	@ 0xd0
 80046e6:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 80046ea:	f7fc fb8d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80046ee:	2102      	movs	r1, #2
 80046f0:	f64c 1001 	movw	r0, #51457	@ 0xc901
 80046f4:	f7fc fb88 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80046f8:	2150      	movs	r1, #80	@ 0x50
 80046fa:	f64c 1002 	movw	r0, #51458	@ 0xc902
 80046fe:	f7fc fb83 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8004702:	2150      	movs	r1, #80	@ 0x50
 8004704:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8004708:	f7fc fb7e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800470c:	2150      	movs	r1, #80	@ 0x50
 800470e:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8004712:	f7fc fb79 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8004716:	2100      	movs	r1, #0
 8004718:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 800471c:	f7fc fb74 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004720:	2155      	movs	r1, #85	@ 0x55
 8004722:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8004726:	f7fc fb6f 	bl	8000e08 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800472a:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 800472e:	f7fc fadf 	bl	8000cf0 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8004732:	2001      	movs	r0, #1
 8004734:	f003 f892 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004738:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 800473c:	f7fc fad8 	bl	8000cf0 <LCD_WR_REG>
 8004740:	f001 bd18 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8004744:	4bec      	ldr	r3, [pc, #944]	@ (8004af8 <LCD_Init+0x27b8>)
 8004746:	889b      	ldrh	r3, [r3, #4]
 8004748:	f249 3225 	movw	r2, #37669	@ 0x9325
 800474c:	4293      	cmp	r3, r2
 800474e:	f040 80d7 	bne.w	8004900 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004752:	f647 01f0 	movw	r1, #30960	@ 0x78f0
 8004756:	20e5      	movs	r0, #229	@ 0xe5
 8004758:	f7fc fb56 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800475c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004760:	2001      	movs	r0, #1
 8004762:	f7fc fb51 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004766:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800476a:	2002      	movs	r0, #2
 800476c:	f7fc fb4c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004770:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004774:	2003      	movs	r0, #3
 8004776:	f7fc fb47 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800477a:	2100      	movs	r1, #0
 800477c:	2004      	movs	r0, #4
 800477e:	f7fc fb43 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004782:	f240 2102 	movw	r1, #514	@ 0x202
 8004786:	2008      	movs	r0, #8
 8004788:	f7fc fb3e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800478c:	2100      	movs	r1, #0
 800478e:	2009      	movs	r0, #9
 8004790:	f7fc fb3a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004794:	2100      	movs	r1, #0
 8004796:	200a      	movs	r0, #10
 8004798:	f7fc fb36 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800479c:	2100      	movs	r1, #0
 800479e:	200c      	movs	r0, #12
 80047a0:	f7fc fb32 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80047a4:	2100      	movs	r1, #0
 80047a6:	200d      	movs	r0, #13
 80047a8:	f7fc fb2e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80047ac:	2100      	movs	r1, #0
 80047ae:	200f      	movs	r0, #15
 80047b0:	f7fc fb2a 	bl	8000e08 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80047b4:	2100      	movs	r1, #0
 80047b6:	2010      	movs	r0, #16
 80047b8:	f7fc fb26 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80047bc:	2107      	movs	r1, #7
 80047be:	2011      	movs	r0, #17
 80047c0:	f7fc fb22 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80047c4:	2100      	movs	r1, #0
 80047c6:	2012      	movs	r0, #18
 80047c8:	f7fc fb1e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80047cc:	2100      	movs	r1, #0
 80047ce:	2013      	movs	r0, #19
 80047d0:	f7fc fb1a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80047d4:	2100      	movs	r1, #0
 80047d6:	2007      	movs	r0, #7
 80047d8:	f7fc fb16 	bl	8000e08 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80047dc:	f241 6190 	movw	r1, #5776	@ 0x1690
 80047e0:	2010      	movs	r0, #16
 80047e2:	f7fc fb11 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80047e6:	f240 2127 	movw	r1, #551	@ 0x227
 80047ea:	2011      	movs	r0, #17
 80047ec:	f7fc fb0c 	bl	8000e08 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80047f0:	219d      	movs	r1, #157	@ 0x9d
 80047f2:	2012      	movs	r0, #18
 80047f4:	f7fc fb08 	bl	8000e08 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80047f8:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80047fc:	2013      	movs	r0, #19
 80047fe:	f7fc fb03 	bl	8000e08 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8004802:	2125      	movs	r1, #37	@ 0x25
 8004804:	2029      	movs	r0, #41	@ 0x29
 8004806:	f7fc faff 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800480a:	210d      	movs	r1, #13
 800480c:	202b      	movs	r0, #43	@ 0x2b
 800480e:	f7fc fafb 	bl	8000e08 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8004812:	2107      	movs	r1, #7
 8004814:	2030      	movs	r0, #48	@ 0x30
 8004816:	f7fc faf7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800481a:	f240 3103 	movw	r1, #771	@ 0x303
 800481e:	2031      	movs	r0, #49	@ 0x31
 8004820:	f7fc faf2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8004824:	2103      	movs	r1, #3
 8004826:	2032      	movs	r0, #50	@ 0x32
 8004828:	f7fc faee 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800482c:	f240 2106 	movw	r1, #518	@ 0x206
 8004830:	2035      	movs	r0, #53	@ 0x35
 8004832:	f7fc fae9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8004836:	2108      	movs	r1, #8
 8004838:	2036      	movs	r0, #54	@ 0x36
 800483a:	f7fc fae5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800483e:	f240 4106 	movw	r1, #1030	@ 0x406
 8004842:	2037      	movs	r0, #55	@ 0x37
 8004844:	f7fc fae0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004848:	f44f 7141 	mov.w	r1, #772	@ 0x304
 800484c:	2038      	movs	r0, #56	@ 0x38
 800484e:	f7fc fadb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004852:	2107      	movs	r1, #7
 8004854:	2039      	movs	r0, #57	@ 0x39
 8004856:	f7fc fad7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800485a:	f240 6102 	movw	r1, #1538	@ 0x602
 800485e:	203c      	movs	r0, #60	@ 0x3c
 8004860:	f7fc fad2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004864:	2108      	movs	r1, #8
 8004866:	203d      	movs	r0, #61	@ 0x3d
 8004868:	f7fc face 	bl	8000e08 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800486c:	2100      	movs	r1, #0
 800486e:	2050      	movs	r0, #80	@ 0x50
 8004870:	f7fc faca 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004874:	21ef      	movs	r1, #239	@ 0xef
 8004876:	2051      	movs	r0, #81	@ 0x51
 8004878:	f7fc fac6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800487c:	2100      	movs	r1, #0
 800487e:	2052      	movs	r0, #82	@ 0x52
 8004880:	f7fc fac2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004884:	f240 113f 	movw	r1, #319	@ 0x13f
 8004888:	2053      	movs	r0, #83	@ 0x53
 800488a:	f7fc fabd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800488e:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 8004892:	2060      	movs	r0, #96	@ 0x60
 8004894:	f7fc fab8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004898:	2101      	movs	r1, #1
 800489a:	2061      	movs	r0, #97	@ 0x61
 800489c:	f7fc fab4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80048a0:	2100      	movs	r1, #0
 80048a2:	206a      	movs	r0, #106	@ 0x6a
 80048a4:	f7fc fab0 	bl	8000e08 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80048a8:	2100      	movs	r1, #0
 80048aa:	2080      	movs	r0, #128	@ 0x80
 80048ac:	f7fc faac 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80048b0:	2100      	movs	r1, #0
 80048b2:	2081      	movs	r0, #129	@ 0x81
 80048b4:	f7fc faa8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80048b8:	2100      	movs	r1, #0
 80048ba:	2082      	movs	r0, #130	@ 0x82
 80048bc:	f7fc faa4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80048c0:	2100      	movs	r1, #0
 80048c2:	2083      	movs	r0, #131	@ 0x83
 80048c4:	f7fc faa0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80048c8:	2100      	movs	r1, #0
 80048ca:	2084      	movs	r0, #132	@ 0x84
 80048cc:	f7fc fa9c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80048d0:	2100      	movs	r1, #0
 80048d2:	2085      	movs	r0, #133	@ 0x85
 80048d4:	f7fc fa98 	bl	8000e08 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80048d8:	2110      	movs	r1, #16
 80048da:	2090      	movs	r0, #144	@ 0x90
 80048dc:	f7fc fa94 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80048e0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80048e4:	2092      	movs	r0, #146	@ 0x92
 80048e6:	f7fc fa8f 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80048ea:	f240 1133 	movw	r1, #307	@ 0x133
 80048ee:	2007      	movs	r0, #7
 80048f0:	f7fc fa8a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80048f4:	2122      	movs	r1, #34	@ 0x22
 80048f6:	2000      	movs	r0, #0
 80048f8:	f7fc fa86 	bl	8000e08 <LCD_WriteReg>
 80048fc:	f001 bc3a 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004900:	4b7d      	ldr	r3, [pc, #500]	@ (8004af8 <LCD_Init+0x27b8>)
 8004902:	889b      	ldrh	r3, [r3, #4]
 8004904:	f249 3228 	movw	r2, #37672	@ 0x9328
 8004908:	4293      	cmp	r3, r2
 800490a:	f040 80f7 	bne.w	8004afc <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800490e:	f241 018f 	movw	r1, #4239	@ 0x108f
 8004912:	20ec      	movs	r0, #236	@ 0xec
 8004914:	f7fc fa78 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004918:	f241 2134 	movw	r1, #4660	@ 0x1234
 800491c:	20ef      	movs	r0, #239	@ 0xef
 800491e:	f7fc fa73 	bl	8000e08 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8004922:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004926:	2001      	movs	r0, #1
 8004928:	f7fc fa6e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800492c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004930:	2002      	movs	r0, #2
 8004932:	f7fc fa69 	bl	8000e08 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8004936:	f241 0130 	movw	r1, #4144	@ 0x1030
 800493a:	2003      	movs	r0, #3
 800493c:	f7fc fa64 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004940:	2100      	movs	r1, #0
 8004942:	2004      	movs	r0, #4
 8004944:	f7fc fa60 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004948:	f240 2102 	movw	r1, #514	@ 0x202
 800494c:	2008      	movs	r0, #8
 800494e:	f7fc fa5b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004952:	2100      	movs	r1, #0
 8004954:	2009      	movs	r0, #9
 8004956:	f7fc fa57 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800495a:	2100      	movs	r1, #0
 800495c:	200a      	movs	r0, #10
 800495e:	f7fc fa53 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004962:	2101      	movs	r1, #1
 8004964:	200c      	movs	r0, #12
 8004966:	f7fc fa4f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800496a:	2100      	movs	r1, #0
 800496c:	200d      	movs	r0, #13
 800496e:	f7fc fa4b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004972:	2100      	movs	r1, #0
 8004974:	200f      	movs	r0, #15
 8004976:	f7fc fa47 	bl	8000e08 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800497a:	2100      	movs	r1, #0
 800497c:	2010      	movs	r0, #16
 800497e:	f7fc fa43 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004982:	2107      	movs	r1, #7
 8004984:	2011      	movs	r0, #17
 8004986:	f7fc fa3f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800498a:	2100      	movs	r1, #0
 800498c:	2012      	movs	r0, #18
 800498e:	f7fc fa3b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004992:	2100      	movs	r1, #0
 8004994:	2013      	movs	r0, #19
 8004996:	f7fc fa37 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800499a:	2101      	movs	r1, #1
 800499c:	2007      	movs	r0, #7
 800499e:	f7fc fa33 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 80049a2:	2032      	movs	r0, #50	@ 0x32
 80049a4:	f002 ff5a 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80049a8:	f241 4190 	movw	r1, #5264	@ 0x1490
 80049ac:	2010      	movs	r0, #16
 80049ae:	f7fc fa2b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80049b2:	f240 2127 	movw	r1, #551	@ 0x227
 80049b6:	2011      	movs	r0, #17
 80049b8:	f7fc fa26 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 80049bc:	2032      	movs	r0, #50	@ 0x32
 80049be:	f002 ff4d 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80049c2:	218a      	movs	r1, #138	@ 0x8a
 80049c4:	2012      	movs	r0, #18
 80049c6:	f7fc fa1f 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 80049ca:	2032      	movs	r0, #50	@ 0x32
 80049cc:	f002 ff46 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80049d0:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 80049d4:	2013      	movs	r0, #19
 80049d6:	f7fc fa17 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80049da:	2106      	movs	r1, #6
 80049dc:	2029      	movs	r0, #41	@ 0x29
 80049de:	f7fc fa13 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80049e2:	210d      	movs	r1, #13
 80049e4:	202b      	movs	r0, #43	@ 0x2b
 80049e6:	f7fc fa0f 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 80049ea:	2032      	movs	r0, #50	@ 0x32
 80049ec:	f002 ff36 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80049f0:	2100      	movs	r1, #0
 80049f2:	2020      	movs	r0, #32
 80049f4:	f7fc fa08 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80049f8:	2100      	movs	r1, #0
 80049fa:	2021      	movs	r0, #33	@ 0x21
 80049fc:	f7fc fa04 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 8004a00:	2032      	movs	r0, #50	@ 0x32
 8004a02:	f002 ff2b 	bl	800785c <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8004a06:	2100      	movs	r1, #0
 8004a08:	2030      	movs	r0, #48	@ 0x30
 8004a0a:	f7fc f9fd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004a0e:	f240 6104 	movw	r1, #1540	@ 0x604
 8004a12:	2031      	movs	r0, #49	@ 0x31
 8004a14:	f7fc f9f8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004a18:	f240 3105 	movw	r1, #773	@ 0x305
 8004a1c:	2032      	movs	r0, #50	@ 0x32
 8004a1e:	f7fc f9f3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8004a22:	2100      	movs	r1, #0
 8004a24:	2035      	movs	r0, #53	@ 0x35
 8004a26:	f7fc f9ef 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004a2a:	f640 4109 	movw	r1, #3081	@ 0xc09
 8004a2e:	2036      	movs	r0, #54	@ 0x36
 8004a30:	f7fc f9ea 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8004a34:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8004a38:	2037      	movs	r0, #55	@ 0x37
 8004a3a:	f7fc f9e5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004a3e:	f240 3101 	movw	r1, #769	@ 0x301
 8004a42:	2038      	movs	r0, #56	@ 0x38
 8004a44:	f7fc f9e0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004a48:	f240 7107 	movw	r1, #1799	@ 0x707
 8004a4c:	2039      	movs	r0, #57	@ 0x39
 8004a4e:	f7fc f9db 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004a52:	2100      	movs	r1, #0
 8004a54:	203c      	movs	r0, #60	@ 0x3c
 8004a56:	f7fc f9d7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004a5a:	f640 210a 	movw	r1, #2570	@ 0xa0a
 8004a5e:	203d      	movs	r0, #61	@ 0x3d
 8004a60:	f7fc f9d2 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 8004a64:	2032      	movs	r0, #50	@ 0x32
 8004a66:	f002 fef9 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	2050      	movs	r0, #80	@ 0x50
 8004a6e:	f7fc f9cb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004a72:	21ef      	movs	r1, #239	@ 0xef
 8004a74:	2051      	movs	r0, #81	@ 0x51
 8004a76:	f7fc f9c7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	2052      	movs	r0, #82	@ 0x52
 8004a7e:	f7fc f9c3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004a82:	f240 113f 	movw	r1, #319	@ 0x13f
 8004a86:	2053      	movs	r0, #83	@ 0x53
 8004a88:	f7fc f9be 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004a8c:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 8004a90:	2060      	movs	r0, #96	@ 0x60
 8004a92:	f7fc f9b9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004a96:	2101      	movs	r1, #1
 8004a98:	2061      	movs	r0, #97	@ 0x61
 8004a9a:	f7fc f9b5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	206a      	movs	r0, #106	@ 0x6a
 8004aa2:	f7fc f9b1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2080      	movs	r0, #128	@ 0x80
 8004aaa:	f7fc f9ad 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2081      	movs	r0, #129	@ 0x81
 8004ab2:	f7fc f9a9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	2082      	movs	r0, #130	@ 0x82
 8004aba:	f7fc f9a5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004abe:	2100      	movs	r1, #0
 8004ac0:	2083      	movs	r0, #131	@ 0x83
 8004ac2:	f7fc f9a1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	2084      	movs	r0, #132	@ 0x84
 8004aca:	f7fc f99d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004ace:	2100      	movs	r1, #0
 8004ad0:	2085      	movs	r0, #133	@ 0x85
 8004ad2:	f7fc f999 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004ad6:	2110      	movs	r1, #16
 8004ad8:	2090      	movs	r0, #144	@ 0x90
 8004ada:	f7fc f995 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004ade:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004ae2:	2092      	movs	r0, #146	@ 0x92
 8004ae4:	f7fc f990 	bl	8000e08 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004ae8:	f240 1133 	movw	r1, #307	@ 0x133
 8004aec:	2007      	movs	r0, #7
 8004aee:	f7fc f98b 	bl	8000e08 <LCD_WriteReg>
 8004af2:	f001 bb3f 	b.w	8006174 <LCD_Init+0x3e34>
 8004af6:	bf00      	nop
 8004af8:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x9320) //测试OK.
 8004afc:	4bce      	ldr	r3, [pc, #824]	@ (8004e38 <LCD_Init+0x2af8>)
 8004afe:	889b      	ldrh	r3, [r3, #4]
 8004b00:	f249 3220 	movw	r2, #37664	@ 0x9320
 8004b04:	4293      	cmp	r3, r2
 8004b06:	f040 80ad 	bne.w	8004c64 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f7fc f97b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8004b12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b16:	2001      	movs	r0, #1
 8004b18:	f7fc f976 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004b1c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004b20:	2002      	movs	r0, #2
 8004b22:	f7fc f971 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8004b26:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004b2a:	2003      	movs	r0, #3
 8004b2c:	f7fc f96c 	bl	8000e08 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004b30:	2100      	movs	r1, #0
 8004b32:	2004      	movs	r0, #4
 8004b34:	f7fc f968 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004b38:	f240 2102 	movw	r1, #514	@ 0x202
 8004b3c:	2008      	movs	r0, #8
 8004b3e:	f7fc f963 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8004b42:	2100      	movs	r1, #0
 8004b44:	2009      	movs	r0, #9
 8004b46:	f7fc f95f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	200a      	movs	r0, #10
 8004b4e:	f7fc f95b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004b52:	2101      	movs	r1, #1
 8004b54:	200c      	movs	r0, #12
 8004b56:	f7fc f957 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	200d      	movs	r0, #13
 8004b5e:	f7fc f953 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004b62:	2100      	movs	r1, #0
 8004b64:	200f      	movs	r0, #15
 8004b66:	f7fc f94f 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 8004b6a:	2032      	movs	r0, #50	@ 0x32
 8004b6c:	f002 fe76 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004b70:	f240 1101 	movw	r1, #257	@ 0x101
 8004b74:	2007      	movs	r0, #7
 8004b76:	f7fc f947 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 8004b7a:	2032      	movs	r0, #50	@ 0x32
 8004b7c:	f002 fe6e 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004b80:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 8004b84:	2010      	movs	r0, #16
 8004b86:	f7fc f93f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004b8a:	2107      	movs	r1, #7
 8004b8c:	2011      	movs	r0, #17
 8004b8e:	f7fc f93b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004b92:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004b96:	2012      	movs	r0, #18
 8004b98:	f7fc f936 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004b9c:	f44f 6130 	mov.w	r1, #2816	@ 0xb00
 8004ba0:	2013      	movs	r0, #19
 8004ba2:	f7fc f931 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	2029      	movs	r0, #41	@ 0x29
 8004baa:	f7fc f92d 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004bae:	f244 0110 	movw	r1, #16400	@ 0x4010
 8004bb2:	202b      	movs	r0, #43	@ 0x2b
 8004bb4:	f7fc f928 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2050      	movs	r0, #80	@ 0x50
 8004bbc:	f7fc f924 	bl	8000e08 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004bc0:	21ef      	movs	r1, #239	@ 0xef
 8004bc2:	2051      	movs	r0, #81	@ 0x51
 8004bc4:	f7fc f920 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004bc8:	2100      	movs	r1, #0
 8004bca:	2052      	movs	r0, #82	@ 0x52
 8004bcc:	f7fc f91c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004bd0:	f240 113f 	movw	r1, #319	@ 0x13f
 8004bd4:	2053      	movs	r0, #83	@ 0x53
 8004bd6:	f7fc f917 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004bda:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004bde:	2060      	movs	r0, #96	@ 0x60
 8004be0:	f7fc f912 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004be4:	2101      	movs	r1, #1
 8004be6:	2061      	movs	r0, #97	@ 0x61
 8004be8:	f7fc f90e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004bec:	2100      	movs	r1, #0
 8004bee:	206a      	movs	r0, #106	@ 0x6a
 8004bf0:	f7fc f90a 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	2080      	movs	r0, #128	@ 0x80
 8004bf8:	f7fc f906 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2081      	movs	r0, #129	@ 0x81
 8004c00:	f7fc f902 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004c04:	2100      	movs	r1, #0
 8004c06:	2082      	movs	r0, #130	@ 0x82
 8004c08:	f7fc f8fe 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	2083      	movs	r0, #131	@ 0x83
 8004c10:	f7fc f8fa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004c14:	2100      	movs	r1, #0
 8004c16:	2084      	movs	r0, #132	@ 0x84
 8004c18:	f7fc f8f6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2085      	movs	r0, #133	@ 0x85
 8004c20:	f7fc f8f2 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004c24:	2110      	movs	r1, #16
 8004c26:	2090      	movs	r0, #144	@ 0x90
 8004c28:	f7fc f8ee 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2092      	movs	r0, #146	@ 0x92
 8004c30:	f7fc f8ea 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004c34:	2101      	movs	r1, #1
 8004c36:	2093      	movs	r0, #147	@ 0x93
 8004c38:	f7fc f8e6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004c3c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004c40:	2095      	movs	r0, #149	@ 0x95
 8004c42:	f7fc f8e1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004c46:	2100      	movs	r1, #0
 8004c48:	2097      	movs	r0, #151	@ 0x97
 8004c4a:	f7fc f8dd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004c4e:	2100      	movs	r1, #0
 8004c50:	2098      	movs	r0, #152	@ 0x98
 8004c52:	f7fc f8d9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004c56:	f240 1173 	movw	r1, #371	@ 0x173
 8004c5a:	2007      	movs	r0, #7
 8004c5c:	f7fc f8d4 	bl	8000e08 <LCD_WriteReg>
 8004c60:	f001 ba88 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004c64:	4b74      	ldr	r3, [pc, #464]	@ (8004e38 <LCD_Init+0x2af8>)
 8004c66:	889b      	ldrh	r3, [r3, #4]
 8004c68:	f249 3231 	movw	r2, #37681	@ 0x9331
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	f040 80e5 	bne.w	8004e3c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004c72:	f241 0114 	movw	r1, #4116	@ 0x1014
 8004c76:	20e7      	movs	r0, #231	@ 0xe7
 8004c78:	f7fc f8c6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004c7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c80:	2001      	movs	r0, #1
 8004c82:	f7fc f8c1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004c86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c8a:	2002      	movs	r0, #2
 8004c8c:	f7fc f8bc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004c90:	f241 0138 	movw	r1, #4152	@ 0x1038
 8004c94:	2003      	movs	r0, #3
 8004c96:	f7fc f8b7 	bl	8000e08 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004c9a:	f240 2102 	movw	r1, #514	@ 0x202
 8004c9e:	2008      	movs	r0, #8
 8004ca0:	f7fc f8b2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	2009      	movs	r0, #9
 8004ca8:	f7fc f8ae 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004cac:	2100      	movs	r1, #0
 8004cae:	200a      	movs	r0, #10
 8004cb0:	f7fc f8aa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	200c      	movs	r0, #12
 8004cb8:	f7fc f8a6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	200d      	movs	r0, #13
 8004cc0:	f7fc f8a2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	200f      	movs	r0, #15
 8004cc8:	f7fc f89e 	bl	8000e08 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004ccc:	2100      	movs	r1, #0
 8004cce:	2010      	movs	r0, #16
 8004cd0:	f7fc f89a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004cd4:	2107      	movs	r1, #7
 8004cd6:	2011      	movs	r0, #17
 8004cd8:	f7fc f896 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2012      	movs	r0, #18
 8004ce0:	f7fc f892 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	2013      	movs	r0, #19
 8004ce8:	f7fc f88e 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004cec:	20c8      	movs	r0, #200	@ 0xc8
 8004cee:	f002 fdb5 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004cf2:	f241 6190 	movw	r1, #5776	@ 0x1690
 8004cf6:	2010      	movs	r0, #16
 8004cf8:	f7fc f886 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004cfc:	f240 2127 	movw	r1, #551	@ 0x227
 8004d00:	2011      	movs	r0, #17
 8004d02:	f7fc f881 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004d06:	2032      	movs	r0, #50	@ 0x32
 8004d08:	f002 fda8 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004d0c:	210c      	movs	r1, #12
 8004d0e:	2012      	movs	r0, #18
 8004d10:	f7fc f87a 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004d14:	2032      	movs	r0, #50	@ 0x32
 8004d16:	f002 fda1 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004d1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d1e:	2013      	movs	r0, #19
 8004d20:	f7fc f872 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004d24:	2111      	movs	r1, #17
 8004d26:	2029      	movs	r0, #41	@ 0x29
 8004d28:	f7fc f86e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004d2c:	210b      	movs	r1, #11
 8004d2e:	202b      	movs	r0, #43	@ 0x2b
 8004d30:	f7fc f86a 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004d34:	2032      	movs	r0, #50	@ 0x32
 8004d36:	f002 fd91 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2020      	movs	r0, #32
 8004d3e:	f7fc f863 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004d42:	f240 113f 	movw	r1, #319	@ 0x13f
 8004d46:	2021      	movs	r0, #33	@ 0x21
 8004d48:	f7fc f85e 	bl	8000e08 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	2030      	movs	r0, #48	@ 0x30
 8004d50:	f7fc f85a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004d54:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004d58:	2031      	movs	r0, #49	@ 0x31
 8004d5a:	f7fc f855 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	2032      	movs	r0, #50	@ 0x32
 8004d62:	f7fc f851 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004d66:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8004d6a:	2035      	movs	r0, #53	@ 0x35
 8004d6c:	f7fc f84c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004d70:	f241 610a 	movw	r1, #5642	@ 0x160a
 8004d74:	2036      	movs	r0, #54	@ 0x36
 8004d76:	f7fc f847 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004d7a:	f240 7107 	movw	r1, #1799	@ 0x707
 8004d7e:	2037      	movs	r0, #55	@ 0x37
 8004d80:	f7fc f842 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004d84:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004d88:	2038      	movs	r0, #56	@ 0x38
 8004d8a:	f7fc f83d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004d8e:	f240 7107 	movw	r1, #1799	@ 0x707
 8004d92:	2039      	movs	r0, #57	@ 0x39
 8004d94:	f7fc f838 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004d98:	f240 4102 	movw	r1, #1026	@ 0x402
 8004d9c:	203c      	movs	r0, #60	@ 0x3c
 8004d9e:	f7fc f833 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004da2:	f640 410f 	movw	r1, #3087	@ 0xc0f
 8004da6:	203d      	movs	r0, #61	@ 0x3d
 8004da8:	f7fc f82e 	bl	8000e08 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004dac:	2100      	movs	r1, #0
 8004dae:	2050      	movs	r0, #80	@ 0x50
 8004db0:	f7fc f82a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004db4:	21ef      	movs	r1, #239	@ 0xef
 8004db6:	2051      	movs	r0, #81	@ 0x51
 8004db8:	f7fc f826 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	2052      	movs	r0, #82	@ 0x52
 8004dc0:	f7fc f822 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004dc4:	f240 113f 	movw	r1, #319	@ 0x13f
 8004dc8:	2053      	movs	r0, #83	@ 0x53
 8004dca:	f7fc f81d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004dce:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004dd2:	2060      	movs	r0, #96	@ 0x60
 8004dd4:	f7fc f818 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004dd8:	2101      	movs	r1, #1
 8004dda:	2061      	movs	r0, #97	@ 0x61
 8004ddc:	f7fc f814 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004de0:	2100      	movs	r1, #0
 8004de2:	206a      	movs	r0, #106	@ 0x6a
 8004de4:	f7fc f810 	bl	8000e08 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004de8:	2100      	movs	r1, #0
 8004dea:	2080      	movs	r0, #128	@ 0x80
 8004dec:	f7fc f80c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004df0:	2100      	movs	r1, #0
 8004df2:	2081      	movs	r0, #129	@ 0x81
 8004df4:	f7fc f808 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004df8:	2100      	movs	r1, #0
 8004dfa:	2082      	movs	r0, #130	@ 0x82
 8004dfc:	f7fc f804 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004e00:	2100      	movs	r1, #0
 8004e02:	2083      	movs	r0, #131	@ 0x83
 8004e04:	f7fc f800 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004e08:	2100      	movs	r1, #0
 8004e0a:	2084      	movs	r0, #132	@ 0x84
 8004e0c:	f7fb fffc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004e10:	2100      	movs	r1, #0
 8004e12:	2085      	movs	r0, #133	@ 0x85
 8004e14:	f7fb fff8 	bl	8000e08 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004e18:	2110      	movs	r1, #16
 8004e1a:	2090      	movs	r0, #144	@ 0x90
 8004e1c:	f7fb fff4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004e20:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004e24:	2092      	movs	r0, #146	@ 0x92
 8004e26:	f7fb ffef 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004e2a:	f240 1133 	movw	r1, #307	@ 0x133
 8004e2e:	2007      	movs	r0, #7
 8004e30:	f7fb ffea 	bl	8000e08 <LCD_WriteReg>
 8004e34:	f001 b99e 	b.w	8006174 <LCD_Init+0x3e34>
 8004e38:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x5408) {
 8004e3c:	4be2      	ldr	r3, [pc, #904]	@ (80051c8 <LCD_Init+0x2e88>)
 8004e3e:	889b      	ldrh	r3, [r3, #4]
 8004e40:	f245 4208 	movw	r2, #21512	@ 0x5408
 8004e44:	4293      	cmp	r3, r2
 8004e46:	f040 80a3 	bne.w	8004f90 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004e4a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e4e:	2001      	movs	r0, #1
 8004e50:	f7fb ffda 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004e54:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004e58:	2002      	movs	r0, #2
 8004e5a:	f7fb ffd5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004e5e:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004e62:	2003      	movs	r0, #3
 8004e64:	f7fb ffd0 	bl	8000e08 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004e68:	2100      	movs	r1, #0
 8004e6a:	2004      	movs	r0, #4
 8004e6c:	f7fb ffcc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004e70:	f240 2107 	movw	r1, #519	@ 0x207
 8004e74:	2008      	movs	r0, #8
 8004e76:	f7fb ffc7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2009      	movs	r0, #9
 8004e7e:	f7fb ffc3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004e82:	2100      	movs	r1, #0
 8004e84:	200a      	movs	r0, #10
 8004e86:	f7fb ffbf 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	200c      	movs	r0, #12
 8004e8e:	f7fb ffbb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004e92:	2100      	movs	r1, #0
 8004e94:	200d      	movs	r0, #13
 8004e96:	f7fb ffb7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	200f      	movs	r0, #15
 8004e9e:	f7fb ffb3 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 8004ea2:	2014      	movs	r0, #20
 8004ea4:	f002 fcda 	bl	800785c <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004ea8:	f241 61b0 	movw	r1, #5808	@ 0x16b0
 8004eac:	2010      	movs	r0, #16
 8004eae:	f7fb ffab 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	2011      	movs	r0, #17
 8004eb6:	f7fb ffa7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004eba:	2101      	movs	r1, #1
 8004ebc:	2017      	movs	r0, #23
 8004ebe:	f7fb ffa3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004ec2:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8004ec6:	2012      	movs	r0, #18
 8004ec8:	f7fb ff9e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004ecc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004ed0:	2013      	movs	r0, #19
 8004ed2:	f7fb ff99 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004ed6:	2109      	movs	r1, #9
 8004ed8:	2029      	movs	r0, #41	@ 0x29
 8004eda:	f7fb ff95 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004ede:	2109      	movs	r1, #9
 8004ee0:	202a      	movs	r0, #42	@ 0x2a
 8004ee2:	f7fb ff91 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	20a4      	movs	r0, #164	@ 0xa4
 8004eea:	f7fb ff8d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2050      	movs	r0, #80	@ 0x50
 8004ef2:	f7fb ff89 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004ef6:	21ef      	movs	r1, #239	@ 0xef
 8004ef8:	2051      	movs	r0, #81	@ 0x51
 8004efa:	f7fb ff85 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004efe:	2100      	movs	r1, #0
 8004f00:	2052      	movs	r0, #82	@ 0x52
 8004f02:	f7fb ff81 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004f06:	f240 113f 	movw	r1, #319	@ 0x13f
 8004f0a:	2053      	movs	r0, #83	@ 0x53
 8004f0c:	f7fb ff7c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004f10:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004f14:	2060      	movs	r0, #96	@ 0x60
 8004f16:	f7fb ff77 	bl	8000e08 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	2061      	movs	r0, #97	@ 0x61
 8004f1e:	f7fb ff73 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004f22:	2100      	movs	r1, #0
 8004f24:	206a      	movs	r0, #106	@ 0x6a
 8004f26:	f7fb ff6f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	2080      	movs	r0, #128	@ 0x80
 8004f2e:	f7fb ff6b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004f32:	2100      	movs	r1, #0
 8004f34:	2081      	movs	r0, #129	@ 0x81
 8004f36:	f7fb ff67 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	2082      	movs	r0, #130	@ 0x82
 8004f3e:	f7fb ff63 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004f42:	2100      	movs	r1, #0
 8004f44:	2083      	movs	r0, #131	@ 0x83
 8004f46:	f7fb ff5f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	2084      	movs	r0, #132	@ 0x84
 8004f4e:	f7fb ff5b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004f52:	2100      	movs	r1, #0
 8004f54:	2085      	movs	r0, #133	@ 0x85
 8004f56:	f7fb ff57 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004f5a:	2113      	movs	r1, #19
 8004f5c:	2090      	movs	r0, #144	@ 0x90
 8004f5e:	f7fb ff53 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004f62:	2100      	movs	r1, #0
 8004f64:	2092      	movs	r0, #146	@ 0x92
 8004f66:	f7fb ff4f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	2093      	movs	r0, #147	@ 0x93
 8004f6e:	f7fb ff4b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004f72:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004f76:	2095      	movs	r0, #149	@ 0x95
 8004f78:	f7fb ff46 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004f7c:	f240 1173 	movw	r1, #371	@ 0x173
 8004f80:	2007      	movs	r0, #7
 8004f82:	f7fb ff41 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 8004f86:	2032      	movs	r0, #50	@ 0x32
 8004f88:	f002 fc68 	bl	800785c <HAL_Delay>
 8004f8c:	f001 b8f2 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004f90:	4b8d      	ldr	r3, [pc, #564]	@ (80051c8 <LCD_Init+0x2e88>)
 8004f92:	889b      	ldrh	r3, [r3, #4]
 8004f94:	f241 5205 	movw	r2, #5381	@ 0x1505
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	f040 8117 	bne.w	80051cc <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	2007      	movs	r0, #7
 8004fa2:	f7fb ff31 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 8004fa6:	2032      	movs	r0, #50	@ 0x32
 8004fa8:	f002 fc58 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004fac:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8004fb0:	2012      	movs	r0, #18
 8004fb2:	f7fb ff29 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	20a4      	movs	r0, #164	@ 0xa4
 8004fba:	f7fb ff25 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004fbe:	210f      	movs	r1, #15
 8004fc0:	2008      	movs	r0, #8
 8004fc2:	f7fb ff21 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004fc6:	2108      	movs	r1, #8
 8004fc8:	200a      	movs	r0, #10
 8004fca:	f7fb ff1d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004fce:	2108      	movs	r1, #8
 8004fd0:	200d      	movs	r0, #13
 8004fd2:	f7fb ff19 	bl	8000e08 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004fd6:	f240 7107 	movw	r1, #1799	@ 0x707
 8004fda:	2030      	movs	r0, #48	@ 0x30
 8004fdc:	f7fb ff14 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004fe0:	2107      	movs	r1, #7
 8004fe2:	2031      	movs	r0, #49	@ 0x31
 8004fe4:	f7fb ff10 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004fe8:	f240 6103 	movw	r1, #1539	@ 0x603
 8004fec:	2032      	movs	r0, #50	@ 0x32
 8004fee:	f7fb ff0b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004ff2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004ff6:	2033      	movs	r0, #51	@ 0x33
 8004ff8:	f7fb ff06 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004ffc:	f240 2102 	movw	r1, #514	@ 0x202
 8005000:	2034      	movs	r0, #52	@ 0x34
 8005002:	f7fb ff01 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8005006:	2102      	movs	r1, #2
 8005008:	2035      	movs	r0, #53	@ 0x35
 800500a:	f7fb fefd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 800500e:	f641 710f 	movw	r1, #7951	@ 0x1f0f
 8005012:	2036      	movs	r0, #54	@ 0x36
 8005014:	f7fb fef8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8005018:	f240 7107 	movw	r1, #1799	@ 0x707
 800501c:	2037      	movs	r0, #55	@ 0x37
 800501e:	f7fb fef3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8005022:	2100      	movs	r1, #0
 8005024:	2038      	movs	r0, #56	@ 0x38
 8005026:	f7fb feef 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 800502a:	2100      	movs	r1, #0
 800502c:	2039      	movs	r0, #57	@ 0x39
 800502e:	f7fb feeb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8005032:	f240 7107 	movw	r1, #1799	@ 0x707
 8005036:	203a      	movs	r0, #58	@ 0x3a
 8005038:	f7fb fee6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 800503c:	2100      	movs	r1, #0
 800503e:	203b      	movs	r0, #59	@ 0x3b
 8005040:	f7fb fee2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8005044:	2107      	movs	r1, #7
 8005046:	203c      	movs	r0, #60	@ 0x3c
 8005048:	f7fb fede 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 800504c:	2100      	movs	r1, #0
 800504e:	203d      	movs	r0, #61	@ 0x3d
 8005050:	f7fb feda 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 8005054:	2032      	movs	r0, #50	@ 0x32
 8005056:	f002 fc01 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 800505a:	2101      	movs	r1, #1
 800505c:	2007      	movs	r0, #7
 800505e:	f7fb fed3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8005062:	2101      	movs	r1, #1
 8005064:	2017      	movs	r0, #23
 8005066:	f7fb fecf 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(50);
 800506a:	2032      	movs	r0, #50	@ 0x32
 800506c:	f002 fbf6 	bl	800785c <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8005070:	f44f 51bd 	mov.w	r1, #6048	@ 0x17a0
 8005074:	2010      	movs	r0, #16
 8005076:	f7fb fec7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 800507a:	f240 2117 	movw	r1, #535	@ 0x217
 800507e:	2011      	movs	r0, #17
 8005080:	f7fb fec2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8005084:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8005088:	2012      	movs	r0, #18
 800508a:	f7fb febd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 800508e:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8005092:	2013      	movs	r0, #19
 8005094:	f7fb feb8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8005098:	2100      	movs	r1, #0
 800509a:	202a      	movs	r0, #42	@ 0x2a
 800509c:	f7fb feb4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80050a0:	210a      	movs	r1, #10
 80050a2:	2029      	movs	r0, #41	@ 0x29
 80050a4:	f7fb feb0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 80050a8:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 80050ac:	2012      	movs	r0, #18
 80050ae:	f7fb feab 	bl	8000e08 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 80050b2:	2100      	movs	r1, #0
 80050b4:	2050      	movs	r0, #80	@ 0x50
 80050b6:	f7fb fea7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80050ba:	21ef      	movs	r1, #239	@ 0xef
 80050bc:	2051      	movs	r0, #81	@ 0x51
 80050be:	f7fb fea3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80050c2:	2100      	movs	r1, #0
 80050c4:	2052      	movs	r0, #82	@ 0x52
 80050c6:	f7fb fe9f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80050ca:	f240 113f 	movw	r1, #319	@ 0x13f
 80050ce:	2053      	movs	r0, #83	@ 0x53
 80050d0:	f7fb fe9a 	bl	8000e08 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80050d4:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80050d8:	2060      	movs	r0, #96	@ 0x60
 80050da:	f7fb fe95 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80050de:	2101      	movs	r1, #1
 80050e0:	2061      	movs	r0, #97	@ 0x61
 80050e2:	f7fb fe91 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	206a      	movs	r0, #106	@ 0x6a
 80050ea:	f7fb fe8d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80050ee:	2100      	movs	r1, #0
 80050f0:	2080      	movs	r0, #128	@ 0x80
 80050f2:	f7fb fe89 	bl	8000e08 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 80050f6:	2100      	movs	r1, #0
 80050f8:	2081      	movs	r0, #129	@ 0x81
 80050fa:	f7fb fe85 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80050fe:	2100      	movs	r1, #0
 8005100:	2082      	movs	r0, #130	@ 0x82
 8005102:	f7fb fe81 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005106:	2100      	movs	r1, #0
 8005108:	2083      	movs	r0, #131	@ 0x83
 800510a:	f7fb fe7d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800510e:	2100      	movs	r1, #0
 8005110:	2084      	movs	r0, #132	@ 0x84
 8005112:	f7fb fe79 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005116:	2100      	movs	r1, #0
 8005118:	2085      	movs	r0, #133	@ 0x85
 800511a:	f7fb fe75 	bl	8000e08 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 800511e:	2113      	movs	r1, #19
 8005120:	2090      	movs	r0, #144	@ 0x90
 8005122:	f7fb fe71 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005126:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800512a:	2092      	movs	r0, #146	@ 0x92
 800512c:	f7fb fe6c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8005130:	2105      	movs	r1, #5
 8005132:	2093      	movs	r0, #147	@ 0x93
 8005134:	f7fb fe68 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8005138:	2100      	movs	r1, #0
 800513a:	2095      	movs	r0, #149	@ 0x95
 800513c:	f7fb fe64 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8005140:	2100      	movs	r1, #0
 8005142:	2097      	movs	r0, #151	@ 0x97
 8005144:	f7fb fe60 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8005148:	2100      	movs	r1, #0
 800514a:	2098      	movs	r0, #152	@ 0x98
 800514c:	f7fb fe5c 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8005150:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005154:	2001      	movs	r0, #1
 8005156:	f7fb fe57 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800515a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800515e:	2002      	movs	r0, #2
 8005160:	f7fb fe52 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005164:	f241 0138 	movw	r1, #4152	@ 0x1038
 8005168:	2003      	movs	r0, #3
 800516a:	f7fb fe4d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800516e:	2100      	movs	r1, #0
 8005170:	2004      	movs	r0, #4
 8005172:	f7fb fe49 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005176:	2100      	movs	r1, #0
 8005178:	200c      	movs	r0, #12
 800517a:	f7fb fe45 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800517e:	2100      	movs	r1, #0
 8005180:	200f      	movs	r0, #15
 8005182:	f7fb fe41 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8005186:	2100      	movs	r1, #0
 8005188:	2020      	movs	r0, #32
 800518a:	f7fb fe3d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800518e:	2100      	movs	r1, #0
 8005190:	2021      	movs	r0, #33	@ 0x21
 8005192:	f7fb fe39 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8005196:	2121      	movs	r1, #33	@ 0x21
 8005198:	2007      	movs	r0, #7
 800519a:	f7fb fe35 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 800519e:	2014      	movs	r0, #20
 80051a0:	f002 fb5c 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80051a4:	2161      	movs	r1, #97	@ 0x61
 80051a6:	2007      	movs	r0, #7
 80051a8:	f7fb fe2e 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80051ac:	2014      	movs	r0, #20
 80051ae:	f002 fb55 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 80051b2:	f240 1173 	movw	r1, #371	@ 0x173
 80051b6:	2007      	movs	r0, #7
 80051b8:	f7fb fe26 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80051bc:	2014      	movs	r0, #20
 80051be:	f002 fb4d 	bl	800785c <HAL_Delay>
 80051c2:	f000 bfd7 	b.w	8006174 <LCD_Init+0x3e34>
 80051c6:	bf00      	nop
 80051c8:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0xB505) {
 80051cc:	4bf0      	ldr	r3, [pc, #960]	@ (8005590 <LCD_Init+0x3250>)
 80051ce:	889b      	ldrh	r3, [r3, #4]
 80051d0:	f24b 5205 	movw	r2, #46341	@ 0xb505
 80051d4:	4293      	cmp	r3, r2
 80051d6:	f040 8103 	bne.w	80053e0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 80051da:	2100      	movs	r1, #0
 80051dc:	2000      	movs	r0, #0
 80051de:	f7fb fe13 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051e2:	2100      	movs	r1, #0
 80051e4:	2000      	movs	r0, #0
 80051e6:	f7fb fe0f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051ea:	2100      	movs	r1, #0
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7fb fe0b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80051f2:	2100      	movs	r1, #0
 80051f4:	2000      	movs	r0, #0
 80051f6:	f7fb fe07 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 80051fa:	2101      	movs	r1, #1
 80051fc:	20a4      	movs	r0, #164	@ 0xa4
 80051fe:	f7fb fe03 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 8005202:	2014      	movs	r0, #20
 8005204:	f002 fb2a 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005208:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800520c:	2060      	movs	r0, #96	@ 0x60
 800520e:	f7fb fdfb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005212:	f240 2102 	movw	r1, #514	@ 0x202
 8005216:	2008      	movs	r0, #8
 8005218:	f7fb fdf6 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800521c:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8005220:	2030      	movs	r0, #48	@ 0x30
 8005222:	f7fb fdf1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8005226:	f243 7115 	movw	r1, #14101	@ 0x3715
 800522a:	2031      	movs	r0, #49	@ 0x31
 800522c:	f7fb fdec 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005230:	f240 6104 	movw	r1, #1540	@ 0x604
 8005234:	2032      	movs	r0, #50	@ 0x32
 8005236:	f7fb fde7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800523a:	f640 6116 	movw	r1, #3606	@ 0xe16
 800523e:	2033      	movs	r0, #51	@ 0x33
 8005240:	f7fb fde2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8005244:	f242 2111 	movw	r1, #8721	@ 0x2211
 8005248:	2034      	movs	r0, #52	@ 0x34
 800524a:	f7fb fddd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800524e:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8005252:	2035      	movs	r0, #53	@ 0x35
 8005254:	f7fb fdd8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8005258:	f248 5107 	movw	r1, #34055	@ 0x8507
 800525c:	2036      	movs	r0, #54	@ 0x36
 800525e:	f7fb fdd3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8005262:	f241 4107 	movw	r1, #5127	@ 0x1407
 8005266:	2037      	movs	r0, #55	@ 0x37
 8005268:	f7fb fdce 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 800526c:	f241 4103 	movw	r1, #5123	@ 0x1403
 8005270:	2038      	movs	r0, #56	@ 0x38
 8005272:	f7fb fdc9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8005276:	2120      	movs	r1, #32
 8005278:	2039      	movs	r0, #57	@ 0x39
 800527a:	f7fb fdc5 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 800527e:	211a      	movs	r1, #26
 8005280:	2090      	movs	r0, #144	@ 0x90
 8005282:	f7fb fdc1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005286:	2100      	movs	r1, #0
 8005288:	2010      	movs	r0, #16
 800528a:	f7fb fdbd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800528e:	2107      	movs	r1, #7
 8005290:	2011      	movs	r0, #17
 8005292:	f7fb fdb9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005296:	2100      	movs	r1, #0
 8005298:	2012      	movs	r0, #18
 800529a:	f7fb fdb5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800529e:	2100      	movs	r1, #0
 80052a0:	2013      	movs	r0, #19
 80052a2:	f7fb fdb1 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80052a6:	2014      	movs	r0, #20
 80052a8:	f002 fad8 	bl	800785c <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80052ac:	f44f 61e6 	mov.w	r1, #1840	@ 0x730
 80052b0:	2010      	movs	r0, #16
 80052b2:	f7fb fda9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80052b6:	f240 1137 	movw	r1, #311	@ 0x137
 80052ba:	2011      	movs	r0, #17
 80052bc:	f7fb fda4 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80052c0:	2014      	movs	r0, #20
 80052c2:	f002 facb 	bl	800785c <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80052c6:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 80052ca:	2012      	movs	r0, #18
 80052cc:	f7fb fd9c 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80052d0:	2014      	movs	r0, #20
 80052d2:	f002 fac3 	bl	800785c <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80052d6:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80052da:	2013      	movs	r0, #19
 80052dc:	f7fb fd94 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 80052e0:	2180      	movs	r1, #128	@ 0x80
 80052e2:	202a      	movs	r0, #42	@ 0x2a
 80052e4:	f7fb fd90 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80052e8:	2148      	movs	r1, #72	@ 0x48
 80052ea:	2029      	movs	r0, #41	@ 0x29
 80052ec:	f7fb fd8c 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80052f0:	2014      	movs	r0, #20
 80052f2:	f002 fab3 	bl	800785c <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 80052f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052fa:	2001      	movs	r0, #1
 80052fc:	f7fb fd84 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005300:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8005304:	2002      	movs	r0, #2
 8005306:	f7fb fd7f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800530a:	f241 0138 	movw	r1, #4152	@ 0x1038
 800530e:	2003      	movs	r0, #3
 8005310:	f7fb fd7a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005314:	f240 2102 	movw	r1, #514	@ 0x202
 8005318:	2008      	movs	r0, #8
 800531a:	f7fb fd75 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800531e:	2100      	movs	r1, #0
 8005320:	200a      	movs	r0, #10
 8005322:	f7fb fd71 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8005326:	2100      	movs	r1, #0
 8005328:	200c      	movs	r0, #12
 800532a:	f7fb fd6d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800532e:	2100      	movs	r1, #0
 8005330:	200d      	movs	r0, #13
 8005332:	f7fb fd69 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8005336:	2130      	movs	r1, #48	@ 0x30
 8005338:	200e      	movs	r0, #14
 800533a:	f7fb fd65 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800533e:	2100      	movs	r1, #0
 8005340:	2050      	movs	r0, #80	@ 0x50
 8005342:	f7fb fd61 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8005346:	21ef      	movs	r1, #239	@ 0xef
 8005348:	2051      	movs	r0, #81	@ 0x51
 800534a:	f7fb fd5d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800534e:	2100      	movs	r1, #0
 8005350:	2052      	movs	r0, #82	@ 0x52
 8005352:	f7fb fd59 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8005356:	f240 113f 	movw	r1, #319	@ 0x13f
 800535a:	2053      	movs	r0, #83	@ 0x53
 800535c:	f7fb fd54 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005360:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8005364:	2060      	movs	r0, #96	@ 0x60
 8005366:	f7fb fd4f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800536a:	2101      	movs	r1, #1
 800536c:	2061      	movs	r0, #97	@ 0x61
 800536e:	f7fb fd4b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8005372:	2100      	movs	r1, #0
 8005374:	206a      	movs	r0, #106	@ 0x6a
 8005376:	f7fb fd47 	bl	8000e08 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 800537a:	2111      	movs	r1, #17
 800537c:	2090      	movs	r0, #144	@ 0x90
 800537e:	f7fb fd43 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005382:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005386:	2092      	movs	r0, #146	@ 0x92
 8005388:	f7fb fd3e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 800538c:	f240 4102 	movw	r1, #1026	@ 0x402
 8005390:	2093      	movs	r0, #147	@ 0x93
 8005392:	f7fb fd39 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8005396:	2102      	movs	r1, #2
 8005398:	2094      	movs	r0, #148	@ 0x94
 800539a:	f7fb fd35 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 800539e:	2014      	movs	r0, #20
 80053a0:	f002 fa5c 	bl	800785c <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80053a4:	2101      	movs	r1, #1
 80053a6:	2007      	movs	r0, #7
 80053a8:	f7fb fd2e 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80053ac:	2014      	movs	r0, #20
 80053ae:	f002 fa55 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80053b2:	2161      	movs	r1, #97	@ 0x61
 80053b4:	2007      	movs	r0, #7
 80053b6:	f7fb fd27 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80053ba:	f240 1173 	movw	r1, #371	@ 0x173
 80053be:	2007      	movs	r0, #7
 80053c0:	f7fb fd22 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80053c4:	2100      	movs	r1, #0
 80053c6:	2020      	movs	r0, #32
 80053c8:	f7fb fd1e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80053cc:	2100      	movs	r1, #0
 80053ce:	2021      	movs	r0, #33	@ 0x21
 80053d0:	f7fb fd1a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80053d4:	2122      	movs	r1, #34	@ 0x22
 80053d6:	2000      	movs	r0, #0
 80053d8:	f7fb fd16 	bl	8000e08 <LCD_WriteReg>
 80053dc:	f000 beca 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 80053e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005590 <LCD_Init+0x3250>)
 80053e2:	889b      	ldrh	r3, [r3, #4]
 80053e4:	f24c 5205 	movw	r2, #50437	@ 0xc505
 80053e8:	4293      	cmp	r3, r2
 80053ea:	f040 80d3 	bne.w	8005594 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 80053ee:	2100      	movs	r1, #0
 80053f0:	2000      	movs	r0, #0
 80053f2:	f7fb fd09 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80053f6:	2100      	movs	r1, #0
 80053f8:	2000      	movs	r0, #0
 80053fa:	f7fb fd05 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 80053fe:	2014      	movs	r0, #20
 8005400:	f002 fa2c 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8005404:	2100      	movs	r1, #0
 8005406:	2000      	movs	r0, #0
 8005408:	f7fb fcfe 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800540c:	2100      	movs	r1, #0
 800540e:	2000      	movs	r0, #0
 8005410:	f7fb fcfa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005414:	2100      	movs	r1, #0
 8005416:	2000      	movs	r0, #0
 8005418:	f7fb fcf6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800541c:	2100      	movs	r1, #0
 800541e:	2000      	movs	r0, #0
 8005420:	f7fb fcf2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8005424:	2101      	movs	r1, #1
 8005426:	20a4      	movs	r0, #164	@ 0xa4
 8005428:	f7fb fcee 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 800542c:	2014      	movs	r0, #20
 800542e:	f002 fa15 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005432:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8005436:	2060      	movs	r0, #96	@ 0x60
 8005438:	f7fb fce6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800543c:	f640 0106 	movw	r1, #2054	@ 0x806
 8005440:	2008      	movs	r0, #8
 8005442:	f7fb fce1 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8005446:	f240 7103 	movw	r1, #1795	@ 0x703
 800544a:	2030      	movs	r0, #48	@ 0x30
 800544c:	f7fb fcdc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005450:	2101      	movs	r1, #1
 8005452:	2031      	movs	r0, #49	@ 0x31
 8005454:	f7fb fcd8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005458:	2104      	movs	r1, #4
 800545a:	2032      	movs	r0, #50	@ 0x32
 800545c:	f7fb fcd4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005460:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8005464:	2033      	movs	r0, #51	@ 0x33
 8005466:	f7fb fccf 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800546a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800546e:	2034      	movs	r0, #52	@ 0x34
 8005470:	f7fb fcca 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8005474:	f240 1103 	movw	r1, #259	@ 0x103
 8005478:	2035      	movs	r0, #53	@ 0x35
 800547a:	f7fb fcc5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800547e:	211f      	movs	r1, #31
 8005480:	2036      	movs	r0, #54	@ 0x36
 8005482:	f7fb fcc1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8005486:	f240 7103 	movw	r1, #1795	@ 0x703
 800548a:	2037      	movs	r0, #55	@ 0x37
 800548c:	f7fb fcbc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005490:	2101      	movs	r1, #1
 8005492:	2038      	movs	r0, #56	@ 0x38
 8005494:	f7fb fcb8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005498:	2104      	movs	r1, #4
 800549a:	2039      	movs	r0, #57	@ 0x39
 800549c:	f7fb fcb4 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80054a0:	2115      	movs	r1, #21
 80054a2:	2090      	movs	r0, #144	@ 0x90
 80054a4:	f7fb fcb0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80054a8:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80054ac:	2010      	movs	r0, #16
 80054ae:	f7fb fcab 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80054b2:	f240 2147 	movw	r1, #583	@ 0x247
 80054b6:	2011      	movs	r0, #17
 80054b8:	f7fb fca6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80054bc:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80054c0:	2012      	movs	r0, #18
 80054c2:	f7fb fca1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80054c6:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80054ca:	2013      	movs	r0, #19
 80054cc:	f7fb fc9c 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(120);
 80054d0:	2078      	movs	r0, #120	@ 0x78
 80054d2:	f002 f9c3 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80054d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054da:	2001      	movs	r0, #1
 80054dc:	f7fb fc94 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80054e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80054e4:	2002      	movs	r0, #2
 80054e6:	f7fb fc8f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80054ea:	f241 0130 	movw	r1, #4144	@ 0x1030
 80054ee:	2003      	movs	r0, #3
 80054f0:	f7fb fc8a 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80054f4:	2108      	movs	r1, #8
 80054f6:	200a      	movs	r0, #10
 80054f8:	f7fb fc86 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80054fc:	2100      	movs	r1, #0
 80054fe:	200c      	movs	r0, #12
 8005500:	f7fb fc82 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005504:	2120      	movs	r1, #32
 8005506:	200e      	movs	r0, #14
 8005508:	f7fb fc7e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800550c:	2100      	movs	r1, #0
 800550e:	200f      	movs	r0, #15
 8005510:	f7fb fc7a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005514:	2100      	movs	r1, #0
 8005516:	2020      	movs	r0, #32
 8005518:	f7fb fc76 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800551c:	2100      	movs	r1, #0
 800551e:	2021      	movs	r0, #33	@ 0x21
 8005520:	f7fb fc72 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8005524:	213d      	movs	r1, #61	@ 0x3d
 8005526:	202a      	movs	r0, #42	@ 0x2a
 8005528:	f7fb fc6e 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(20);
 800552c:	2014      	movs	r0, #20
 800552e:	f002 f995 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005532:	212d      	movs	r1, #45	@ 0x2d
 8005534:	2029      	movs	r0, #41	@ 0x29
 8005536:	f7fb fc67 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800553a:	2100      	movs	r1, #0
 800553c:	2050      	movs	r0, #80	@ 0x50
 800553e:	f7fb fc63 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005542:	f24d 01ef 	movw	r1, #53487	@ 0xd0ef
 8005546:	2051      	movs	r0, #81	@ 0x51
 8005548:	f7fb fc5e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800554c:	2100      	movs	r1, #0
 800554e:	2052      	movs	r0, #82	@ 0x52
 8005550:	f7fb fc5a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005554:	f240 113f 	movw	r1, #319	@ 0x13f
 8005558:	2053      	movs	r0, #83	@ 0x53
 800555a:	f7fb fc55 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800555e:	2100      	movs	r1, #0
 8005560:	2061      	movs	r0, #97	@ 0x61
 8005562:	f7fb fc51 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005566:	2100      	movs	r1, #0
 8005568:	206a      	movs	r0, #106	@ 0x6a
 800556a:	f7fb fc4d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800556e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8005572:	2092      	movs	r0, #146	@ 0x92
 8005574:	f7fb fc48 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005578:	2105      	movs	r1, #5
 800557a:	2093      	movs	r0, #147	@ 0x93
 800557c:	f7fb fc44 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005580:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005584:	2007      	movs	r0, #7
 8005586:	f7fb fc3f 	bl	8000e08 <LCD_WriteReg>
 800558a:	f000 bdf3 	b.w	8006174 <LCD_Init+0x3e34>
 800558e:	bf00      	nop
 8005590:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005594:	4bc2      	ldr	r3, [pc, #776]	@ (80058a0 <LCD_Init+0x3560>)
 8005596:	889b      	ldrh	r3, [r3, #4]
 8005598:	f648 1289 	movw	r2, #35209	@ 0x8989
 800559c:	4293      	cmp	r3, r2
 800559e:	f040 80bc 	bne.w	800571a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80055a2:	2101      	movs	r1, #1
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7fb fc2f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80055aa:	f64a 01a4 	movw	r1, #43172	@ 0xa8a4
 80055ae:	2003      	movs	r0, #3
 80055b0:	f7fb fc2a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80055b4:	2100      	movs	r1, #0
 80055b6:	200c      	movs	r0, #12
 80055b8:	f7fb fc26 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80055bc:	f640 010c 	movw	r1, #2060	@ 0x80c
 80055c0:	200d      	movs	r0, #13
 80055c2:	f7fb fc21 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80055c6:	f44f 512c 	mov.w	r1, #11008	@ 0x2b00
 80055ca:	200e      	movs	r0, #14
 80055cc:	f7fb fc1c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80055d0:	21b0      	movs	r1, #176	@ 0xb0
 80055d2:	201e      	movs	r0, #30
 80055d4:	f7fb fc18 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80055d8:	f642 313f 	movw	r1, #11071	@ 0x2b3f
 80055dc:	2001      	movs	r0, #1
 80055de:	f7fb fc13 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80055e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80055e6:	2002      	movs	r0, #2
 80055e8:	f7fb fc0e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80055ec:	2100      	movs	r1, #0
 80055ee:	2010      	movs	r0, #16
 80055f0:	f7fb fc0a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80055f4:	f246 0178 	movw	r1, #24696	@ 0x6078
 80055f8:	2011      	movs	r0, #17
 80055fa:	f7fb fc05 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80055fe:	2100      	movs	r1, #0
 8005600:	2005      	movs	r0, #5
 8005602:	f7fb fc01 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8005606:	2100      	movs	r1, #0
 8005608:	2006      	movs	r0, #6
 800560a:	f7fb fbfd 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800560e:	f64e 711c 	movw	r1, #61212	@ 0xef1c
 8005612:	2016      	movs	r0, #22
 8005614:	f7fb fbf8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005618:	2103      	movs	r1, #3
 800561a:	2017      	movs	r0, #23
 800561c:	f7fb fbf4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005620:	f240 2133 	movw	r1, #563	@ 0x233
 8005624:	2007      	movs	r0, #7
 8005626:	f7fb fbef 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800562a:	2100      	movs	r1, #0
 800562c:	200b      	movs	r0, #11
 800562e:	f7fb fbeb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8005632:	2100      	movs	r1, #0
 8005634:	200f      	movs	r0, #15
 8005636:	f7fb fbe7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800563a:	2100      	movs	r1, #0
 800563c:	2041      	movs	r0, #65	@ 0x41
 800563e:	f7fb fbe3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8005642:	2100      	movs	r1, #0
 8005644:	2042      	movs	r0, #66	@ 0x42
 8005646:	f7fb fbdf 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800564a:	2100      	movs	r1, #0
 800564c:	2048      	movs	r0, #72	@ 0x48
 800564e:	f7fb fbdb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005652:	f240 113f 	movw	r1, #319	@ 0x13f
 8005656:	2049      	movs	r0, #73	@ 0x49
 8005658:	f7fb fbd6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800565c:	2100      	movs	r1, #0
 800565e:	204a      	movs	r0, #74	@ 0x4a
 8005660:	f7fb fbd2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005664:	2100      	movs	r1, #0
 8005666:	204b      	movs	r0, #75	@ 0x4b
 8005668:	f7fb fbce 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800566c:	f44f 416f 	mov.w	r1, #61184	@ 0xef00
 8005670:	2044      	movs	r0, #68	@ 0x44
 8005672:	f7fb fbc9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005676:	2100      	movs	r1, #0
 8005678:	2045      	movs	r0, #69	@ 0x45
 800567a:	f7fb fbc5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800567e:	f240 113f 	movw	r1, #319	@ 0x13f
 8005682:	2046      	movs	r0, #70	@ 0x46
 8005684:	f7fb fbc0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005688:	f240 7107 	movw	r1, #1799	@ 0x707
 800568c:	2030      	movs	r0, #48	@ 0x30
 800568e:	f7fb fbbb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005692:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8005696:	2031      	movs	r0, #49	@ 0x31
 8005698:	f7fb fbb6 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 800569c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80056a0:	2032      	movs	r0, #50	@ 0x32
 80056a2:	f7fb fbb1 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80056a6:	f240 5102 	movw	r1, #1282	@ 0x502
 80056aa:	2033      	movs	r0, #51	@ 0x33
 80056ac:	f7fb fbac 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80056b0:	f240 5107 	movw	r1, #1287	@ 0x507
 80056b4:	2034      	movs	r0, #52	@ 0x34
 80056b6:	f7fb fba7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80056ba:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80056be:	2035      	movs	r0, #53	@ 0x35
 80056c0:	f7fb fba2 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80056c4:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80056c8:	2036      	movs	r0, #54	@ 0x36
 80056ca:	f7fb fb9d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80056ce:	f240 5102 	movw	r1, #1282	@ 0x502
 80056d2:	2037      	movs	r0, #55	@ 0x37
 80056d4:	f7fb fb98 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80056d8:	f240 3102 	movw	r1, #770	@ 0x302
 80056dc:	203a      	movs	r0, #58	@ 0x3a
 80056de:	f7fb fb93 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80056e2:	f240 3102 	movw	r1, #770	@ 0x302
 80056e6:	203b      	movs	r0, #59	@ 0x3b
 80056e8:	f7fb fb8e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80056ec:	2100      	movs	r1, #0
 80056ee:	2023      	movs	r0, #35	@ 0x23
 80056f0:	f7fb fb8a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80056f4:	2100      	movs	r1, #0
 80056f6:	2024      	movs	r0, #36	@ 0x24
 80056f8:	f7fb fb86 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80056fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005700:	2025      	movs	r0, #37	@ 0x25
 8005702:	f7fb fb81 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8005706:	2100      	movs	r1, #0
 8005708:	204f      	movs	r0, #79	@ 0x4f
 800570a:	f7fb fb7d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800570e:	2100      	movs	r1, #0
 8005710:	204e      	movs	r0, #78	@ 0x4e
 8005712:	f7fb fb79 	bl	8000e08 <LCD_WriteReg>
 8005716:	f000 bd2d 	b.w	8006174 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800571a:	4b61      	ldr	r3, [pc, #388]	@ (80058a0 <LCD_Init+0x3560>)
 800571c:	889b      	ldrh	r3, [r3, #4]
 800571e:	f244 5231 	movw	r2, #17713	@ 0x4531
 8005722:	4293      	cmp	r3, r2
 8005724:	f040 80be 	bne.w	80058a4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005728:	2101      	movs	r1, #1
 800572a:	2000      	movs	r0, #0
 800572c:	f7fb fb6c 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(10);
 8005730:	200a      	movs	r0, #10
 8005732:	f002 f893 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8005736:	f241 6128 	movw	r1, #5672	@ 0x1628
 800573a:	2010      	movs	r0, #16
 800573c:	f7fb fb64 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005740:	210e      	movs	r1, #14
 8005742:	2012      	movs	r0, #18
 8005744:	f7fb fb60 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005748:	f640 2139 	movw	r1, #2617	@ 0xa39
 800574c:	2013      	movs	r0, #19
 800574e:	f7fb fb5b 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(10);
 8005752:	200a      	movs	r0, #10
 8005754:	f002 f882 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005758:	2140      	movs	r1, #64	@ 0x40
 800575a:	2011      	movs	r0, #17
 800575c:	f7fb fb54 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005760:	2150      	movs	r1, #80	@ 0x50
 8005762:	2015      	movs	r0, #21
 8005764:	f7fb fb50 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(10);
 8005768:	200a      	movs	r0, #10
 800576a:	f002 f877 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800576e:	211e      	movs	r1, #30
 8005770:	2012      	movs	r0, #18
 8005772:	f7fb fb49 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(10);
 8005776:	200a      	movs	r0, #10
 8005778:	f002 f870 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800577c:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
 8005780:	2010      	movs	r0, #16
 8005782:	f7fb fb41 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005786:	f642 2139 	movw	r1, #10809	@ 0x2a39
 800578a:	2013      	movs	r0, #19
 800578c:	f7fb fb3c 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(10);
 8005790:	200a      	movs	r0, #10
 8005792:	f002 f863 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005796:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800579a:	2001      	movs	r0, #1
 800579c:	f7fb fb34 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80057a0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80057a4:	2002      	movs	r0, #2
 80057a6:	f7fb fb2f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80057aa:	f241 0138 	movw	r1, #4152	@ 0x1038
 80057ae:	2003      	movs	r0, #3
 80057b0:	f7fb fb2a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80057b4:	f240 2102 	movw	r1, #514	@ 0x202
 80057b8:	2008      	movs	r0, #8
 80057ba:	f7fb fb25 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80057be:	2108      	movs	r1, #8
 80057c0:	200a      	movs	r0, #10
 80057c2:	f7fb fb21 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80057c6:	2100      	movs	r1, #0
 80057c8:	2030      	movs	r0, #48	@ 0x30
 80057ca:	f7fb fb1d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80057ce:	f240 4102 	movw	r1, #1026	@ 0x402
 80057d2:	2031      	movs	r0, #49	@ 0x31
 80057d4:	f7fb fb18 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80057d8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80057dc:	2032      	movs	r0, #50	@ 0x32
 80057de:	f7fb fb13 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80057e2:	f240 5103 	movw	r1, #1283	@ 0x503
 80057e6:	2033      	movs	r0, #51	@ 0x33
 80057e8:	f7fb fb0e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80057ec:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80057f0:	2034      	movs	r0, #52	@ 0x34
 80057f2:	f7fb fb09 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80057f6:	f240 3101 	movw	r1, #769	@ 0x301
 80057fa:	2035      	movs	r0, #53	@ 0x35
 80057fc:	f7fb fb04 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005800:	f240 7107 	movw	r1, #1799	@ 0x707
 8005804:	2036      	movs	r0, #54	@ 0x36
 8005806:	f7fb faff 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800580a:	f240 3105 	movw	r1, #773	@ 0x305
 800580e:	2037      	movs	r0, #55	@ 0x37
 8005810:	f7fb fafa 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8005814:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8005818:	2038      	movs	r0, #56	@ 0x38
 800581a:	f7fb faf5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800581e:	f640 710b 	movw	r1, #3851	@ 0xf0b
 8005822:	2039      	movs	r0, #57	@ 0x39
 8005824:	f7fb faf0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005828:	2102      	movs	r1, #2
 800582a:	2041      	movs	r0, #65	@ 0x41
 800582c:	f7fb faec 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005830:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8005834:	2060      	movs	r0, #96	@ 0x60
 8005836:	f7fb fae7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800583a:	2101      	movs	r1, #1
 800583c:	2061      	movs	r0, #97	@ 0x61
 800583e:	f7fb fae3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8005842:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8005846:	2090      	movs	r0, #144	@ 0x90
 8005848:	f7fb fade 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800584c:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005850:	2092      	movs	r0, #146	@ 0x92
 8005852:	f7fb fad9 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005856:	2104      	movs	r1, #4
 8005858:	2093      	movs	r0, #147	@ 0x93
 800585a:	f7fb fad5 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800585e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005862:	20a0      	movs	r0, #160	@ 0xa0
 8005864:	f7fb fad0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005868:	2101      	movs	r1, #1
 800586a:	2007      	movs	r0, #7
 800586c:	f7fb facc 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005870:	2121      	movs	r1, #33	@ 0x21
 8005872:	2007      	movs	r0, #7
 8005874:	f7fb fac8 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005878:	2123      	movs	r1, #35	@ 0x23
 800587a:	2007      	movs	r0, #7
 800587c:	f7fb fac4 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005880:	2133      	movs	r1, #51	@ 0x33
 8005882:	2007      	movs	r0, #7
 8005884:	f7fb fac0 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005888:	f240 1133 	movw	r1, #307	@ 0x133
 800588c:	2007      	movs	r0, #7
 800588e:	f7fb fabb 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005892:	2100      	movs	r1, #0
 8005894:	20a0      	movs	r0, #160	@ 0xa0
 8005896:	f7fb fab7 	bl	8000e08 <LCD_WriteReg>
 800589a:	f000 bc6b 	b.w	8006174 <LCD_Init+0x3e34>
 800589e:	bf00      	nop
 80058a0:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0x4535) {
 80058a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005a14 <LCD_Init+0x36d4>)
 80058a6:	889b      	ldrh	r3, [r3, #4]
 80058a8:	f244 5235 	movw	r2, #17717	@ 0x4535
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f040 80b3 	bne.w	8005a18 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80058b2:	2130      	movs	r1, #48	@ 0x30
 80058b4:	2015      	movs	r0, #21
 80058b6:	f7fb faa7 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80058ba:	2110      	movs	r1, #16
 80058bc:	209a      	movs	r0, #154	@ 0x9a
 80058be:	f7fb faa3 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80058c2:	2120      	movs	r1, #32
 80058c4:	2011      	movs	r0, #17
 80058c6:	f7fb fa9f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80058ca:	f243 4128 	movw	r1, #13352	@ 0x3428
 80058ce:	2010      	movs	r0, #16
 80058d0:	f7fb fa9a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80058d4:	2102      	movs	r1, #2
 80058d6:	2012      	movs	r0, #18
 80058d8:	f7fb fa96 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80058dc:	f241 0138 	movw	r1, #4152	@ 0x1038
 80058e0:	2013      	movs	r0, #19
 80058e2:	f7fb fa91 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(40);
 80058e6:	2028      	movs	r0, #40	@ 0x28
 80058e8:	f001 ffb8 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80058ec:	2112      	movs	r1, #18
 80058ee:	2012      	movs	r0, #18
 80058f0:	f7fb fa8a 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(40);
 80058f4:	2028      	movs	r0, #40	@ 0x28
 80058f6:	f001 ffb1 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80058fa:	f243 4120 	movw	r1, #13344	@ 0x3420
 80058fe:	2010      	movs	r0, #16
 8005900:	f7fb fa82 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8005904:	f243 0138 	movw	r1, #12344	@ 0x3038
 8005908:	2013      	movs	r0, #19
 800590a:	f7fb fa7d 	bl	8000e08 <LCD_WriteReg>
		HAL_Delay(70);
 800590e:	2046      	movs	r0, #70	@ 0x46
 8005910:	f001 ffa4 	bl	800785c <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8005914:	2100      	movs	r1, #0
 8005916:	2030      	movs	r0, #48	@ 0x30
 8005918:	f7fb fa76 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800591c:	f240 4102 	movw	r1, #1026	@ 0x402
 8005920:	2031      	movs	r0, #49	@ 0x31
 8005922:	f7fb fa71 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8005926:	f240 3107 	movw	r1, #775	@ 0x307
 800592a:	2032      	movs	r0, #50	@ 0x32
 800592c:	f7fb fa6c 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005930:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8005934:	2033      	movs	r0, #51	@ 0x33
 8005936:	f7fb fa67 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800593a:	2104      	movs	r1, #4
 800593c:	2034      	movs	r0, #52	@ 0x34
 800593e:	f7fb fa63 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8005942:	f240 4101 	movw	r1, #1025	@ 0x401
 8005946:	2035      	movs	r0, #53	@ 0x35
 8005948:	f7fb fa5e 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800594c:	f240 7107 	movw	r1, #1799	@ 0x707
 8005950:	2036      	movs	r0, #54	@ 0x36
 8005952:	f7fb fa59 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005956:	f240 3105 	movw	r1, #773	@ 0x305
 800595a:	2037      	movs	r0, #55	@ 0x37
 800595c:	f7fb fa54 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005960:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8005964:	2038      	movs	r0, #56	@ 0x38
 8005966:	f7fb fa4f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800596a:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800596e:	2039      	movs	r0, #57	@ 0x39
 8005970:	f7fb fa4a 	bl	8000e08 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005974:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005978:	2001      	movs	r0, #1
 800597a:	f7fb fa45 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800597e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8005982:	2002      	movs	r0, #2
 8005984:	f7fb fa40 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005988:	f241 0130 	movw	r1, #4144	@ 0x1030
 800598c:	2003      	movs	r0, #3
 800598e:	f7fb fa3b 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005992:	f640 0108 	movw	r1, #2056	@ 0x808
 8005996:	2008      	movs	r0, #8
 8005998:	f7fb fa36 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800599c:	2108      	movs	r1, #8
 800599e:	200a      	movs	r0, #10
 80059a0:	f7fb fa32 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80059a4:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80059a8:	2060      	movs	r0, #96	@ 0x60
 80059aa:	f7fb fa2d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80059ae:	2101      	movs	r1, #1
 80059b0:	2061      	movs	r0, #97	@ 0x61
 80059b2:	f7fb fa29 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80059b6:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 80059ba:	2090      	movs	r0, #144	@ 0x90
 80059bc:	f7fb fa24 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80059c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059c4:	2092      	movs	r0, #146	@ 0x92
 80059c6:	f7fb fa1f 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80059ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059ce:	2093      	movs	r0, #147	@ 0x93
 80059d0:	f7fb fa1a 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80059d4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80059d8:	20a0      	movs	r0, #160	@ 0xa0
 80059da:	f7fb fa15 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80059de:	2110      	movs	r1, #16
 80059e0:	20a3      	movs	r0, #163	@ 0xa3
 80059e2:	f7fb fa11 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80059e6:	2101      	movs	r1, #1
 80059e8:	2007      	movs	r0, #7
 80059ea:	f7fb fa0d 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80059ee:	2121      	movs	r1, #33	@ 0x21
 80059f0:	2007      	movs	r0, #7
 80059f2:	f7fb fa09 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80059f6:	2123      	movs	r1, #35	@ 0x23
 80059f8:	2007      	movs	r0, #7
 80059fa:	f7fb fa05 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80059fe:	2133      	movs	r1, #51	@ 0x33
 8005a00:	2007      	movs	r0, #7
 8005a02:	f7fb fa01 	bl	8000e08 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005a06:	f240 1133 	movw	r1, #307	@ 0x133
 8005a0a:	2007      	movs	r0, #7
 8005a0c:	f7fb f9fc 	bl	8000e08 <LCD_WriteReg>
 8005a10:	e3b0      	b.n	8006174 <LCD_Init+0x3e34>
 8005a12:	bf00      	nop
 8005a14:	20000080 	.word	0x20000080
	} else if (lcddev.id == 0X1963) {
 8005a18:	4ba8      	ldr	r3, [pc, #672]	@ (8005cbc <LCD_Init+0x397c>)
 8005a1a:	889b      	ldrh	r3, [r3, #4]
 8005a1c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8005a20:	4293      	cmp	r3, r2
 8005a22:	f040 83a7 	bne.w	8006174 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005a26:	20e2      	movs	r0, #226	@ 0xe2
 8005a28:	f7fb f962 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005a2c:	4ba4      	ldr	r3, [pc, #656]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	4ba2      	ldr	r3, [pc, #648]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a3a:	615a      	str	r2, [r3, #20]
 8005a3c:	4ba1      	ldr	r3, [pc, #644]	@ (8005cc4 <LCD_Init+0x3984>)
 8005a3e:	221d      	movs	r2, #29
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	4b9f      	ldr	r3, [pc, #636]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a44:	2280      	movs	r2, #128	@ 0x80
 8005a46:	615a      	str	r2, [r3, #20]
 8005a48:	4b9d      	ldr	r3, [pc, #628]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a4a:	2280      	movs	r2, #128	@ 0x80
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	4b9c      	ldr	r3, [pc, #624]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a54:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005a56:	4b9a      	ldr	r3, [pc, #616]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a5c:	611a      	str	r2, [r3, #16]
 8005a5e:	4b98      	ldr	r3, [pc, #608]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a64:	615a      	str	r2, [r3, #20]
 8005a66:	4b97      	ldr	r3, [pc, #604]	@ (8005cc4 <LCD_Init+0x3984>)
 8005a68:	2202      	movs	r2, #2
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	4b94      	ldr	r3, [pc, #592]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a6e:	2280      	movs	r2, #128	@ 0x80
 8005a70:	615a      	str	r2, [r3, #20]
 8005a72:	4b93      	ldr	r3, [pc, #588]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a74:	2280      	movs	r2, #128	@ 0x80
 8005a76:	611a      	str	r2, [r3, #16]
 8005a78:	4b91      	ldr	r3, [pc, #580]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005a80:	4b8f      	ldr	r3, [pc, #572]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a86:	611a      	str	r2, [r3, #16]
 8005a88:	4b8d      	ldr	r3, [pc, #564]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a8e:	615a      	str	r2, [r3, #20]
 8005a90:	4b8c      	ldr	r3, [pc, #560]	@ (8005cc4 <LCD_Init+0x3984>)
 8005a92:	2204      	movs	r2, #4
 8005a94:	60da      	str	r2, [r3, #12]
 8005a96:	4b8a      	ldr	r3, [pc, #552]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a98:	2280      	movs	r2, #128	@ 0x80
 8005a9a:	615a      	str	r2, [r3, #20]
 8005a9c:	4b88      	ldr	r3, [pc, #544]	@ (8005cc0 <LCD_Init+0x3980>)
 8005a9e:	2280      	movs	r2, #128	@ 0x80
 8005aa0:	611a      	str	r2, [r3, #16]
 8005aa2:	4b87      	ldr	r3, [pc, #540]	@ (8005cc0 <LCD_Init+0x3980>)
 8005aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aa8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005aaa:	2001      	movs	r0, #1
 8005aac:	f001 fed6 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005ab0:	20e0      	movs	r0, #224	@ 0xe0
 8005ab2:	f7fb f91d 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005ab6:	4b82      	ldr	r3, [pc, #520]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005abc:	611a      	str	r2, [r3, #16]
 8005abe:	4b80      	ldr	r3, [pc, #512]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ac4:	615a      	str	r2, [r3, #20]
 8005ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cc4 <LCD_Init+0x3984>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	60da      	str	r2, [r3, #12]
 8005acc:	4b7c      	ldr	r3, [pc, #496]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ace:	2280      	movs	r2, #128	@ 0x80
 8005ad0:	615a      	str	r2, [r3, #20]
 8005ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ad4:	2280      	movs	r2, #128	@ 0x80
 8005ad6:	611a      	str	r2, [r3, #16]
 8005ad8:	4b79      	ldr	r3, [pc, #484]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ade:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005ae0:	200a      	movs	r0, #10
 8005ae2:	f001 febb 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005ae6:	20e0      	movs	r0, #224	@ 0xe0
 8005ae8:	f7fb f902 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005aec:	4b74      	ldr	r3, [pc, #464]	@ (8005cc0 <LCD_Init+0x3980>)
 8005aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005af2:	611a      	str	r2, [r3, #16]
 8005af4:	4b72      	ldr	r3, [pc, #456]	@ (8005cc0 <LCD_Init+0x3980>)
 8005af6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005afa:	615a      	str	r2, [r3, #20]
 8005afc:	4b71      	ldr	r3, [pc, #452]	@ (8005cc4 <LCD_Init+0x3984>)
 8005afe:	2203      	movs	r2, #3
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	4b6f      	ldr	r3, [pc, #444]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b04:	2280      	movs	r2, #128	@ 0x80
 8005b06:	615a      	str	r2, [r3, #20]
 8005b08:	4b6d      	ldr	r3, [pc, #436]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b0a:	2280      	movs	r2, #128	@ 0x80
 8005b0c:	611a      	str	r2, [r3, #16]
 8005b0e:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b14:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8005b16:	200c      	movs	r0, #12
 8005b18:	f001 fea0 	bl	800785c <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	f7fb f8e7 	bl	8000cf0 <LCD_WR_REG>
		HAL_Delay(10);
 8005b22:	200a      	movs	r0, #10
 8005b24:	f001 fe9a 	bl	800785c <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005b28:	20e6      	movs	r0, #230	@ 0xe6
 8005b2a:	f7fb f8e1 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005b2e:	4b64      	ldr	r3, [pc, #400]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b34:	611a      	str	r2, [r3, #16]
 8005b36:	4b62      	ldr	r3, [pc, #392]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b3c:	615a      	str	r2, [r3, #20]
 8005b3e:	4b61      	ldr	r3, [pc, #388]	@ (8005cc4 <LCD_Init+0x3984>)
 8005b40:	222f      	movs	r2, #47	@ 0x2f
 8005b42:	60da      	str	r2, [r3, #12]
 8005b44:	4b5e      	ldr	r3, [pc, #376]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b46:	2280      	movs	r2, #128	@ 0x80
 8005b48:	615a      	str	r2, [r3, #20]
 8005b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b4c:	2280      	movs	r2, #128	@ 0x80
 8005b4e:	611a      	str	r2, [r3, #16]
 8005b50:	4b5b      	ldr	r3, [pc, #364]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b56:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005b58:	4b59      	ldr	r3, [pc, #356]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b5e:	611a      	str	r2, [r3, #16]
 8005b60:	4b57      	ldr	r3, [pc, #348]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b66:	615a      	str	r2, [r3, #20]
 8005b68:	4b56      	ldr	r3, [pc, #344]	@ (8005cc4 <LCD_Init+0x3984>)
 8005b6a:	22ff      	movs	r2, #255	@ 0xff
 8005b6c:	60da      	str	r2, [r3, #12]
 8005b6e:	4b54      	ldr	r3, [pc, #336]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b70:	2280      	movs	r2, #128	@ 0x80
 8005b72:	615a      	str	r2, [r3, #20]
 8005b74:	4b52      	ldr	r3, [pc, #328]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b76:	2280      	movs	r2, #128	@ 0x80
 8005b78:	611a      	str	r2, [r3, #16]
 8005b7a:	4b51      	ldr	r3, [pc, #324]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005b82:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b88:	611a      	str	r2, [r3, #16]
 8005b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b90:	615a      	str	r2, [r3, #20]
 8005b92:	4b4c      	ldr	r3, [pc, #304]	@ (8005cc4 <LCD_Init+0x3984>)
 8005b94:	22ff      	movs	r2, #255	@ 0xff
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	4b49      	ldr	r3, [pc, #292]	@ (8005cc0 <LCD_Init+0x3980>)
 8005b9a:	2280      	movs	r2, #128	@ 0x80
 8005b9c:	615a      	str	r2, [r3, #20]
 8005b9e:	4b48      	ldr	r3, [pc, #288]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ba0:	2280      	movs	r2, #128	@ 0x80
 8005ba2:	611a      	str	r2, [r3, #16]
 8005ba4:	4b46      	ldr	r3, [pc, #280]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005baa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005bac:	20b0      	movs	r0, #176	@ 0xb0
 8005bae:	f7fb f89f 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005bb2:	4b43      	ldr	r3, [pc, #268]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bb8:	611a      	str	r2, [r3, #16]
 8005bba:	4b41      	ldr	r3, [pc, #260]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bc0:	615a      	str	r2, [r3, #20]
 8005bc2:	4b40      	ldr	r3, [pc, #256]	@ (8005cc4 <LCD_Init+0x3984>)
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bca:	2280      	movs	r2, #128	@ 0x80
 8005bcc:	615a      	str	r2, [r3, #20]
 8005bce:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bd0:	2280      	movs	r2, #128	@ 0x80
 8005bd2:	611a      	str	r2, [r3, #16]
 8005bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bda:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005bdc:	4b38      	ldr	r3, [pc, #224]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be2:	611a      	str	r2, [r3, #16]
 8005be4:	4b36      	ldr	r3, [pc, #216]	@ (8005cc0 <LCD_Init+0x3980>)
 8005be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bea:	615a      	str	r2, [r3, #20]
 8005bec:	4b35      	ldr	r3, [pc, #212]	@ (8005cc4 <LCD_Init+0x3984>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	60da      	str	r2, [r3, #12]
 8005bf2:	4b33      	ldr	r3, [pc, #204]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bf4:	2280      	movs	r2, #128	@ 0x80
 8005bf6:	615a      	str	r2, [r3, #20]
 8005bf8:	4b31      	ldr	r3, [pc, #196]	@ (8005cc0 <LCD_Init+0x3980>)
 8005bfa:	2280      	movs	r2, #128	@ 0x80
 8005bfc:	611a      	str	r2, [r3, #16]
 8005bfe:	4b30      	ldr	r3, [pc, #192]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c04:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005c06:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c0c:	611a      	str	r2, [r3, #16]
 8005c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c14:	615a      	str	r2, [r3, #20]
 8005c16:	4b2b      	ldr	r3, [pc, #172]	@ (8005cc4 <LCD_Init+0x3984>)
 8005c18:	2203      	movs	r2, #3
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	4b28      	ldr	r3, [pc, #160]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c1e:	2280      	movs	r2, #128	@ 0x80
 8005c20:	615a      	str	r2, [r3, #20]
 8005c22:	4b27      	ldr	r3, [pc, #156]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c24:	2280      	movs	r2, #128	@ 0x80
 8005c26:	611a      	str	r2, [r3, #16]
 8005c28:	4b25      	ldr	r3, [pc, #148]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c2e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005c30:	4b23      	ldr	r3, [pc, #140]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c36:	611a      	str	r2, [r3, #16]
 8005c38:	4b21      	ldr	r3, [pc, #132]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c3e:	615a      	str	r2, [r3, #20]
 8005c40:	4b20      	ldr	r3, [pc, #128]	@ (8005cc4 <LCD_Init+0x3984>)
 8005c42:	f240 321f 	movw	r2, #799	@ 0x31f
 8005c46:	60da      	str	r2, [r3, #12]
 8005c48:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c4a:	2280      	movs	r2, #128	@ 0x80
 8005c4c:	615a      	str	r2, [r3, #20]
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c50:	2280      	movs	r2, #128	@ 0x80
 8005c52:	611a      	str	r2, [r3, #16]
 8005c54:	4b1a      	ldr	r3, [pc, #104]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c5a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005c5c:	4b18      	ldr	r3, [pc, #96]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c62:	611a      	str	r2, [r3, #16]
 8005c64:	4b16      	ldr	r3, [pc, #88]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c6a:	615a      	str	r2, [r3, #20]
 8005c6c:	4b15      	ldr	r3, [pc, #84]	@ (8005cc4 <LCD_Init+0x3984>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	60da      	str	r2, [r3, #12]
 8005c72:	4b13      	ldr	r3, [pc, #76]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c74:	2280      	movs	r2, #128	@ 0x80
 8005c76:	615a      	str	r2, [r3, #20]
 8005c78:	4b11      	ldr	r3, [pc, #68]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c7a:	2280      	movs	r2, #128	@ 0x80
 8005c7c:	611a      	str	r2, [r3, #16]
 8005c7e:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005c86:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c8c:	611a      	str	r2, [r3, #16]
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <LCD_Init+0x3980>)
 8005c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c94:	615a      	str	r2, [r3, #20]
 8005c96:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc4 <LCD_Init+0x3984>)
 8005c98:	f240 12df 	movw	r2, #479	@ 0x1df
 8005c9c:	60da      	str	r2, [r3, #12]
 8005c9e:	4b08      	ldr	r3, [pc, #32]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ca0:	2280      	movs	r2, #128	@ 0x80
 8005ca2:	615a      	str	r2, [r3, #20]
 8005ca4:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <LCD_Init+0x3980>)
 8005ca6:	2280      	movs	r2, #128	@ 0x80
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <LCD_Init+0x3980>)
 8005cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005cb2:	4b03      	ldr	r3, [pc, #12]	@ (8005cc0 <LCD_Init+0x3980>)
 8005cb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cb8:	e006      	b.n	8005cc8 <LCD_Init+0x3988>
 8005cba:	bf00      	nop
 8005cbc:	20000080 	.word	0x20000080
 8005cc0:	40011000 	.word	0x40011000
 8005cc4:	40010c00 	.word	0x40010c00
 8005cc8:	611a      	str	r2, [r3, #16]
 8005cca:	4ba3      	ldr	r3, [pc, #652]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cd0:	615a      	str	r2, [r3, #20]
 8005cd2:	4ba2      	ldr	r3, [pc, #648]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	60da      	str	r2, [r3, #12]
 8005cd8:	4b9f      	ldr	r3, [pc, #636]	@ (8005f58 <LCD_Init+0x3c18>)
 8005cda:	2280      	movs	r2, #128	@ 0x80
 8005cdc:	615a      	str	r2, [r3, #20]
 8005cde:	4b9e      	ldr	r3, [pc, #632]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ce0:	2280      	movs	r2, #128	@ 0x80
 8005ce2:	611a      	str	r2, [r3, #16]
 8005ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005cec:	20b4      	movs	r0, #180	@ 0xb4
 8005cee:	f7fa ffff 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005cf2:	4b99      	ldr	r3, [pc, #612]	@ (8005f58 <LCD_Init+0x3c18>)
 8005cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cf8:	611a      	str	r2, [r3, #16]
 8005cfa:	4b97      	ldr	r3, [pc, #604]	@ (8005f58 <LCD_Init+0x3c18>)
 8005cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d00:	615a      	str	r2, [r3, #20]
 8005d02:	4b96      	ldr	r3, [pc, #600]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005d04:	2204      	movs	r2, #4
 8005d06:	60da      	str	r2, [r3, #12]
 8005d08:	4b93      	ldr	r3, [pc, #588]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d0a:	2280      	movs	r2, #128	@ 0x80
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	4b92      	ldr	r3, [pc, #584]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d10:	2280      	movs	r2, #128	@ 0x80
 8005d12:	611a      	str	r2, [r3, #16]
 8005d14:	4b90      	ldr	r3, [pc, #576]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d22:	611a      	str	r2, [r3, #16]
 8005d24:	4b8c      	ldr	r3, [pc, #560]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d2a:	615a      	str	r2, [r3, #20]
 8005d2c:	4b8b      	ldr	r3, [pc, #556]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005d2e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8005d32:	60da      	str	r2, [r3, #12]
 8005d34:	4b88      	ldr	r3, [pc, #544]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d36:	2280      	movs	r2, #128	@ 0x80
 8005d38:	615a      	str	r2, [r3, #20]
 8005d3a:	4b87      	ldr	r3, [pc, #540]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d3c:	2280      	movs	r2, #128	@ 0x80
 8005d3e:	611a      	str	r2, [r3, #16]
 8005d40:	4b85      	ldr	r3, [pc, #532]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d46:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005d48:	4b83      	ldr	r3, [pc, #524]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d4e:	611a      	str	r2, [r3, #16]
 8005d50:	4b81      	ldr	r3, [pc, #516]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d56:	615a      	str	r2, [r3, #20]
 8005d58:	4b80      	ldr	r3, [pc, #512]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	4b7e      	ldr	r3, [pc, #504]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d60:	2280      	movs	r2, #128	@ 0x80
 8005d62:	615a      	str	r2, [r3, #20]
 8005d64:	4b7c      	ldr	r3, [pc, #496]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d66:	2280      	movs	r2, #128	@ 0x80
 8005d68:	611a      	str	r2, [r3, #16]
 8005d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d70:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005d72:	4b79      	ldr	r3, [pc, #484]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d78:	611a      	str	r2, [r3, #16]
 8005d7a:	4b77      	ldr	r3, [pc, #476]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d80:	615a      	str	r2, [r3, #20]
 8005d82:	4b76      	ldr	r3, [pc, #472]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005d84:	222e      	movs	r2, #46	@ 0x2e
 8005d86:	60da      	str	r2, [r3, #12]
 8005d88:	4b73      	ldr	r3, [pc, #460]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d8a:	2280      	movs	r2, #128	@ 0x80
 8005d8c:	615a      	str	r2, [r3, #20]
 8005d8e:	4b72      	ldr	r3, [pc, #456]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d90:	2280      	movs	r2, #128	@ 0x80
 8005d92:	611a      	str	r2, [r3, #16]
 8005d94:	4b70      	ldr	r3, [pc, #448]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005d9c:	4b6e      	ldr	r3, [pc, #440]	@ (8005f58 <LCD_Init+0x3c18>)
 8005d9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005da2:	611a      	str	r2, [r3, #16]
 8005da4:	4b6c      	ldr	r3, [pc, #432]	@ (8005f58 <LCD_Init+0x3c18>)
 8005da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005daa:	615a      	str	r2, [r3, #20]
 8005dac:	4b6b      	ldr	r3, [pc, #428]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	60da      	str	r2, [r3, #12]
 8005db2:	4b69      	ldr	r3, [pc, #420]	@ (8005f58 <LCD_Init+0x3c18>)
 8005db4:	2280      	movs	r2, #128	@ 0x80
 8005db6:	615a      	str	r2, [r3, #20]
 8005db8:	4b67      	ldr	r3, [pc, #412]	@ (8005f58 <LCD_Init+0x3c18>)
 8005dba:	2280      	movs	r2, #128	@ 0x80
 8005dbc:	611a      	str	r2, [r3, #16]
 8005dbe:	4b66      	ldr	r3, [pc, #408]	@ (8005f58 <LCD_Init+0x3c18>)
 8005dc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dc4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005dc6:	4b64      	ldr	r3, [pc, #400]	@ (8005f58 <LCD_Init+0x3c18>)
 8005dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dcc:	611a      	str	r2, [r3, #16]
 8005dce:	4b62      	ldr	r3, [pc, #392]	@ (8005f58 <LCD_Init+0x3c18>)
 8005dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd4:	615a      	str	r2, [r3, #20]
 8005dd6:	4b61      	ldr	r3, [pc, #388]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60da      	str	r2, [r3, #12]
 8005ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8005f58 <LCD_Init+0x3c18>)
 8005dde:	2280      	movs	r2, #128	@ 0x80
 8005de0:	615a      	str	r2, [r3, #20]
 8005de2:	4b5d      	ldr	r3, [pc, #372]	@ (8005f58 <LCD_Init+0x3c18>)
 8005de4:	2280      	movs	r2, #128	@ 0x80
 8005de6:	611a      	str	r2, [r3, #16]
 8005de8:	4b5b      	ldr	r3, [pc, #364]	@ (8005f58 <LCD_Init+0x3c18>)
 8005dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005df0:	4b59      	ldr	r3, [pc, #356]	@ (8005f58 <LCD_Init+0x3c18>)
 8005df2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005df6:	611a      	str	r2, [r3, #16]
 8005df8:	4b57      	ldr	r3, [pc, #348]	@ (8005f58 <LCD_Init+0x3c18>)
 8005dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dfe:	615a      	str	r2, [r3, #20]
 8005e00:	4b56      	ldr	r3, [pc, #344]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	4b54      	ldr	r3, [pc, #336]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e08:	2280      	movs	r2, #128	@ 0x80
 8005e0a:	615a      	str	r2, [r3, #20]
 8005e0c:	4b52      	ldr	r3, [pc, #328]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e0e:	2280      	movs	r2, #128	@ 0x80
 8005e10:	611a      	str	r2, [r3, #16]
 8005e12:	4b51      	ldr	r3, [pc, #324]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e18:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e20:	611a      	str	r2, [r3, #16]
 8005e22:	4b4d      	ldr	r3, [pc, #308]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e28:	615a      	str	r2, [r3, #20]
 8005e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	60da      	str	r2, [r3, #12]
 8005e30:	4b49      	ldr	r3, [pc, #292]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e32:	2280      	movs	r2, #128	@ 0x80
 8005e34:	615a      	str	r2, [r3, #20]
 8005e36:	4b48      	ldr	r3, [pc, #288]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e38:	2280      	movs	r2, #128	@ 0x80
 8005e3a:	611a      	str	r2, [r3, #16]
 8005e3c:	4b46      	ldr	r3, [pc, #280]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e42:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005e44:	20b6      	movs	r0, #182	@ 0xb6
 8005e46:	f7fa ff53 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005e4a:	4b43      	ldr	r3, [pc, #268]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e50:	611a      	str	r2, [r3, #16]
 8005e52:	4b41      	ldr	r3, [pc, #260]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e58:	615a      	str	r2, [r3, #20]
 8005e5a:	4b40      	ldr	r3, [pc, #256]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	4b3d      	ldr	r3, [pc, #244]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e62:	2280      	movs	r2, #128	@ 0x80
 8005e64:	615a      	str	r2, [r3, #20]
 8005e66:	4b3c      	ldr	r3, [pc, #240]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e68:	2280      	movs	r2, #128	@ 0x80
 8005e6a:	611a      	str	r2, [r3, #16]
 8005e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e72:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005e74:	4b38      	ldr	r3, [pc, #224]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e7a:	611a      	str	r2, [r3, #16]
 8005e7c:	4b36      	ldr	r3, [pc, #216]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e82:	615a      	str	r2, [r3, #20]
 8005e84:	4b35      	ldr	r3, [pc, #212]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005e86:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8005e8a:	60da      	str	r2, [r3, #12]
 8005e8c:	4b32      	ldr	r3, [pc, #200]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e8e:	2280      	movs	r2, #128	@ 0x80
 8005e90:	615a      	str	r2, [r3, #20]
 8005e92:	4b31      	ldr	r3, [pc, #196]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e94:	2280      	movs	r2, #128	@ 0x80
 8005e96:	611a      	str	r2, [r3, #16]
 8005e98:	4b2f      	ldr	r3, [pc, #188]	@ (8005f58 <LCD_Init+0x3c18>)
 8005e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e9e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ea2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ea6:	611a      	str	r2, [r3, #16]
 8005ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8005f58 <LCD_Init+0x3c18>)
 8005eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eae:	615a      	str	r2, [r3, #20]
 8005eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	4b28      	ldr	r3, [pc, #160]	@ (8005f58 <LCD_Init+0x3c18>)
 8005eb8:	2280      	movs	r2, #128	@ 0x80
 8005eba:	615a      	str	r2, [r3, #20]
 8005ebc:	4b26      	ldr	r3, [pc, #152]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ebe:	2280      	movs	r2, #128	@ 0x80
 8005ec0:	611a      	str	r2, [r3, #16]
 8005ec2:	4b25      	ldr	r3, [pc, #148]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ec8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005eca:	4b23      	ldr	r3, [pc, #140]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ecc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ed0:	611a      	str	r2, [r3, #16]
 8005ed2:	4b21      	ldr	r3, [pc, #132]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ed8:	615a      	str	r2, [r3, #20]
 8005eda:	4b20      	ldr	r3, [pc, #128]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005edc:	2217      	movs	r2, #23
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ee2:	2280      	movs	r2, #128	@ 0x80
 8005ee4:	615a      	str	r2, [r3, #20]
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ee8:	2280      	movs	r2, #128	@ 0x80
 8005eea:	611a      	str	r2, [r3, #16]
 8005eec:	4b1a      	ldr	r3, [pc, #104]	@ (8005f58 <LCD_Init+0x3c18>)
 8005eee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ef2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005ef4:	4b18      	ldr	r3, [pc, #96]	@ (8005f58 <LCD_Init+0x3c18>)
 8005ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005efa:	611a      	str	r2, [r3, #16]
 8005efc:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <LCD_Init+0x3c18>)
 8005efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f02:	615a      	str	r2, [r3, #20]
 8005f04:	4b15      	ldr	r3, [pc, #84]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005f06:	2215      	movs	r2, #21
 8005f08:	60da      	str	r2, [r3, #12]
 8005f0a:	4b13      	ldr	r3, [pc, #76]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f0c:	2280      	movs	r2, #128	@ 0x80
 8005f0e:	615a      	str	r2, [r3, #20]
 8005f10:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f12:	2280      	movs	r2, #128	@ 0x80
 8005f14:	611a      	str	r2, [r3, #16]
 8005f16:	4b10      	ldr	r3, [pc, #64]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f1c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f24:	611a      	str	r2, [r3, #16]
 8005f26:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f2c:	615a      	str	r2, [r3, #20]
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f5c <LCD_Init+0x3c1c>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	60da      	str	r2, [r3, #12]
 8005f34:	4b08      	ldr	r3, [pc, #32]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f36:	2280      	movs	r2, #128	@ 0x80
 8005f38:	615a      	str	r2, [r3, #20]
 8005f3a:	4b07      	ldr	r3, [pc, #28]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f3c:	2280      	movs	r2, #128	@ 0x80
 8005f3e:	611a      	str	r2, [r3, #16]
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f46:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005f48:	4b03      	ldr	r3, [pc, #12]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f4e:	611a      	str	r2, [r3, #16]
 8005f50:	4b01      	ldr	r3, [pc, #4]	@ (8005f58 <LCD_Init+0x3c18>)
 8005f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f56:	e003      	b.n	8005f60 <LCD_Init+0x3c20>
 8005f58:	40011000 	.word	0x40011000
 8005f5c:	40010c00 	.word	0x40010c00
 8005f60:	615a      	str	r2, [r3, #20]
 8005f62:	4b8b      	ldr	r3, [pc, #556]	@ (8006190 <LCD_Init+0x3e50>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	60da      	str	r2, [r3, #12]
 8005f68:	4b8a      	ldr	r3, [pc, #552]	@ (8006194 <LCD_Init+0x3e54>)
 8005f6a:	2280      	movs	r2, #128	@ 0x80
 8005f6c:	615a      	str	r2, [r3, #20]
 8005f6e:	4b89      	ldr	r3, [pc, #548]	@ (8006194 <LCD_Init+0x3e54>)
 8005f70:	2280      	movs	r2, #128	@ 0x80
 8005f72:	611a      	str	r2, [r3, #16]
 8005f74:	4b87      	ldr	r3, [pc, #540]	@ (8006194 <LCD_Init+0x3e54>)
 8005f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f7a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005f7c:	20f0      	movs	r0, #240	@ 0xf0
 8005f7e:	f7fa feb7 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005f82:	4b84      	ldr	r3, [pc, #528]	@ (8006194 <LCD_Init+0x3e54>)
 8005f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f88:	611a      	str	r2, [r3, #16]
 8005f8a:	4b82      	ldr	r3, [pc, #520]	@ (8006194 <LCD_Init+0x3e54>)
 8005f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f90:	615a      	str	r2, [r3, #20]
 8005f92:	4b7f      	ldr	r3, [pc, #508]	@ (8006190 <LCD_Init+0x3e50>)
 8005f94:	2203      	movs	r2, #3
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	4b7e      	ldr	r3, [pc, #504]	@ (8006194 <LCD_Init+0x3e54>)
 8005f9a:	2280      	movs	r2, #128	@ 0x80
 8005f9c:	615a      	str	r2, [r3, #20]
 8005f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8006194 <LCD_Init+0x3e54>)
 8005fa0:	2280      	movs	r2, #128	@ 0x80
 8005fa2:	611a      	str	r2, [r3, #16]
 8005fa4:	4b7b      	ldr	r3, [pc, #492]	@ (8006194 <LCD_Init+0x3e54>)
 8005fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005faa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005fac:	2029      	movs	r0, #41	@ 0x29
 8005fae:	f7fa fe9f 	bl	8000cf0 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005fb2:	20d0      	movs	r0, #208	@ 0xd0
 8005fb4:	f7fa fe9c 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005fb8:	4b76      	ldr	r3, [pc, #472]	@ (8006194 <LCD_Init+0x3e54>)
 8005fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fbe:	611a      	str	r2, [r3, #16]
 8005fc0:	4b74      	ldr	r3, [pc, #464]	@ (8006194 <LCD_Init+0x3e54>)
 8005fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fc6:	615a      	str	r2, [r3, #20]
 8005fc8:	4b71      	ldr	r3, [pc, #452]	@ (8006190 <LCD_Init+0x3e50>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	4b71      	ldr	r3, [pc, #452]	@ (8006194 <LCD_Init+0x3e54>)
 8005fd0:	2280      	movs	r2, #128	@ 0x80
 8005fd2:	615a      	str	r2, [r3, #20]
 8005fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8006194 <LCD_Init+0x3e54>)
 8005fd6:	2280      	movs	r2, #128	@ 0x80
 8005fd8:	611a      	str	r2, [r3, #16]
 8005fda:	4b6e      	ldr	r3, [pc, #440]	@ (8006194 <LCD_Init+0x3e54>)
 8005fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005fe2:	20be      	movs	r0, #190	@ 0xbe
 8005fe4:	f7fa fe84 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8006194 <LCD_Init+0x3e54>)
 8005fea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fee:	611a      	str	r2, [r3, #16]
 8005ff0:	4b68      	ldr	r3, [pc, #416]	@ (8006194 <LCD_Init+0x3e54>)
 8005ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ff6:	615a      	str	r2, [r3, #20]
 8005ff8:	4b65      	ldr	r3, [pc, #404]	@ (8006190 <LCD_Init+0x3e50>)
 8005ffa:	2205      	movs	r2, #5
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	4b65      	ldr	r3, [pc, #404]	@ (8006194 <LCD_Init+0x3e54>)
 8006000:	2280      	movs	r2, #128	@ 0x80
 8006002:	615a      	str	r2, [r3, #20]
 8006004:	4b63      	ldr	r3, [pc, #396]	@ (8006194 <LCD_Init+0x3e54>)
 8006006:	2280      	movs	r2, #128	@ 0x80
 8006008:	611a      	str	r2, [r3, #16]
 800600a:	4b62      	ldr	r3, [pc, #392]	@ (8006194 <LCD_Init+0x3e54>)
 800600c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006010:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8006012:	4b60      	ldr	r3, [pc, #384]	@ (8006194 <LCD_Init+0x3e54>)
 8006014:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006018:	611a      	str	r2, [r3, #16]
 800601a:	4b5e      	ldr	r3, [pc, #376]	@ (8006194 <LCD_Init+0x3e54>)
 800601c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006020:	615a      	str	r2, [r3, #20]
 8006022:	4b5b      	ldr	r3, [pc, #364]	@ (8006190 <LCD_Init+0x3e50>)
 8006024:	22fe      	movs	r2, #254	@ 0xfe
 8006026:	60da      	str	r2, [r3, #12]
 8006028:	4b5a      	ldr	r3, [pc, #360]	@ (8006194 <LCD_Init+0x3e54>)
 800602a:	2280      	movs	r2, #128	@ 0x80
 800602c:	615a      	str	r2, [r3, #20]
 800602e:	4b59      	ldr	r3, [pc, #356]	@ (8006194 <LCD_Init+0x3e54>)
 8006030:	2280      	movs	r2, #128	@ 0x80
 8006032:	611a      	str	r2, [r3, #16]
 8006034:	4b57      	ldr	r3, [pc, #348]	@ (8006194 <LCD_Init+0x3e54>)
 8006036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800603a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 800603c:	4b55      	ldr	r3, [pc, #340]	@ (8006194 <LCD_Init+0x3e54>)
 800603e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006042:	611a      	str	r2, [r3, #16]
 8006044:	4b53      	ldr	r3, [pc, #332]	@ (8006194 <LCD_Init+0x3e54>)
 8006046:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800604a:	615a      	str	r2, [r3, #20]
 800604c:	4b50      	ldr	r3, [pc, #320]	@ (8006190 <LCD_Init+0x3e50>)
 800604e:	2201      	movs	r2, #1
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	4b50      	ldr	r3, [pc, #320]	@ (8006194 <LCD_Init+0x3e54>)
 8006054:	2280      	movs	r2, #128	@ 0x80
 8006056:	615a      	str	r2, [r3, #20]
 8006058:	4b4e      	ldr	r3, [pc, #312]	@ (8006194 <LCD_Init+0x3e54>)
 800605a:	2280      	movs	r2, #128	@ 0x80
 800605c:	611a      	str	r2, [r3, #16]
 800605e:	4b4d      	ldr	r3, [pc, #308]	@ (8006194 <LCD_Init+0x3e54>)
 8006060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006064:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8006066:	4b4b      	ldr	r3, [pc, #300]	@ (8006194 <LCD_Init+0x3e54>)
 8006068:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800606c:	611a      	str	r2, [r3, #16]
 800606e:	4b49      	ldr	r3, [pc, #292]	@ (8006194 <LCD_Init+0x3e54>)
 8006070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006074:	615a      	str	r2, [r3, #20]
 8006076:	4b46      	ldr	r3, [pc, #280]	@ (8006190 <LCD_Init+0x3e50>)
 8006078:	2200      	movs	r2, #0
 800607a:	60da      	str	r2, [r3, #12]
 800607c:	4b45      	ldr	r3, [pc, #276]	@ (8006194 <LCD_Init+0x3e54>)
 800607e:	2280      	movs	r2, #128	@ 0x80
 8006080:	615a      	str	r2, [r3, #20]
 8006082:	4b44      	ldr	r3, [pc, #272]	@ (8006194 <LCD_Init+0x3e54>)
 8006084:	2280      	movs	r2, #128	@ 0x80
 8006086:	611a      	str	r2, [r3, #16]
 8006088:	4b42      	ldr	r3, [pc, #264]	@ (8006194 <LCD_Init+0x3e54>)
 800608a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800608e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8006090:	4b40      	ldr	r3, [pc, #256]	@ (8006194 <LCD_Init+0x3e54>)
 8006092:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006096:	611a      	str	r2, [r3, #16]
 8006098:	4b3e      	ldr	r3, [pc, #248]	@ (8006194 <LCD_Init+0x3e54>)
 800609a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800609e:	615a      	str	r2, [r3, #20]
 80060a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006190 <LCD_Init+0x3e50>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006194 <LCD_Init+0x3e54>)
 80060a8:	2280      	movs	r2, #128	@ 0x80
 80060aa:	615a      	str	r2, [r3, #20]
 80060ac:	4b39      	ldr	r3, [pc, #228]	@ (8006194 <LCD_Init+0x3e54>)
 80060ae:	2280      	movs	r2, #128	@ 0x80
 80060b0:	611a      	str	r2, [r3, #16]
 80060b2:	4b38      	ldr	r3, [pc, #224]	@ (8006194 <LCD_Init+0x3e54>)
 80060b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 80060ba:	4b36      	ldr	r3, [pc, #216]	@ (8006194 <LCD_Init+0x3e54>)
 80060bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060c0:	611a      	str	r2, [r3, #16]
 80060c2:	4b34      	ldr	r3, [pc, #208]	@ (8006194 <LCD_Init+0x3e54>)
 80060c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c8:	615a      	str	r2, [r3, #20]
 80060ca:	4b31      	ldr	r3, [pc, #196]	@ (8006190 <LCD_Init+0x3e50>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	60da      	str	r2, [r3, #12]
 80060d0:	4b30      	ldr	r3, [pc, #192]	@ (8006194 <LCD_Init+0x3e54>)
 80060d2:	2280      	movs	r2, #128	@ 0x80
 80060d4:	615a      	str	r2, [r3, #20]
 80060d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006194 <LCD_Init+0x3e54>)
 80060d8:	2280      	movs	r2, #128	@ 0x80
 80060da:	611a      	str	r2, [r3, #16]
 80060dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006194 <LCD_Init+0x3e54>)
 80060de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060e2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80060e4:	20b8      	movs	r0, #184	@ 0xb8
 80060e6:	f7fa fe03 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80060ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006194 <LCD_Init+0x3e54>)
 80060ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	4b28      	ldr	r3, [pc, #160]	@ (8006194 <LCD_Init+0x3e54>)
 80060f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060f8:	615a      	str	r2, [r3, #20]
 80060fa:	4b25      	ldr	r3, [pc, #148]	@ (8006190 <LCD_Init+0x3e50>)
 80060fc:	2203      	movs	r2, #3
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	4b24      	ldr	r3, [pc, #144]	@ (8006194 <LCD_Init+0x3e54>)
 8006102:	2280      	movs	r2, #128	@ 0x80
 8006104:	615a      	str	r2, [r3, #20]
 8006106:	4b23      	ldr	r3, [pc, #140]	@ (8006194 <LCD_Init+0x3e54>)
 8006108:	2280      	movs	r2, #128	@ 0x80
 800610a:	611a      	str	r2, [r3, #16]
 800610c:	4b21      	ldr	r3, [pc, #132]	@ (8006194 <LCD_Init+0x3e54>)
 800610e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006112:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8006114:	4b1f      	ldr	r3, [pc, #124]	@ (8006194 <LCD_Init+0x3e54>)
 8006116:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800611a:	611a      	str	r2, [r3, #16]
 800611c:	4b1d      	ldr	r3, [pc, #116]	@ (8006194 <LCD_Init+0x3e54>)
 800611e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006122:	615a      	str	r2, [r3, #20]
 8006124:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <LCD_Init+0x3e50>)
 8006126:	2201      	movs	r2, #1
 8006128:	60da      	str	r2, [r3, #12]
 800612a:	4b1a      	ldr	r3, [pc, #104]	@ (8006194 <LCD_Init+0x3e54>)
 800612c:	2280      	movs	r2, #128	@ 0x80
 800612e:	615a      	str	r2, [r3, #20]
 8006130:	4b18      	ldr	r3, [pc, #96]	@ (8006194 <LCD_Init+0x3e54>)
 8006132:	2280      	movs	r2, #128	@ 0x80
 8006134:	611a      	str	r2, [r3, #16]
 8006136:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <LCD_Init+0x3e54>)
 8006138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800613c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 800613e:	20ba      	movs	r0, #186	@ 0xba
 8006140:	f7fa fdd6 	bl	8000cf0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8006144:	4b13      	ldr	r3, [pc, #76]	@ (8006194 <LCD_Init+0x3e54>)
 8006146:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800614a:	611a      	str	r2, [r3, #16]
 800614c:	4b11      	ldr	r3, [pc, #68]	@ (8006194 <LCD_Init+0x3e54>)
 800614e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006152:	615a      	str	r2, [r3, #20]
 8006154:	4b0e      	ldr	r3, [pc, #56]	@ (8006190 <LCD_Init+0x3e50>)
 8006156:	2201      	movs	r2, #1
 8006158:	60da      	str	r2, [r3, #12]
 800615a:	4b0e      	ldr	r3, [pc, #56]	@ (8006194 <LCD_Init+0x3e54>)
 800615c:	2280      	movs	r2, #128	@ 0x80
 800615e:	615a      	str	r2, [r3, #20]
 8006160:	4b0c      	ldr	r3, [pc, #48]	@ (8006194 <LCD_Init+0x3e54>)
 8006162:	2280      	movs	r2, #128	@ 0x80
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <LCD_Init+0x3e54>)
 8006168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800616c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 800616e:	2064      	movs	r0, #100	@ 0x64
 8006170:	f7fb ff36 	bl	8001fe0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8006174:	2000      	movs	r0, #0
 8006176:	f7fb ffd7 	bl	8002128 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 800617a:	4b07      	ldr	r3, [pc, #28]	@ (8006198 <LCD_Init+0x3e58>)
 800617c:	2201      	movs	r2, #1
 800617e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8006180:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006184:	f000 f80a 	bl	800619c <LCD_Clear>
}
 8006188:	bf00      	nop
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40010c00 	.word	0x40010c00
 8006194:	40011000 	.word	0x40011000
 8006198:	422201a8 	.word	0x422201a8

0800619c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	4603      	mov	r3, r0
 80061a4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80061aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006254 <LCD_Clear+0xb8>)
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 80061b0:	4b28      	ldr	r3, [pc, #160]	@ (8006254 <LCD_Clear+0xb8>)
 80061b2:	885b      	ldrh	r3, [r3, #2]
 80061b4:	461a      	mov	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	fb02 f303 	mul.w	r3, r2, r3
 80061bc:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 80061be:	4b25      	ldr	r3, [pc, #148]	@ (8006254 <LCD_Clear+0xb8>)
 80061c0:	889b      	ldrh	r3, [r3, #4]
 80061c2:	f646 0204 	movw	r2, #26628	@ 0x6804
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d11a      	bne.n	8006200 <LCD_Clear+0x64>
 80061ca:	4b22      	ldr	r3, [pc, #136]	@ (8006254 <LCD_Clear+0xb8>)
 80061cc:	799b      	ldrb	r3, [r3, #6]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d116      	bne.n	8006200 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 80061d2:	4b20      	ldr	r3, [pc, #128]	@ (8006254 <LCD_Clear+0xb8>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80061d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006254 <LCD_Clear+0xb8>)
 80061da:	222a      	movs	r2, #42	@ 0x2a
 80061dc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80061de:	4b1d      	ldr	r3, [pc, #116]	@ (8006254 <LCD_Clear+0xb8>)
 80061e0:	222b      	movs	r2, #43	@ 0x2b
 80061e2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 80061e4:	2100      	movs	r1, #0
 80061e6:	2000      	movs	r0, #0
 80061e8:	f7fa fe54 	bl	8000e94 <LCD_SetCursor>
		lcddev.dir = 1;
 80061ec:	4b19      	ldr	r3, [pc, #100]	@ (8006254 <LCD_Clear+0xb8>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80061f2:	4b18      	ldr	r3, [pc, #96]	@ (8006254 <LCD_Clear+0xb8>)
 80061f4:	222b      	movs	r2, #43	@ 0x2b
 80061f6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80061f8:	4b16      	ldr	r3, [pc, #88]	@ (8006254 <LCD_Clear+0xb8>)
 80061fa:	222a      	movs	r2, #42	@ 0x2a
 80061fc:	819a      	strh	r2, [r3, #12]
 80061fe:	e003      	b.n	8006208 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006200:	2100      	movs	r1, #0
 8006202:	2000      	movs	r0, #0
 8006204:	f7fa fe46 	bl	8000e94 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006208:	f7fa fe38 	bl	8000e7c <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	e017      	b.n	8006242 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8006212:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <LCD_Clear+0xbc>)
 8006214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <LCD_Clear+0xbc>)
 800621c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006220:	615a      	str	r2, [r3, #20]
 8006222:	4a0e      	ldr	r2, [pc, #56]	@ (800625c <LCD_Clear+0xc0>)
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	60d3      	str	r3, [r2, #12]
 8006228:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <LCD_Clear+0xbc>)
 800622a:	2280      	movs	r2, #128	@ 0x80
 800622c:	615a      	str	r2, [r3, #20]
 800622e:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <LCD_Clear+0xbc>)
 8006230:	2280      	movs	r2, #128	@ 0x80
 8006232:	611a      	str	r2, [r3, #16]
 8006234:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <LCD_Clear+0xbc>)
 8006236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800623a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	429a      	cmp	r2, r3
 8006248:	d3e3      	bcc.n	8006212 <LCD_Clear+0x76>
}
 800624a:	bf00      	nop
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000080 	.word	0x20000080
 8006258:	40011000 	.word	0x40011000
 800625c:	40010c00 	.word	0x40010c00

08006260 <LCD_Color_Fill>:
	}
}
// Fill the area with color
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
void LCD_Color_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t *color) {
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4623      	mov	r3, r4
 8006270:	80fb      	strh	r3, [r7, #6]
 8006272:	4603      	mov	r3, r0
 8006274:	80bb      	strh	r3, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	807b      	strh	r3, [r7, #2]
 800627a:	4613      	mov	r3, r2
 800627c:	803b      	strh	r3, [r7, #0]
	uint16_t height, width;
	uint16_t i, j;
	width = ex - sx + 1; 			//得到填充的宽度
 800627e:	887a      	ldrh	r2, [r7, #2]
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	b29b      	uxth	r3, r3
 8006286:	3301      	adds	r3, #1
 8006288:	817b      	strh	r3, [r7, #10]
	height = ey - sy + 1;			//高度
 800628a:	883a      	ldrh	r2, [r7, #0]
 800628c:	88bb      	ldrh	r3, [r7, #4]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	b29b      	uxth	r3, r3
 8006292:	3301      	adds	r3, #1
 8006294:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 8006296:	2300      	movs	r3, #0
 8006298:	81fb      	strh	r3, [r7, #14]
 800629a:	e035      	b.n	8006308 <LCD_Color_Fill+0xa8>
		LCD_SetCursor(sx, sy + i);   	//设置光标位置
 800629c:	88ba      	ldrh	r2, [r7, #4]
 800629e:	89fb      	ldrh	r3, [r7, #14]
 80062a0:	4413      	add	r3, r2
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	88fb      	ldrh	r3, [r7, #6]
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fa fdf3 	bl	8000e94 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     //开始写入GRAM
 80062ae:	f7fa fde5 	bl	8000e7c <LCD_WriteRAM_Prepare>
		for (j = 0; j < width; j++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	81bb      	strh	r3, [r7, #12]
 80062b6:	e020      	b.n	80062fa <LCD_Color_Fill+0x9a>
			LCD_WR_DATA(color[i * width + j]);     //写入数据
 80062b8:	4b18      	ldr	r3, [pc, #96]	@ (800631c <LCD_Color_Fill+0xbc>)
 80062ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062be:	611a      	str	r2, [r3, #16]
 80062c0:	4b16      	ldr	r3, [pc, #88]	@ (800631c <LCD_Color_Fill+0xbc>)
 80062c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c6:	615a      	str	r2, [r3, #20]
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	897a      	ldrh	r2, [r7, #10]
 80062cc:	fb03 f202 	mul.w	r2, r3, r2
 80062d0:	89bb      	ldrh	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	6a3a      	ldr	r2, [r7, #32]
 80062d8:	4413      	add	r3, r2
 80062da:	881a      	ldrh	r2, [r3, #0]
 80062dc:	4b10      	ldr	r3, [pc, #64]	@ (8006320 <LCD_Color_Fill+0xc0>)
 80062de:	60da      	str	r2, [r3, #12]
 80062e0:	4b0e      	ldr	r3, [pc, #56]	@ (800631c <LCD_Color_Fill+0xbc>)
 80062e2:	2280      	movs	r2, #128	@ 0x80
 80062e4:	615a      	str	r2, [r3, #20]
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <LCD_Color_Fill+0xbc>)
 80062e8:	2280      	movs	r2, #128	@ 0x80
 80062ea:	611a      	str	r2, [r3, #16]
 80062ec:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <LCD_Color_Fill+0xbc>)
 80062ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062f2:	611a      	str	r2, [r3, #16]
		for (j = 0; j < width; j++)
 80062f4:	89bb      	ldrh	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	81bb      	strh	r3, [r7, #12]
 80062fa:	89ba      	ldrh	r2, [r7, #12]
 80062fc:	897b      	ldrh	r3, [r7, #10]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d3da      	bcc.n	80062b8 <LCD_Color_Fill+0x58>
	for (i = 0; i < height; i++) {
 8006302:	89fb      	ldrh	r3, [r7, #14]
 8006304:	3301      	adds	r3, #1
 8006306:	81fb      	strh	r3, [r7, #14]
 8006308:	89fa      	ldrh	r2, [r7, #14]
 800630a:	893b      	ldrh	r3, [r7, #8]
 800630c:	429a      	cmp	r2, r3
 800630e:	d3c5      	bcc.n	800629c <LCD_Color_Fill+0x3c>
	}
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	bd90      	pop	{r4, r7, pc}
 800631a:	bf00      	nop
 800631c:	40011000 	.word	0x40011000
 8006320:	40010c00 	.word	0x40010c00

08006324 <LCD_DrawLine>:
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b08d      	sub	sp, #52	@ 0x34
 8006328:	af00      	add	r7, sp, #0
 800632a:	4604      	mov	r4, r0
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	461a      	mov	r2, r3
 8006332:	4623      	mov	r3, r4
 8006334:	80fb      	strh	r3, [r7, #6]
 8006336:	4603      	mov	r3, r0
 8006338:	80bb      	strh	r3, [r7, #4]
 800633a:	460b      	mov	r3, r1
 800633c:	807b      	strh	r3, [r7, #2]
 800633e:	4613      	mov	r3, r2
 8006340:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8006342:	2300      	movs	r3, #0
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006346:	2300      	movs	r3, #0
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8006352:	883a      	ldrh	r2, [r7, #0]
 8006354:	88bb      	ldrh	r3, [r7, #4]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 800635e:	88bb      	ldrh	r3, [r7, #4]
 8006360:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd02      	ble.n	800636e <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8006368:	2301      	movs	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e00b      	b.n	8006386 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
 8006378:	e005      	b.n	8006386 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 800637a:	f04f 33ff 	mov.w	r3, #4294967295
 800637e:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	425b      	negs	r3, r3
 8006384:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	dd02      	ble.n	8006392 <LCD_DrawLine+0x6e>
		incy = 1;
 800638c:	2301      	movs	r3, #1
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	e00b      	b.n	80063aa <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8006398:	2300      	movs	r3, #0
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	e005      	b.n	80063aa <LCD_DrawLine+0x86>
	else {
		incy = -1;
 800639e:	f04f 33ff 	mov.w	r3, #4294967295
 80063a2:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	425b      	negs	r3, r3
 80063a8:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	dd02      	ble.n	80063b8 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	e001      	b.n	80063bc <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 80063bc:	2300      	movs	r3, #0
 80063be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80063c0:	e02a      	b.n	8006418 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	b292      	uxth	r2, r2
 80063ca:	4611      	mov	r1, r2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fb fb3f 	bl	8001a50 <LCD_DrawPoint>
		xerr += delta_x;
 80063d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr += delta_y;
 80063da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	4413      	add	r3, r2
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (xerr > distance) {
 80063e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	dd07      	ble.n	80063fa <LCD_DrawLine+0xd6>
			xerr -= distance;
 80063ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow += incx;
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	429a      	cmp	r2, r3
 8006400:	dd07      	ble.n	8006412 <LCD_DrawLine+0xee>
			yerr -= distance;
 8006402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol += incy;
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8006412:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006414:	3301      	adds	r3, #1
 8006416:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006418:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	3301      	adds	r3, #1
 800641e:	429a      	cmp	r2, r3
 8006420:	ddcf      	ble.n	80063c2 <LCD_DrawLine+0x9e>
		}
	}
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	3734      	adds	r7, #52	@ 0x34
 8006428:	46bd      	mov	sp, r7
 800642a:	bd90      	pop	{r4, r7, pc}

0800642c <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 800642c:	b590      	push	{r4, r7, lr}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4623      	mov	r3, r4
 800643c:	80fb      	strh	r3, [r7, #6]
 800643e:	4603      	mov	r3, r0
 8006440:	80bb      	strh	r3, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
 8006446:	4613      	mov	r3, r2
 8006448:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800644a:	88bb      	ldrh	r3, [r7, #4]
 800644c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800644e:	78bb      	ldrb	r3, [r7, #2]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	78bb      	ldrb	r3, [r7, #2]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	bf14      	ite	ne
 8006462:	2301      	movne	r3, #1
 8006464:	2300      	moveq	r3, #0
 8006466:	b2db      	uxtb	r3, r3
 8006468:	4413      	add	r3, r2
 800646a:	b2db      	uxtb	r3, r3
 800646c:	78ba      	ldrb	r2, [r7, #2]
 800646e:	0852      	lsrs	r2, r2, #1
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	3b20      	subs	r3, #32
 800647c:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 800647e:	2300      	movs	r3, #0
 8006480:	737b      	strb	r3, [r7, #13]
 8006482:	e069      	b.n	8006558 <LCD_ShowChar+0x12c>
		if (size == 12)
 8006484:	78bb      	ldrb	r3, [r7, #2]
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d10b      	bne.n	80064a2 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 800648a:	78fa      	ldrb	r2, [r7, #3]
 800648c:	7b79      	ldrb	r1, [r7, #13]
 800648e:	4838      	ldr	r0, [pc, #224]	@ (8006570 <LCD_ShowChar+0x144>)
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4403      	add	r3, r0
 800649a:	440b      	add	r3, r1
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	73fb      	strb	r3, [r7, #15]
 80064a0:	e019      	b.n	80064d6 <LCD_ShowChar+0xaa>
		else if (size == 16)
 80064a2:	78bb      	ldrb	r3, [r7, #2]
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d108      	bne.n	80064ba <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	7b7b      	ldrb	r3, [r7, #13]
 80064ac:	4931      	ldr	r1, [pc, #196]	@ (8006574 <LCD_ShowChar+0x148>)
 80064ae:	0112      	lsls	r2, r2, #4
 80064b0:	440a      	add	r2, r1
 80064b2:	4413      	add	r3, r2
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	73fb      	strb	r3, [r7, #15]
 80064b8:	e00d      	b.n	80064d6 <LCD_ShowChar+0xaa>
		else if (size == 24)
 80064ba:	78bb      	ldrb	r3, [r7, #2]
 80064bc:	2b18      	cmp	r3, #24
 80064be:	d150      	bne.n	8006562 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	7b79      	ldrb	r1, [r7, #13]
 80064c4:	482c      	ldr	r0, [pc, #176]	@ (8006578 <LCD_ShowChar+0x14c>)
 80064c6:	4613      	mov	r3, r2
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4403      	add	r3, r0
 80064d0:	440b      	add	r3, r1
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80064d6:	2300      	movs	r3, #0
 80064d8:	73bb      	strb	r3, [r7, #14]
 80064da:	e035      	b.n	8006548 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80064dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da07      	bge.n	80064f4 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 80064e4:	4b25      	ldr	r3, [pc, #148]	@ (800657c <LCD_ShowChar+0x150>)
 80064e6:	881a      	ldrh	r2, [r3, #0]
 80064e8:	88b9      	ldrh	r1, [r7, #4]
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fb fadf 	bl	8001ab0 <LCD_Fast_DrawPoint>
 80064f2:	e00a      	b.n	800650a <LCD_ShowChar+0xde>
			else if (mode == 0)
 80064f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 80064fc:	4b20      	ldr	r3, [pc, #128]	@ (8006580 <LCD_ShowChar+0x154>)
 80064fe:	881a      	ldrh	r2, [r3, #0]
 8006500:	88b9      	ldrh	r1, [r7, #4]
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	4618      	mov	r0, r3
 8006506:	f7fb fad3 	bl	8001ab0 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006510:	88bb      	ldrh	r3, [r7, #4]
 8006512:	3301      	adds	r3, #1
 8006514:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8006516:	4b1b      	ldr	r3, [pc, #108]	@ (8006584 <LCD_ShowChar+0x158>)
 8006518:	885b      	ldrh	r3, [r3, #2]
 800651a:	88ba      	ldrh	r2, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d222      	bcs.n	8006566 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006520:	88ba      	ldrh	r2, [r7, #4]
 8006522:	897b      	ldrh	r3, [r7, #10]
 8006524:	1ad2      	subs	r2, r2, r3
 8006526:	78bb      	ldrb	r3, [r7, #2]
 8006528:	429a      	cmp	r2, r3
 800652a:	d10a      	bne.n	8006542 <LCD_ShowChar+0x116>
				y = y0;
 800652c:	897b      	ldrh	r3, [r7, #10]
 800652e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	3301      	adds	r3, #1
 8006534:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8006536:	4b13      	ldr	r3, [pc, #76]	@ (8006584 <LCD_ShowChar+0x158>)
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	429a      	cmp	r2, r3
 800653e:	d307      	bcc.n	8006550 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006540:	e012      	b.n	8006568 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	3301      	adds	r3, #1
 8006546:	73bb      	strb	r3, [r7, #14]
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b07      	cmp	r3, #7
 800654c:	d9c6      	bls.n	80064dc <LCD_ShowChar+0xb0>
 800654e:	e000      	b.n	8006552 <LCD_ShowChar+0x126>
				break;
 8006550:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006552:	7b7b      	ldrb	r3, [r7, #13]
 8006554:	3301      	adds	r3, #1
 8006556:	737b      	strb	r3, [r7, #13]
 8006558:	7b7a      	ldrb	r2, [r7, #13]
 800655a:	7a7b      	ldrb	r3, [r7, #9]
 800655c:	429a      	cmp	r2, r3
 800655e:	d391      	bcc.n	8006484 <LCD_ShowChar+0x58>
 8006560:	e002      	b.n	8006568 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8006566:	bf00      	nop
			}
		}
	}
}
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	bd90      	pop	{r4, r7, pc}
 800656e:	bf00      	nop
 8006570:	080091f4 	.word	0x080091f4
 8006574:	08009668 	.word	0x08009668
 8006578:	08009c58 	.word	0x08009c58
 800657c:	2000007c 	.word	0x2000007c
 8006580:	20000000 	.word	0x20000000
 8006584:	20000080 	.word	0x20000080

08006588 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	460a      	mov	r2, r1
 8006592:	71fb      	strb	r3, [r7, #7]
 8006594:	4613      	mov	r3, r2
 8006596:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8006598:	2301      	movs	r3, #1
 800659a:	60fb      	str	r3, [r7, #12]
	while (n--)
 800659c:	e004      	b.n	80065a8 <LCD_Pow+0x20>
		result *= m;
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	60fb      	str	r3, [r7, #12]
	while (n--)
 80065a8:	79bb      	ldrb	r3, [r7, #6]
 80065aa:	1e5a      	subs	r2, r3, #1
 80065ac:	71ba      	strb	r2, [r7, #6]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f5      	bne.n	800659e <LCD_Pow+0x16>
	return result;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
	...

080065c0 <LCD_ShowNum>:
// Display number without the leading zeros
// x,y: starting coordinate
// len: number of digits
// size: font size 12/16/24
void LCD_ShowNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size) {
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	b089      	sub	sp, #36	@ 0x24
 80065c4:	af02      	add	r7, sp, #8
 80065c6:	60ba      	str	r2, [r7, #8]
 80065c8:	461a      	mov	r2, r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	81fb      	strh	r3, [r7, #14]
 80065ce:	460b      	mov	r3, r1
 80065d0:	81bb      	strh	r3, [r7, #12]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]
 80065de:	e055      	b.n	800668c <LCD_ShowNum+0xcc>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 80065e0:	79fa      	ldrb	r2, [r7, #7]
 80065e2:	7dfb      	ldrb	r3, [r7, #23]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	4619      	mov	r1, r3
 80065ee:	200a      	movs	r0, #10
 80065f0:	f7ff ffca 	bl	8006588 <LCD_Pow>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80065fc:	4b28      	ldr	r3, [pc, #160]	@ (80066a0 <LCD_ShowNum+0xe0>)
 80065fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006602:	08da      	lsrs	r2, r3, #3
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	1aca      	subs	r2, r1, r3
 800660e:	4613      	mov	r3, r2
 8006610:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 8006612:	7dbb      	ldrb	r3, [r7, #22]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11f      	bne.n	8006658 <LCD_ShowNum+0x98>
 8006618:	7dfa      	ldrb	r2, [r7, #23]
 800661a:	79fb      	ldrb	r3, [r7, #7]
 800661c:	3b01      	subs	r3, #1
 800661e:	429a      	cmp	r2, r3
 8006620:	da1a      	bge.n	8006658 <LCD_ShowNum+0x98>
			if (temp == 0) {
 8006622:	7d7b      	ldrb	r3, [r7, #21]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d115      	bne.n	8006654 <LCD_ShowNum+0x94>
				LCD_ShowChar(x + (size / 2) * t, y, ' ', size, 0);
 8006628:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	b29b      	uxth	r3, r3
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	b29a      	uxth	r2, r3
 800663c:	89fb      	ldrh	r3, [r7, #14]
 800663e:	4413      	add	r3, r2
 8006640:	b298      	uxth	r0, r3
 8006642:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006646:	89b9      	ldrh	r1, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	9200      	str	r2, [sp, #0]
 800664c:	2220      	movs	r2, #32
 800664e:	f7ff feed 	bl	800642c <LCD_ShowChar>
				continue;
 8006652:	e018      	b.n	8006686 <LCD_ShowNum+0xc6>
			} else
				enshow = 1;
 8006654:	2301      	movs	r3, #1
 8006656:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, 0);
 8006658:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	7dfb      	ldrb	r3, [r7, #23]
 8006664:	b29b      	uxth	r3, r3
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	b29a      	uxth	r2, r3
 800666c:	89fb      	ldrh	r3, [r7, #14]
 800666e:	4413      	add	r3, r2
 8006670:	b298      	uxth	r0, r3
 8006672:	7d7b      	ldrb	r3, [r7, #21]
 8006674:	3330      	adds	r3, #48	@ 0x30
 8006676:	b2da      	uxtb	r2, r3
 8006678:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800667c:	89b9      	ldrh	r1, [r7, #12]
 800667e:	2400      	movs	r4, #0
 8006680:	9400      	str	r4, [sp, #0]
 8006682:	f7ff fed3 	bl	800642c <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	3301      	adds	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
 800668c:	7dfa      	ldrb	r2, [r7, #23]
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d3a5      	bcc.n	80065e0 <LCD_ShowNum+0x20>
	}
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	bd90      	pop	{r4, r7, pc}
 800669e:	bf00      	nop
 80066a0:	cccccccd 	.word	0xcccccccd

080066a4 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af02      	add	r7, sp, #8
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	461a      	mov	r2, r3
 80066b2:	4623      	mov	r3, r4
 80066b4:	80fb      	strh	r3, [r7, #6]
 80066b6:	4603      	mov	r3, r0
 80066b8:	80bb      	strh	r3, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	807b      	strh	r3, [r7, #2]
 80066be:	4613      	mov	r3, r2
 80066c0:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	73fb      	strb	r3, [r7, #15]
	width += x;
 80066c6:	887a      	ldrh	r2, [r7, #2]
 80066c8:	88fb      	ldrh	r3, [r7, #6]
 80066ca:	4413      	add	r3, r2
 80066cc:	807b      	strh	r3, [r7, #2]
	height += y;
 80066ce:	883a      	ldrh	r2, [r7, #0]
 80066d0:	88bb      	ldrh	r3, [r7, #4]
 80066d2:	4413      	add	r3, r2
 80066d4:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80066d6:	e024      	b.n	8006722 <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 80066d8:	88fa      	ldrh	r2, [r7, #6]
 80066da:	887b      	ldrh	r3, [r7, #2]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d307      	bcc.n	80066f0 <LCD_ShowString+0x4c>
			x = x0;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	80fb      	strh	r3, [r7, #6]
			y += size;
 80066e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	88bb      	ldrh	r3, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 80066f0:	88ba      	ldrh	r2, [r7, #4]
 80066f2:	883b      	ldrh	r3, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d21d      	bcs.n	8006734 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	781a      	ldrb	r2, [r3, #0]
 80066fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006700:	88b9      	ldrh	r1, [r7, #4]
 8006702:	88f8      	ldrh	r0, [r7, #6]
 8006704:	2400      	movs	r4, #0
 8006706:	9400      	str	r4, [sp, #0]
 8006708:	f7ff fe90 	bl	800642c <LCD_ShowChar>
		x += size / 2;
 800670c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	88fb      	ldrh	r3, [r7, #6]
 8006718:	4413      	add	r3, r2
 800671a:	80fb      	strh	r3, [r7, #6]
		p++;
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	3301      	adds	r3, #1
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b7e      	cmp	r3, #126	@ 0x7e
 8006728:	d805      	bhi.n	8006736 <LCD_ShowString+0x92>
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	2b1f      	cmp	r3, #31
 8006730:	d8d2      	bhi.n	80066d8 <LCD_ShowString+0x34>
	}
}
 8006732:	e000      	b.n	8006736 <LCD_ShowString+0x92>
			break;	//退出
 8006734:	bf00      	nop
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	bd90      	pop	{r4, r7, pc}

0800673e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006742:	f001 f829 	bl	8007798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006746:	f000 f806 	bl	8006756 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800674a:	f7fb fdf9 	bl	8002340 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800674e:	f000 f849 	bl	80067e4 <MX_GPIO_Init>
//  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006752:	bf00      	nop
 8006754:	e7fd      	b.n	8006752 <main+0x14>

08006756 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b090      	sub	sp, #64	@ 0x40
 800675a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800675c:	f107 0318 	add.w	r3, r7, #24
 8006760:	2228      	movs	r2, #40	@ 0x28
 8006762:	2100      	movs	r1, #0
 8006764:	4618      	mov	r0, r3
 8006766:	f002 f88f 	bl	8008888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800676a:	1d3b      	adds	r3, r7, #4
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006778:	2301      	movs	r3, #1
 800677a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800677c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006780:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8006782:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006788:	2301      	movs	r3, #1
 800678a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800678c:	2302      	movs	r3, #2
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006794:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006796:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800679a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800679c:	f107 0318 	add.w	r3, r7, #24
 80067a0:	4618      	mov	r0, r3
 80067a2:	f001 fbb3 	bl	8007f0c <HAL_RCC_OscConfig>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80067ac:	f000 f8be 	bl	800692c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067b0:	230f      	movs	r3, #15
 80067b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80067b4:	2302      	movs	r3, #2
 80067b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80067bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	2102      	movs	r1, #2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f001 fe20 	bl	8008410 <HAL_RCC_ClockConfig>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <SystemClock_Config+0x84>
  {
    Error_Handler();
 80067d6:	f000 f8a9 	bl	800692c <Error_Handler>
  }
}
 80067da:	bf00      	nop
 80067dc:	3740      	adds	r7, #64	@ 0x40
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ea:	f107 0310 	add.w	r3, r7, #16
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	605a      	str	r2, [r3, #4]
 80067f4:	609a      	str	r2, [r3, #8]
 80067f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067f8:	4b46      	ldr	r3, [pc, #280]	@ (8006914 <MX_GPIO_Init+0x130>)
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	4a45      	ldr	r2, [pc, #276]	@ (8006914 <MX_GPIO_Init+0x130>)
 80067fe:	f043 0320 	orr.w	r3, r3, #32
 8006802:	6193      	str	r3, [r2, #24]
 8006804:	4b43      	ldr	r3, [pc, #268]	@ (8006914 <MX_GPIO_Init+0x130>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006810:	4b40      	ldr	r3, [pc, #256]	@ (8006914 <MX_GPIO_Init+0x130>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	4a3f      	ldr	r2, [pc, #252]	@ (8006914 <MX_GPIO_Init+0x130>)
 8006816:	f043 0304 	orr.w	r3, r3, #4
 800681a:	6193      	str	r3, [r2, #24]
 800681c:	4b3d      	ldr	r3, [pc, #244]	@ (8006914 <MX_GPIO_Init+0x130>)
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006828:	4b3a      	ldr	r3, [pc, #232]	@ (8006914 <MX_GPIO_Init+0x130>)
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	4a39      	ldr	r2, [pc, #228]	@ (8006914 <MX_GPIO_Init+0x130>)
 800682e:	f043 0310 	orr.w	r3, r3, #16
 8006832:	6193      	str	r3, [r2, #24]
 8006834:	4b37      	ldr	r3, [pc, #220]	@ (8006914 <MX_GPIO_Init+0x130>)
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8006840:	2201      	movs	r2, #1
 8006842:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006846:	4834      	ldr	r0, [pc, #208]	@ (8006918 <MX_GPIO_Init+0x134>)
 8006848:	f001 fb17 	bl	8007e7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800684c:	2201      	movs	r2, #1
 800684e:	2104      	movs	r1, #4
 8006850:	4832      	ldr	r0, [pc, #200]	@ (800691c <MX_GPIO_Init+0x138>)
 8006852:	f001 fb12 	bl	8007e7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_WK_Pin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8006856:	2301      	movs	r3, #1
 8006858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800685a:	4b31      	ldr	r3, [pc, #196]	@ (8006920 <MX_GPIO_Init+0x13c>)
 800685c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800685e:	2302      	movs	r3, #2
 8006860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8006862:	f107 0310 	add.w	r3, r7, #16
 8006866:	4619      	mov	r1, r3
 8006868:	482b      	ldr	r0, [pc, #172]	@ (8006918 <MX_GPIO_Init+0x134>)
 800686a:	f001 f95b 	bl	8007b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800686e:	2320      	movs	r3, #32
 8006870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006872:	4b2c      	ldr	r3, [pc, #176]	@ (8006924 <MX_GPIO_Init+0x140>)
 8006874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006876:	2301      	movs	r3, #1
 8006878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800687a:	f107 0310 	add.w	r3, r7, #16
 800687e:	4619      	mov	r1, r3
 8006880:	4829      	ldr	r0, [pc, #164]	@ (8006928 <MX_GPIO_Init+0x144>)
 8006882:	f001 f94f 	bl	8007b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8006886:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800688a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800688c:	2301      	movs	r3, #1
 800688e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006890:	2300      	movs	r3, #0
 8006892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006894:	2302      	movs	r3, #2
 8006896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8006898:	f107 0310 	add.w	r3, r7, #16
 800689c:	4619      	mov	r1, r3
 800689e:	481e      	ldr	r0, [pc, #120]	@ (8006918 <MX_GPIO_Init+0x134>)
 80068a0:	f001 f940 	bl	8007b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80068a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80068aa:	4b1e      	ldr	r3, [pc, #120]	@ (8006924 <MX_GPIO_Init+0x140>)
 80068ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068ae:	2301      	movs	r3, #1
 80068b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80068b2:	f107 0310 	add.w	r3, r7, #16
 80068b6:	4619      	mov	r1, r3
 80068b8:	4817      	ldr	r0, [pc, #92]	@ (8006918 <MX_GPIO_Init+0x134>)
 80068ba:	f001 f933 	bl	8007b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80068be:	2304      	movs	r3, #4
 80068c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068c2:	2301      	movs	r3, #1
 80068c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068ca:	2302      	movs	r3, #2
 80068cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80068ce:	f107 0310 	add.w	r3, r7, #16
 80068d2:	4619      	mov	r1, r3
 80068d4:	4811      	ldr	r0, [pc, #68]	@ (800691c <MX_GPIO_Init+0x138>)
 80068d6:	f001 f925 	bl	8007b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 80068da:	2200      	movs	r2, #0
 80068dc:	2104      	movs	r1, #4
 80068de:	2006      	movs	r0, #6
 80068e0:	f001 f8db 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80068e4:	2006      	movs	r0, #6
 80068e6:	f001 f8f4 	bl	8007ad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2105      	movs	r1, #5
 80068ee:	2017      	movs	r0, #23
 80068f0:	f001 f8d3 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80068f4:	2017      	movs	r0, #23
 80068f6:	f001 f8ec 	bl	8007ad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2106      	movs	r1, #6
 80068fe:	2028      	movs	r0, #40	@ 0x28
 8006900:	f001 f8cb 	bl	8007a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006904:	2028      	movs	r0, #40	@ 0x28
 8006906:	f001 f8e4 	bl	8007ad2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800690a:	bf00      	nop
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40021000 	.word	0x40021000
 8006918:	40010800 	.word	0x40010800
 800691c:	40011400 	.word	0x40011400
 8006920:	10110000 	.word	0x10110000
 8006924:	10210000 	.word	0x10210000
 8006928:	40011000 	.word	0x40011000

0800692c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006930:	b672      	cpsid	i
}
 8006932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006934:	bf00      	nop
 8006936:	e7fd      	b.n	8006934 <Error_Handler+0x8>

08006938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <HAL_MspInit+0x5c>)
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <HAL_MspInit+0x5c>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	6193      	str	r3, [r2, #24]
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <HAL_MspInit+0x5c>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	60bb      	str	r3, [r7, #8]
 8006954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006956:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <HAL_MspInit+0x5c>)
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	4a0e      	ldr	r2, [pc, #56]	@ (8006994 <HAL_MspInit+0x5c>)
 800695c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006960:	61d3      	str	r3, [r2, #28]
 8006962:	4b0c      	ldr	r3, [pc, #48]	@ (8006994 <HAL_MspInit+0x5c>)
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800696e:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <HAL_MspInit+0x60>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	4a04      	ldr	r2, [pc, #16]	@ (8006998 <HAL_MspInit+0x60>)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr
 8006994:	40021000 	.word	0x40021000
 8006998:	40010000 	.word	0x40010000

0800699c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <NMI_Handler+0x4>

080069a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <HardFault_Handler+0x4>

080069ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <MemManage_Handler+0x4>

080069b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80069b8:	bf00      	nop
 80069ba:	e7fd      	b.n	80069b8 <BusFault_Handler+0x4>

080069bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <UsageFault_Handler+0x4>

080069c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80069d4:	bf00      	nop
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bc80      	pop	{r7}
 80069da:	4770      	bx	lr

080069dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80069e0:	bf00      	nop
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr

080069e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80069ec:	f000 ff1a 	bl	8007824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80069f0:	bf00      	nop
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 80069f8:	2001      	movs	r0, #1
 80069fa:	f001 fa6f 	bl	8007edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 8006a06:	2020      	movs	r0, #32
 8006a08:	f001 fa68 	bl	8007edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006a0c:	bf00      	nop
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8006a14:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006a18:	f001 fa60 	bl	8007edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af02      	add	r7, sp, #8
 8006a26:	4603      	mov	r3, r0
 8006a28:	80fb      	strh	r3, [r7, #6]
//	HAL_NVIC_DisableIRQ(GPIO_PinToIRQn(GPIO_Pin));
//	HAL_Delay(100);
	char* data_string;
	uint8_t data_length;

	switch (GPIO_Pin) {
 8006a2a:	88fb      	ldrh	r3, [r7, #6]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a30:	d072      	beq.n	8006b18 <HAL_GPIO_EXTI_Callback+0xf8>
 8006a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a36:	f300 81a6 	bgt.w	8006d86 <HAL_GPIO_EXTI_Callback+0x366>
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d003      	beq.n	8006a46 <HAL_GPIO_EXTI_Callback+0x26>
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	f000 80fc 	beq.w	8006c3c <HAL_GPIO_EXTI_Callback+0x21c>
 8006a44:	e19f      	b.n	8006d86 <HAL_GPIO_EXTI_Callback+0x366>
		case KEY_WK_Pin:
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8006a46:	2006      	movs	r0, #6
 8006a48:	f001 f851 	bl	8007aee <HAL_NVIC_DisableIRQ>
			HAL_Delay(100);
 8006a4c:	2064      	movs	r0, #100	@ 0x64
 8006a4e:	f000 ff05 	bl	800785c <HAL_Delay>
			if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 8006a52:	2101      	movs	r1, #1
 8006a54:	48b0      	ldr	r0, [pc, #704]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006a56:	f001 f9f9 	bl	8007e4c <HAL_GPIO_ReadPin>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d157      	bne.n	8006b10 <HAL_GPIO_EXTI_Callback+0xf0>
				// Toggle mode
				mode = !mode;
 8006a60:	4bae      	ldr	r3, [pc, #696]	@ (8006d1c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4baa      	ldr	r3, [pc, #680]	@ (8006d1c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8006a72:	701a      	strb	r2, [r3, #0]
				count = 0;
 8006a74:	4baa      	ldr	r3, [pc, #680]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
				// Toggle LEDs based on the mode
				if (mode == 0) {
 8006a7a:	4ba8      	ldr	r3, [pc, #672]	@ (8006d1c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d117      	bne.n	8006ab2 <HAL_GPIO_EXTI_Callback+0x92>
					// Encoding mode
//					LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "Decoding Mode");
					DisplayEncodingMode();
 8006a82:	f000 f9c1 	bl	8006e08 <DisplayEncodingMode>
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a8a:	48a3      	ldr	r0, [pc, #652]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006a8c:	f001 fa0d 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006a90:	2104      	movs	r1, #4
 8006a92:	48a4      	ldr	r0, [pc, #656]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006a94:	f001 fa09 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_Delay(200);
 8006a98:	20c8      	movs	r0, #200	@ 0xc8
 8006a9a:	f000 fedf 	bl	800785c <HAL_Delay>
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);  // LED0 flash once
 8006a9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006aa2:	489d      	ldr	r0, [pc, #628]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006aa4:	f001 fa01 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);  // LED1 flash once
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	489e      	ldr	r0, [pc, #632]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006aac:	f001 f9fd 	bl	8007eaa <HAL_GPIO_TogglePin>
 8006ab0:	e02e      	b.n	8006b10 <HAL_GPIO_EXTI_Callback+0xf0>
				} else {
					DisplayDecodingMode();
 8006ab2:	f000 fa1b 	bl	8006eec <DisplayDecodingMode>
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006ab6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006aba:	4897      	ldr	r0, [pc, #604]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006abc:	f001 f9f5 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	4898      	ldr	r0, [pc, #608]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006ac4:	f001 f9f1 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_Delay(100);
 8006ac8:	2064      	movs	r0, #100	@ 0x64
 8006aca:	f000 fec7 	bl	800785c <HAL_Delay>
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);  // LED0 flash once
 8006ace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006ad2:	4891      	ldr	r0, [pc, #580]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006ad4:	f001 f9e9 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);  // LED1 flash once
 8006ad8:	2104      	movs	r1, #4
 8006ada:	4892      	ldr	r0, [pc, #584]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006adc:	f001 f9e5 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_Delay(100);
 8006ae0:	2064      	movs	r0, #100	@ 0x64
 8006ae2:	f000 febb 	bl	800785c <HAL_Delay>
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006ae6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006aea:	488b      	ldr	r0, [pc, #556]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006aec:	f001 f9dd 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006af0:	2104      	movs	r1, #4
 8006af2:	488c      	ldr	r0, [pc, #560]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006af4:	f001 f9d9 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_Delay(100);
 8006af8:	2064      	movs	r0, #100	@ 0x64
 8006afa:	f000 feaf 	bl	800785c <HAL_Delay>
					HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);  // LED0 flash once
 8006afe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b02:	4885      	ldr	r0, [pc, #532]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006b04:	f001 f9d1 	bl	8007eaa <HAL_GPIO_TogglePin>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);  // LED1 flash once
 8006b08:	2104      	movs	r1, #4
 8006b0a:	4886      	ldr	r0, [pc, #536]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006b0c:	f001 f9cd 	bl	8007eaa <HAL_GPIO_TogglePin>
				}

			}
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006b10:	2006      	movs	r0, #6
 8006b12:	f000 ffde 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
			break;
 8006b16:	e13a      	b.n	8006d8e <HAL_GPIO_EXTI_Callback+0x36e>
		case KEY1_Pin:
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006b18:	2028      	movs	r0, #40	@ 0x28
 8006b1a:	f000 ffe8 	bl	8007aee <HAL_NVIC_DisableIRQ>
			HAL_Delay(100);
 8006b1e:	2064      	movs	r0, #100	@ 0x64
 8006b20:	f000 fe9c 	bl	800785c <HAL_Delay>
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8006b24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006b28:	487b      	ldr	r0, [pc, #492]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006b2a:	f001 f98f 	bl	8007e4c <HAL_GPIO_ReadPin>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d17f      	bne.n	8006c34 <HAL_GPIO_EXTI_Callback+0x214>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006b34:	2104      	movs	r1, #4
 8006b36:	487b      	ldr	r0, [pc, #492]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006b38:	f001 f9b7 	bl	8007eaa <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 8006b3c:	2064      	movs	r0, #100	@ 0x64
 8006b3e:	f000 fe8d 	bl	800785c <HAL_Delay>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8006b42:	2104      	movs	r1, #4
 8006b44:	4877      	ldr	r0, [pc, #476]	@ (8006d24 <HAL_GPIO_EXTI_Callback+0x304>)
 8006b46:	f001 f9b0 	bl	8007eaa <HAL_GPIO_TogglePin>
				input_data[count++] = 1;
 8006b4a:	4b75      	ldr	r3, [pc, #468]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	b2d1      	uxtb	r1, r2
 8006b54:	4a72      	ldr	r2, [pc, #456]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006b56:	7011      	strb	r1, [r2, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	4b73      	ldr	r3, [pc, #460]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	5499      	strb	r1, [r3, r2]
				LCD_ShowNum(60,220,input_data[count-1],1,10);
 8006b60:	4b6f      	ldr	r3, [pc, #444]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	4a6f      	ldr	r2, [pc, #444]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006b6a:	5cd3      	ldrb	r3, [r2, r3]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	230a      	movs	r3, #10
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	2301      	movs	r3, #1
 8006b74:	21dc      	movs	r1, #220	@ 0xdc
 8006b76:	203c      	movs	r0, #60	@ 0x3c
 8006b78:	f7ff fd22 	bl	80065c0 <LCD_ShowNum>
				if(mode == 0){
 8006b7c:	4b67      	ldr	r3, [pc, #412]	@ (8006d1c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d134      	bne.n	8006bee <HAL_GPIO_EXTI_Callback+0x1ce>
					// 调用 Hamming 编码函数
					data_string = ConvertNumberToString(input_data,count);
 8006b84:	4b66      	ldr	r3, [pc, #408]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4866      	ldr	r0, [pc, #408]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006b8e:	f000 f90b 	bl	8006da8 <ConvertNumberToString>
 8006b92:	60f8      	str	r0, [r7, #12]
					LCD_ShowString(30, 110, 200, 24, 24, (uint8_t*)data_string);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	2318      	movs	r3, #24
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	2318      	movs	r3, #24
 8006b9e:	22c8      	movs	r2, #200	@ 0xc8
 8006ba0:	216e      	movs	r1, #110	@ 0x6e
 8006ba2:	201e      	movs	r0, #30
 8006ba4:	f7ff fd7e 	bl	80066a4 <LCD_ShowString>
					free(data_string);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f001 fd97 	bl	80086dc <free>
					hammingEncode(input_data, count, &output_data, &output_length);
 8006bae:	4b5c      	ldr	r3, [pc, #368]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8006d2c <HAL_GPIO_EXTI_Callback+0x30c>)
 8006bb8:	4a5d      	ldr	r2, [pc, #372]	@ (8006d30 <HAL_GPIO_EXTI_Callback+0x310>)
 8006bba:	485b      	ldr	r0, [pc, #364]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006bbc:	f000 fa2e 	bl	800701c <hammingEncode>
					data_string = ConvertNumberToString(output_data,output_length);
 8006bc0:	4b5b      	ldr	r3, [pc, #364]	@ (8006d30 <HAL_GPIO_EXTI_Callback+0x310>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a59      	ldr	r2, [pc, #356]	@ (8006d2c <HAL_GPIO_EXTI_Callback+0x30c>)
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f8ec 	bl	8006da8 <ConvertNumberToString>
 8006bd0:	60f8      	str	r0, [r7, #12]
					LCD_ShowString(30, 180, 200, 24, 24, (uint8_t*)data_string);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	2318      	movs	r3, #24
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	2318      	movs	r3, #24
 8006bdc:	22c8      	movs	r2, #200	@ 0xc8
 8006bde:	21b4      	movs	r1, #180	@ 0xb4
 8006be0:	201e      	movs	r0, #30
 8006be2:	f7ff fd5f 	bl	80066a4 <LCD_ShowString>
					free(data_string);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f001 fd78 	bl	80086dc <free>
 8006bec:	e022      	b.n	8006c34 <HAL_GPIO_EXTI_Callback+0x214>
				}else{
					data_string = ConvertNumberToString(input_data,count);
 8006bee:	4b4c      	ldr	r3, [pc, #304]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	484c      	ldr	r0, [pc, #304]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006bf8:	f000 f8d6 	bl	8006da8 <ConvertNumberToString>
 8006bfc:	60f8      	str	r0, [r7, #12]
					LCD_ShowString(30, 166, 200, 24, 24, (uint8_t*)data_string);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	2318      	movs	r3, #24
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2318      	movs	r3, #24
 8006c08:	22c8      	movs	r2, #200	@ 0xc8
 8006c0a:	21a6      	movs	r1, #166	@ 0xa6
 8006c0c:	201e      	movs	r0, #30
 8006c0e:	f7ff fd49 	bl	80066a4 <LCD_ShowString>
					free(data_string);
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f001 fd62 	bl	80086dc <free>
					if(count<3){
 8006c18:	4b41      	ldr	r3, [pc, #260]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d908      	bls.n	8006c34 <HAL_GPIO_EXTI_Callback+0x214>
					}else{
					hammingDecode(input_data, count, &output_data, &output_length);
 8006c22:	4b3f      	ldr	r3, [pc, #252]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4b40      	ldr	r3, [pc, #256]	@ (8006d2c <HAL_GPIO_EXTI_Callback+0x30c>)
 8006c2c:	4a40      	ldr	r2, [pc, #256]	@ (8006d30 <HAL_GPIO_EXTI_Callback+0x310>)
 8006c2e:	483e      	ldr	r0, [pc, #248]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006c30:	f000 fb18 	bl	8007264 <hammingDecode>
					}

				}
			}
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006c34:	2028      	movs	r0, #40	@ 0x28
 8006c36:	f000 ff4c 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
			break;
 8006c3a:	e0a8      	b.n	8006d8e <HAL_GPIO_EXTI_Callback+0x36e>
		case KEY0_Pin:
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8006c3c:	2017      	movs	r0, #23
 8006c3e:	f000 ff56 	bl	8007aee <HAL_NVIC_DisableIRQ>
			HAL_Delay(100);
 8006c42:	2064      	movs	r0, #100	@ 0x64
 8006c44:	f000 fe0a 	bl	800785c <HAL_Delay>
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8006c48:	2120      	movs	r1, #32
 8006c4a:	483a      	ldr	r0, [pc, #232]	@ (8006d34 <HAL_GPIO_EXTI_Callback+0x314>)
 8006c4c:	f001 f8fe 	bl	8007e4c <HAL_GPIO_ReadPin>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f040 8093 	bne.w	8006d7e <HAL_GPIO_EXTI_Callback+0x35e>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006c58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c5c:	482e      	ldr	r0, [pc, #184]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006c5e:	f001 f924 	bl	8007eaa <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 8006c62:	2064      	movs	r0, #100	@ 0x64
 8006c64:	f000 fdfa 	bl	800785c <HAL_Delay>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8006c68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006c6c:	482a      	ldr	r0, [pc, #168]	@ (8006d18 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8006c6e:	f001 f91c 	bl	8007eaa <HAL_GPIO_TogglePin>
				input_data[count++] = 0;
 8006c72:	4b2b      	ldr	r3, [pc, #172]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	b2d1      	uxtb	r1, r2
 8006c7c:	4a28      	ldr	r2, [pc, #160]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006c7e:	7011      	strb	r1, [r2, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	4b29      	ldr	r3, [pc, #164]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006c84:	2100      	movs	r1, #0
 8006c86:	5499      	strb	r1, [r3, r2]
				LCD_ShowNum(30,220,input_data[count-1],1,10);
 8006c88:	4b25      	ldr	r3, [pc, #148]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	4a25      	ldr	r2, [pc, #148]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006c92:	5cd3      	ldrb	r3, [r2, r3]
 8006c94:	461a      	mov	r2, r3
 8006c96:	230a      	movs	r3, #10
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	21dc      	movs	r1, #220	@ 0xdc
 8006c9e:	201e      	movs	r0, #30
 8006ca0:	f7ff fc8e 	bl	80065c0 <LCD_ShowNum>
				if(mode == 0){
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d1c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d145      	bne.n	8006d38 <HAL_GPIO_EXTI_Callback+0x318>
					data_string = ConvertNumberToString(input_data,count);
 8006cac:	4b1c      	ldr	r3, [pc, #112]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	481c      	ldr	r0, [pc, #112]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006cb6:	f000 f877 	bl	8006da8 <ConvertNumberToString>
 8006cba:	60f8      	str	r0, [r7, #12]
					LCD_ShowString(30, 110, 200, 24, 24, (uint8_t*)data_string);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	2318      	movs	r3, #24
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	2318      	movs	r3, #24
 8006cc6:	22c8      	movs	r2, #200	@ 0xc8
 8006cc8:	216e      	movs	r1, #110	@ 0x6e
 8006cca:	201e      	movs	r0, #30
 8006ccc:	f7ff fcea 	bl	80066a4 <LCD_ShowString>
					free(data_string);
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f001 fd03 	bl	80086dc <free>
					hammingEncode(input_data, count, &output_data, &output_length);
 8006cd6:	4b12      	ldr	r3, [pc, #72]	@ (8006d20 <HAL_GPIO_EXTI_Callback+0x300>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4b13      	ldr	r3, [pc, #76]	@ (8006d2c <HAL_GPIO_EXTI_Callback+0x30c>)
 8006ce0:	4a13      	ldr	r2, [pc, #76]	@ (8006d30 <HAL_GPIO_EXTI_Callback+0x310>)
 8006ce2:	4811      	ldr	r0, [pc, #68]	@ (8006d28 <HAL_GPIO_EXTI_Callback+0x308>)
 8006ce4:	f000 f99a 	bl	800701c <hammingEncode>
					data_string = ConvertNumberToString(output_data,output_length);
 8006ce8:	4b11      	ldr	r3, [pc, #68]	@ (8006d30 <HAL_GPIO_EXTI_Callback+0x310>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a0f      	ldr	r2, [pc, #60]	@ (8006d2c <HAL_GPIO_EXTI_Callback+0x30c>)
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f858 	bl	8006da8 <ConvertNumberToString>
 8006cf8:	60f8      	str	r0, [r7, #12]
				    LCD_ShowString(30, 180, 200, 24, 24, (uint8_t*)data_string);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	2318      	movs	r3, #24
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	2318      	movs	r3, #24
 8006d04:	22c8      	movs	r2, #200	@ 0xc8
 8006d06:	21b4      	movs	r1, #180	@ 0xb4
 8006d08:	201e      	movs	r0, #30
 8006d0a:	f7ff fccb 	bl	80066a4 <LCD_ShowString>
				    free(data_string);
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f001 fce4 	bl	80086dc <free>
 8006d14:	e033      	b.n	8006d7e <HAL_GPIO_EXTI_Callback+0x35e>
 8006d16:	bf00      	nop
 8006d18:	40010800 	.word	0x40010800
 8006d1c:	20000002 	.word	0x20000002
 8006d20:	200000f4 	.word	0x200000f4
 8006d24:	40011400 	.word	0x40011400
 8006d28:	20000090 	.word	0x20000090
 8006d2c:	200000fc 	.word	0x200000fc
 8006d30:	200000f8 	.word	0x200000f8
 8006d34:	40011000 	.word	0x40011000
				}else{
					data_string = ConvertNumberToString(input_data,count);
 8006d38:	4b17      	ldr	r3, [pc, #92]	@ (8006d98 <HAL_GPIO_EXTI_Callback+0x378>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4816      	ldr	r0, [pc, #88]	@ (8006d9c <HAL_GPIO_EXTI_Callback+0x37c>)
 8006d42:	f000 f831 	bl	8006da8 <ConvertNumberToString>
 8006d46:	60f8      	str	r0, [r7, #12]
					LCD_ShowString(30, 166, 200, 24, 24, (uint8_t*)data_string);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	2318      	movs	r3, #24
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	2318      	movs	r3, #24
 8006d52:	22c8      	movs	r2, #200	@ 0xc8
 8006d54:	21a6      	movs	r1, #166	@ 0xa6
 8006d56:	201e      	movs	r0, #30
 8006d58:	f7ff fca4 	bl	80066a4 <LCD_ShowString>
					free(data_string);
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f001 fcbd 	bl	80086dc <free>
					if(count <3 ){
 8006d62:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <HAL_GPIO_EXTI_Callback+0x378>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d908      	bls.n	8006d7e <HAL_GPIO_EXTI_Callback+0x35e>
					}else{
					hammingDecode(input_data, count, &output_data, &output_length);
 8006d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <HAL_GPIO_EXTI_Callback+0x378>)
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	4619      	mov	r1, r3
 8006d74:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <HAL_GPIO_EXTI_Callback+0x380>)
 8006d76:	4a0b      	ldr	r2, [pc, #44]	@ (8006da4 <HAL_GPIO_EXTI_Callback+0x384>)
 8006d78:	4808      	ldr	r0, [pc, #32]	@ (8006d9c <HAL_GPIO_EXTI_Callback+0x37c>)
 8006d7a:	f000 fa73 	bl	8007264 <hammingDecode>
					}
				}
			}
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d7e:	2017      	movs	r0, #23
 8006d80:	f000 fea7 	bl	8007ad2 <HAL_NVIC_EnableIRQ>
			break;
 8006d84:	e003      	b.n	8006d8e <HAL_GPIO_EXTI_Callback+0x36e>
		default:
			LCD_Clear(BLUE);
 8006d86:	201f      	movs	r0, #31
 8006d88:	f7ff fa08 	bl	800619c <LCD_Clear>
			break;
 8006d8c:	bf00      	nop

	}
//	HAL_NVIC_EnableIRQ(GPIO_PinToIRQn(GPIO_Pin));
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200000f4 	.word	0x200000f4
 8006d9c:	20000090 	.word	0x20000090
 8006da0:	200000fc 	.word	0x200000fc
 8006da4:	200000f8 	.word	0x200000f8

08006da8 <ConvertNumberToString>:

char* ConvertNumberToString(uint8_t* data, uint8_t count){
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
    char* data_string = (char*)malloc(count + 1);
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	3301      	adds	r3, #1
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 fc87 	bl	80086cc <malloc>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	60bb      	str	r3, [r7, #8]

    if (data_string == NULL){
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <ConvertNumberToString+0x24>
        return NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e019      	b.n	8006e00 <ConvertNumberToString+0x58>
    }


    for (uint8_t i = 0; i < count; i++){
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e00c      	b.n	8006dec <ConvertNumberToString+0x44>
        data_string[i] = data[i] + '0';  // 将数字转换为字符 '0' 或 '1'
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	440b      	add	r3, r1
 8006de0:	3230      	adds	r2, #48	@ 0x30
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++){
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	3301      	adds	r3, #1
 8006dea:	73fb      	strb	r3, [r7, #15]
 8006dec:	7bfa      	ldrb	r2, [r7, #15]
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d3ee      	bcc.n	8006dd2 <ConvertNumberToString+0x2a>
    }

    data_string[count] = '\0';
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	4413      	add	r3, r2
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	701a      	strb	r2, [r3, #0]
    return data_string;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <DisplayEncodingMode>:



// 320*240 uint8_t *original_data, uint8_t *encoded_data
void DisplayEncodingMode(void) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af02      	add	r7, sp, #8
    // Clear the screen
    LCD_Clear(GREEN);
 8006e0e:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8006e12:	f7ff f9c3 	bl	800619c <LCD_Clear>
	LCD_ShowString(30, 20, 200, 24, 24, (uint8_t*) "Encoding Mode");
 8006e16:	4b2e      	ldr	r3, [pc, #184]	@ (8006ed0 <DisplayEncodingMode+0xc8>)
 8006e18:	9301      	str	r3, [sp, #4]
 8006e1a:	2318      	movs	r3, #24
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	2318      	movs	r3, #24
 8006e20:	22c8      	movs	r2, #200	@ 0xc8
 8006e22:	2114      	movs	r1, #20
 8006e24:	201e      	movs	r0, #30
 8006e26:	f7ff fc3d 	bl	80066a4 <LCD_ShowString>
	LCD_DrawLine(0,70,319,70);
 8006e2a:	2346      	movs	r3, #70	@ 0x46
 8006e2c:	f240 123f 	movw	r2, #319	@ 0x13f
 8006e30:	2146      	movs	r1, #70	@ 0x46
 8006e32:	2000      	movs	r0, #0
 8006e34:	f7ff fa76 	bl	8006324 <LCD_DrawLine>
    // Display original data
	char* data_string = ConvertNumberToString(input_data,count);
 8006e38:	4b26      	ldr	r3, [pc, #152]	@ (8006ed4 <DisplayEncodingMode+0xcc>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4825      	ldr	r0, [pc, #148]	@ (8006ed8 <DisplayEncodingMode+0xd0>)
 8006e42:	f7ff ffb1 	bl	8006da8 <ConvertNumberToString>
 8006e46:	6078      	str	r0, [r7, #4]
	LCD_ShowString(30, 80, 200, 24, 16, (uint8_t*) "Original data");
 8006e48:	4b24      	ldr	r3, [pc, #144]	@ (8006edc <DisplayEncodingMode+0xd4>)
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	2310      	movs	r3, #16
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2318      	movs	r3, #24
 8006e52:	22c8      	movs	r2, #200	@ 0xc8
 8006e54:	2150      	movs	r1, #80	@ 0x50
 8006e56:	201e      	movs	r0, #30
 8006e58:	f7ff fc24 	bl	80066a4 <LCD_ShowString>
	LCD_ShowString(30, 110, 200, 24, 24, (uint8_t*)data_string);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	2318      	movs	r3, #24
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	2318      	movs	r3, #24
 8006e66:	22c8      	movs	r2, #200	@ 0xc8
 8006e68:	216e      	movs	r1, #110	@ 0x6e
 8006e6a:	201e      	movs	r0, #30
 8006e6c:	f7ff fc1a 	bl	80066a4 <LCD_ShowString>
    LCD_DrawLine(0, 140, 319, 140);
 8006e70:	238c      	movs	r3, #140	@ 0x8c
 8006e72:	f240 123f 	movw	r2, #319	@ 0x13f
 8006e76:	218c      	movs	r1, #140	@ 0x8c
 8006e78:	2000      	movs	r0, #0
 8006e7a:	f7ff fa53 	bl	8006324 <LCD_DrawLine>
    // Display Hamming code
    LCD_ShowString(30, 150, 200, 24, 16, (uint8_t*) "Hamming code");
 8006e7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ee0 <DisplayEncodingMode+0xd8>)
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	2310      	movs	r3, #16
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	2318      	movs	r3, #24
 8006e88:	22c8      	movs	r2, #200	@ 0xc8
 8006e8a:	2196      	movs	r1, #150	@ 0x96
 8006e8c:	201e      	movs	r0, #30
 8006e8e:	f7ff fc09 	bl	80066a4 <LCD_ShowString>
    LCD_ShowString(30, 180, 200, 24, 24, (uint8_t*)"");   // 显示传入的编码数据
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <DisplayEncodingMode+0xdc>)
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	2318      	movs	r3, #24
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	2318      	movs	r3, #24
 8006e9c:	22c8      	movs	r2, #200	@ 0xc8
 8006e9e:	21b4      	movs	r1, #180	@ 0xb4
 8006ea0:	201e      	movs	r0, #30
 8006ea2:	f7ff fbff 	bl	80066a4 <LCD_ShowString>
    LCD_DrawLine(0, 210, 319, 210);
 8006ea6:	23d2      	movs	r3, #210	@ 0xd2
 8006ea8:	f240 123f 	movw	r2, #319	@ 0x13f
 8006eac:	21d2      	movs	r1, #210	@ 0xd2
 8006eae:	2000      	movs	r0, #0
 8006eb0:	f7ff fa38 	bl	8006324 <LCD_DrawLine>

    // Display "No errors"
	LCD_ShowString(30, 240, 200, 24, 16, (uint8_t*) "No errors");
 8006eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee8 <DisplayEncodingMode+0xe0>)
 8006eb6:	9301      	str	r3, [sp, #4]
 8006eb8:	2310      	movs	r3, #16
 8006eba:	9300      	str	r3, [sp, #0]
 8006ebc:	2318      	movs	r3, #24
 8006ebe:	22c8      	movs	r2, #200	@ 0xc8
 8006ec0:	21f0      	movs	r1, #240	@ 0xf0
 8006ec2:	201e      	movs	r0, #30
 8006ec4:	f7ff fbee 	bl	80066a4 <LCD_ShowString>
}
 8006ec8:	bf00      	nop
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	080090f0 	.word	0x080090f0
 8006ed4:	200000f4 	.word	0x200000f4
 8006ed8:	20000090 	.word	0x20000090
 8006edc:	08009100 	.word	0x08009100
 8006ee0:	08009110 	.word	0x08009110
 8006ee4:	08009120 	.word	0x08009120
 8006ee8:	08009124 	.word	0x08009124

08006eec <DisplayDecodingMode>:

void DisplayDecodingMode(void) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af02      	add	r7, sp, #8
    // Clear the screen
    LCD_Clear(BLUE);
 8006ef2:	201f      	movs	r0, #31
 8006ef4:	f7ff f952 	bl	800619c <LCD_Clear>
	LCD_ShowString(30, 20, 200, 24, 24, (uint8_t*) "Decoding Mode");
 8006ef8:	4b33      	ldr	r3, [pc, #204]	@ (8006fc8 <DisplayDecodingMode+0xdc>)
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	2318      	movs	r3, #24
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2318      	movs	r3, #24
 8006f02:	22c8      	movs	r2, #200	@ 0xc8
 8006f04:	2114      	movs	r1, #20
 8006f06:	201e      	movs	r0, #30
 8006f08:	f7ff fbcc 	bl	80066a4 <LCD_ShowString>
	LCD_DrawLine(0,70,319,70);
 8006f0c:	2346      	movs	r3, #70	@ 0x46
 8006f0e:	f240 123f 	movw	r2, #319	@ 0x13f
 8006f12:	2146      	movs	r1, #70	@ 0x46
 8006f14:	2000      	movs	r0, #0
 8006f16:	f7ff fa05 	bl	8006324 <LCD_DrawLine>
    // Display original data
	char* data_string = ConvertNumberToString(input_data,count);
 8006f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006fcc <DisplayDecodingMode+0xe0>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	4619      	mov	r1, r3
 8006f22:	482b      	ldr	r0, [pc, #172]	@ (8006fd0 <DisplayDecodingMode+0xe4>)
 8006f24:	f7ff ff40 	bl	8006da8 <ConvertNumberToString>
 8006f28:	6078      	str	r0, [r7, #4]
	LCD_ShowString(30, 80, 200, 24, 16, (uint8_t*) "Original data");
 8006f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd4 <DisplayDecodingMode+0xe8>)
 8006f2c:	9301      	str	r3, [sp, #4]
 8006f2e:	2310      	movs	r3, #16
 8006f30:	9300      	str	r3, [sp, #0]
 8006f32:	2318      	movs	r3, #24
 8006f34:	22c8      	movs	r2, #200	@ 0xc8
 8006f36:	2150      	movs	r1, #80	@ 0x50
 8006f38:	201e      	movs	r0, #30
 8006f3a:	f7ff fbb3 	bl	80066a4 <LCD_ShowString>
	LCD_ShowString(30, 110, 200, 24, 24, (uint8_t*)"");
 8006f3e:	4b26      	ldr	r3, [pc, #152]	@ (8006fd8 <DisplayDecodingMode+0xec>)
 8006f40:	9301      	str	r3, [sp, #4]
 8006f42:	2318      	movs	r3, #24
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	2318      	movs	r3, #24
 8006f48:	22c8      	movs	r2, #200	@ 0xc8
 8006f4a:	216e      	movs	r1, #110	@ 0x6e
 8006f4c:	201e      	movs	r0, #30
 8006f4e:	f7ff fba9 	bl	80066a4 <LCD_ShowString>
	LCD_DrawLine(0,140,319,140);
 8006f52:	238c      	movs	r3, #140	@ 0x8c
 8006f54:	f240 123f 	movw	r2, #319	@ 0x13f
 8006f58:	218c      	movs	r1, #140	@ 0x8c
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	f7ff f9e2 	bl	8006324 <LCD_DrawLine>

    // Display Hamming code
	LCD_ShowString(30, 150, 200, 24, 16, (uint8_t*) "Hamming code");
 8006f60:	4b1e      	ldr	r3, [pc, #120]	@ (8006fdc <DisplayDecodingMode+0xf0>)
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	2310      	movs	r3, #16
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	2318      	movs	r3, #24
 8006f6a:	22c8      	movs	r2, #200	@ 0xc8
 8006f6c:	2196      	movs	r1, #150	@ 0x96
 8006f6e:	201e      	movs	r0, #30
 8006f70:	f7ff fb98 	bl	80066a4 <LCD_ShowString>
	LCD_ShowString(30, 166, 200, 24, 24, (uint8_t*)data_string);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	2318      	movs	r3, #24
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	2318      	movs	r3, #24
 8006f7e:	22c8      	movs	r2, #200	@ 0xc8
 8006f80:	21a6      	movs	r1, #166	@ 0xa6
 8006f82:	201e      	movs	r0, #30
 8006f84:	f7ff fb8e 	bl	80066a4 <LCD_ShowString>
	LCD_ShowString(30, 190, 200, 24, 16, (uint8_t*) "with  parity bits");
 8006f88:	4b15      	ldr	r3, [pc, #84]	@ (8006fe0 <DisplayDecodingMode+0xf4>)
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	2318      	movs	r3, #24
 8006f92:	22c8      	movs	r2, #200	@ 0xc8
 8006f94:	21be      	movs	r1, #190	@ 0xbe
 8006f96:	201e      	movs	r0, #30
 8006f98:	f7ff fb84 	bl	80066a4 <LCD_ShowString>
	LCD_DrawLine(0,210,319,210);
 8006f9c:	23d2      	movs	r3, #210	@ 0xd2
 8006f9e:	f240 123f 	movw	r2, #319	@ 0x13f
 8006fa2:	21d2      	movs	r1, #210	@ 0xd2
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f7ff f9bd 	bl	8006324 <LCD_DrawLine>

    // Display "No errors"
	LCD_ShowString(30, 264, 200, 24, 12, (uint8_t*) "No errors!");
 8006faa:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <DisplayDecodingMode+0xf8>)
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	230c      	movs	r3, #12
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	2318      	movs	r3, #24
 8006fb4:	22c8      	movs	r2, #200	@ 0xc8
 8006fb6:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8006fba:	201e      	movs	r0, #30
 8006fbc:	f7ff fb72 	bl	80066a4 <LCD_ShowString>


}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	08009130 	.word	0x08009130
 8006fcc:	200000f4 	.word	0x200000f4
 8006fd0:	20000090 	.word	0x20000090
 8006fd4:	08009100 	.word	0x08009100
 8006fd8:	08009120 	.word	0x08009120
 8006fdc:	08009110 	.word	0x08009110
 8006fe0:	08009140 	.word	0x08009140
 8006fe4:	08009154 	.word	0x08009154

08006fe8 <calculateParityBits>:
            return (IRQn_Type)0xFF;  // Return 0xFF for invalid pin input
    }
}

// Function to calculate number of parity bits required
uint8_t calculateParityBits(uint8_t data_length) {
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
    uint8_t p = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
    while ((1 << p) < (data_length + p + 1)) {
 8006ff6:	e002      	b.n	8006ffe <calculateParityBits+0x16>
        p++;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	73fb      	strb	r3, [r7, #15]
    while ((1 << p) < (data_length + p + 1)) {
 8006ffe:	79fa      	ldrb	r2, [r7, #7]
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	441a      	add	r2, r3
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2101      	movs	r1, #1
 8007008:	fa01 f303 	lsl.w	r3, r1, r3
 800700c:	429a      	cmp	r2, r3
 800700e:	daf3      	bge.n	8006ff8 <calculateParityBits+0x10>
    }
    return p;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr

0800701c <hammingEncode>:

// Function to encode data using Hamming Code
void hammingEncode(uint8_t *data, uint8_t data_length, uint8_t **encoded, uint8_t *encoded_length) {
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b08d      	sub	sp, #52	@ 0x34
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	460b      	mov	r3, r1
 800702a:	72fb      	strb	r3, [r7, #11]
    uint8_t parity_bits = calculateParityBits(data_length);
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff ffda 	bl	8006fe8 <calculateParityBits>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    *encoded_length = data_length + parity_bits;
 800703a:	7afa      	ldrb	r2, [r7, #11]
 800703c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007040:	4413      	add	r3, r2
 8007042:	b2da      	uxtb	r2, r3
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	701a      	strb	r2, [r3, #0]
	LCD_ShowString(30 , 260, 200, 24, 16, (uint8_t*) "Parity Length: ");
 8007048:	4b84      	ldr	r3, [pc, #528]	@ (800725c <hammingEncode+0x240>)
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	2310      	movs	r3, #16
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	2318      	movs	r3, #24
 8007052:	22c8      	movs	r2, #200	@ 0xc8
 8007054:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8007058:	201e      	movs	r0, #30
 800705a:	f7ff fb23 	bl	80066a4 <LCD_ShowString>
    // 显示 parity_bits
    LCD_ShowNum(30 + 15 * 8, 260, parity_bits , 2, 16);
 800705e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8007062:	2310      	movs	r3, #16
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	2302      	movs	r3, #2
 8007068:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800706c:	2096      	movs	r0, #150	@ 0x96
 800706e:	f7ff faa7 	bl	80065c0 <LCD_ShowNum>

    // Allocate memory for encoded data
    *encoded = (uint8_t *)malloc(*encoded_length * sizeof(uint8_t));
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fb28 	bl	80086cc <malloc>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	601a      	str	r2, [r3, #0]

    uint8_t j = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for (uint8_t i = 1; i < *encoded_length + 1; i++) {
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007090:	e025      	b.n	80070de <hammingEncode+0xc2>
        // If i is a power of two, it's a parity bit position
        if ((i & (i - 1)) == 0) {
 8007092:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007096:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800709a:	3b01      	subs	r3, #1
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d108      	bne.n	80070b4 <hammingEncode+0x98>
            (*encoded)[i - 1] = 0; // Set parity bits to 0 for now
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070aa:	3b01      	subs	r3, #1
 80070ac:	4413      	add	r3, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	701a      	strb	r2, [r3, #0]
 80070b2:	e00f      	b.n	80070d4 <hammingEncode+0xb8>
        } else {
            (*encoded)[i - 1] = data[j++]; // Insert data bits
 80070b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80070be:	461a      	mov	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	441a      	add	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6819      	ldr	r1, [r3, #0]
 80070c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070cc:	3b01      	subs	r3, #1
 80070ce:	440b      	add	r3, r1
 80070d0:	7812      	ldrb	r2, [r2, #0]
 80070d2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 1; i < *encoded_length + 1; i++) {
 80070d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070d8:	3301      	adds	r3, #1
 80070da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d9d3      	bls.n	8007092 <hammingEncode+0x76>
        }
    }

    // Calculate parity bits
    for (uint8_t i = 0; i < parity_bits; i++) {
 80070ea:	2300      	movs	r3, #0
 80070ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80070f0:	e0a8      	b.n	8007244 <hammingEncode+0x228>
        uint8_t parity_position = (1 << i) - 1;
 80070f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070f6:	2201      	movs	r2, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        uint8_t parity_value = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

        for (uint8_t j = parity_position; j < *encoded_length; j++) {
 800710a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007112:	e01a      	b.n	800714a <hammingEncode+0x12e>
            // Each parity bit checks its corresponding bit of the encoded data, e.g., the first parity bit checks the bits whose 0th bit is 1
            if ((j + 1) & (1 << i)) {
 8007114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800711e:	fa42 f303 	asr.w	r3, r2, r3
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <hammingEncode+0x124>
                parity_value ^= (*encoded)[j ];
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007132:	4413      	add	r3, r2
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800713a:	4053      	eors	r3, r2
 800713c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        for (uint8_t j = parity_position; j < *encoded_length; j++) {
 8007140:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007144:	3301      	adds	r3, #1
 8007146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007152:	429a      	cmp	r2, r3
 8007154:	d3de      	bcc.n	8007114 <hammingEncode+0xf8>
            }
        }

        (*encoded)[parity_position] = parity_value;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800715e:	4413      	add	r3, r2
 8007160:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007164:	701a      	strb	r2, [r3, #0]
    	LCD_ShowString(30 , 280, 200, 24, 16, (uint8_t*) "Parity Bits: ");
 8007166:	4b3e      	ldr	r3, [pc, #248]	@ (8007260 <hammingEncode+0x244>)
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	2310      	movs	r3, #16
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	2318      	movs	r3, #24
 8007170:	22c8      	movs	r2, #200	@ 0xc8
 8007172:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007176:	201e      	movs	r0, #30
 8007178:	f7ff fa94 	bl	80066a4 <LCD_ShowString>
        LCD_ShowNum(30 + 104 + 16 * i, 280, parity_value, 1, 16);
 800717c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007180:	b29b      	uxth	r3, r3
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	b29b      	uxth	r3, r3
 8007186:	3386      	adds	r3, #134	@ 0x86
 8007188:	b298      	uxth	r0, r3
 800718a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800718e:	2310      	movs	r3, #16
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	2301      	movs	r3, #1
 8007194:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007198:	f7ff fa12 	bl	80065c0 <LCD_ShowNum>

        uint16_t s_x = 10;           // Starting X position on the LCD
 800719c:	230a      	movs	r3, #10
 800719e:	83fb      	strh	r3, [r7, #30]
        uint16_t s_y = 50;          // Starting Y position on the LCD
 80071a0:	2332      	movs	r3, #50	@ 0x32
 80071a2:	83bb      	strh	r3, [r7, #28]
        uint16_t e_x = 210;           // Ending X position on the LCD
 80071a4:	23d2      	movs	r3, #210	@ 0xd2
 80071a6:	837b      	strh	r3, [r7, #26]
        uint16_t e_y = 60;          // Ending Y position on the LCD
 80071a8:	233c      	movs	r3, #60	@ 0x3c
 80071aa:	833b      	strh	r3, [r7, #24]
        // Calculate progress percentage
        float progress_percentage = ((float)(i + 1) / parity_bits);
 80071ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071b0:	3301      	adds	r3, #1
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7f9 fbf8 	bl	80009a8 <__aeabi_i2f>
 80071b8:	4604      	mov	r4, r0
 80071ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80071be:	4618      	mov	r0, r3
 80071c0:	f7f9 fbf2 	bl	80009a8 <__aeabi_i2f>
 80071c4:	4603      	mov	r3, r0
 80071c6:	4619      	mov	r1, r3
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7f9 fcf5 	bl	8000bb8 <__aeabi_fdiv>
 80071ce:	4603      	mov	r3, r0
 80071d0:	617b      	str	r3, [r7, #20]

        // Draw the progress bar (background as empty and fill with progress)
        uint16_t fill_width = s_x + (uint16_t)round((e_x - s_x) * progress_percentage);
 80071d2:	8b7a      	ldrh	r2, [r7, #26]
 80071d4:	8bfb      	ldrh	r3, [r7, #30]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	4618      	mov	r0, r3
 80071da:	f7f9 fbe5 	bl	80009a8 <__aeabi_i2f>
 80071de:	4603      	mov	r3, r0
 80071e0:	6979      	ldr	r1, [r7, #20]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7f9 fc34 	bl	8000a50 <__aeabi_fmul>
 80071e8:	4603      	mov	r3, r0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7f9 faaa 	bl	8000744 <__aeabi_f2d>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4610      	mov	r0, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	f001 ff28 	bl	800904c <round>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4610      	mov	r0, r2
 8007202:	4619      	mov	r1, r3
 8007204:	f7f9 faf6 	bl	80007f4 <__aeabi_d2uiz>
 8007208:	4603      	mov	r3, r0
 800720a:	b29a      	uxth	r2, r3
 800720c:	8bfb      	ldrh	r3, [r7, #30]
 800720e:	4413      	add	r3, r2
 8007210:	827b      	strh	r3, [r7, #18]
        LCD_Color_Fill(s_x, s_y, fill_width, e_y, (uint16_t*) BLUE);
 8007212:	8b3b      	ldrh	r3, [r7, #24]
 8007214:	8a7a      	ldrh	r2, [r7, #18]
 8007216:	8bb9      	ldrh	r1, [r7, #28]
 8007218:	8bf8      	ldrh	r0, [r7, #30]
 800721a:	241f      	movs	r4, #31
 800721c:	9400      	str	r4, [sp, #0]
 800721e:	f7ff f81f 	bl	8006260 <LCD_Color_Fill>
        LCD_Color_Fill(fill_width, s_y, e_x , e_y,(uint16_t*) RED);
 8007222:	8b3b      	ldrh	r3, [r7, #24]
 8007224:	8b7a      	ldrh	r2, [r7, #26]
 8007226:	8bb9      	ldrh	r1, [r7, #28]
 8007228:	8a78      	ldrh	r0, [r7, #18]
 800722a:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 800722e:	9400      	str	r4, [sp, #0]
 8007230:	f7ff f816 	bl	8006260 <LCD_Color_Fill>
        HAL_Delay(100);
 8007234:	2064      	movs	r0, #100	@ 0x64
 8007236:	f000 fb11 	bl	800785c <HAL_Delay>
    for (uint8_t i = 0; i < parity_bits; i++) {
 800723a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800723e:	3301      	adds	r3, #1
 8007240:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007244:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007248:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800724c:	429a      	cmp	r2, r3
 800724e:	f4ff af50 	bcc.w	80070f2 <hammingEncode+0xd6>
//        char progress_text[16];
//        sprintf(progress_text, "Progress: %d%%", (int)(progress_percentage * 100));
//        LCD_ShowString(progress_x, progress_y + 30, 200, 24, 16, (uint8_t*)progress_text);

    }
}
 8007252:	bf00      	nop
 8007254:	bf00      	nop
 8007256:	372c      	adds	r7, #44	@ 0x2c
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}
 800725c:	08009160 	.word	0x08009160
 8007260:	08009170 	.word	0x08009170

08007264 <hammingDecode>:



// Function to perform Hamming decoding
void hammingDecode(uint8_t *encoded, uint8_t encoded_length, uint8_t **decoded, uint8_t *decoded_length) {
 8007264:	b590      	push	{r4, r7, lr}
 8007266:	b0d1      	sub	sp, #324	@ 0x144
 8007268:	af02      	add	r7, sp, #8
 800726a:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 800726e:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8007272:	6020      	str	r0, [r4, #0]
 8007274:	4608      	mov	r0, r1
 8007276:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 800727a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 800727e:	600a      	str	r2, [r1, #0]
 8007280:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007284:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800728e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007292:	4602      	mov	r2, r0
 8007294:	701a      	strb	r2, [r3, #0]
    // How many parity bits in total?
    uint8_t parity_count = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    while ((1 << parity_count) <= encoded_length) {
 800729c:	e004      	b.n	80072a8 <hammingDecode+0x44>
        parity_count++;
 800729e:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80072a2:	3301      	adds	r3, #1
 80072a4:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
    while ((1 << parity_count) <= encoded_length) {
 80072a8:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80072ac:	2201      	movs	r2, #1
 80072ae:	409a      	lsls	r2, r3
 80072b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072b4:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	ddef      	ble.n	800729e <hammingDecode+0x3a>
    }
    char display_buffer[256];  // 创建一个足够大的缓冲区来存储拼接后的字符串
    sprintf(display_buffer, "with %d parity bits", parity_count);
 80072be:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80072c2:	f107 0314 	add.w	r3, r7, #20
 80072c6:	499e      	ldr	r1, [pc, #632]	@ (8007540 <hammingDecode+0x2dc>)
 80072c8:	4618      	mov	r0, r3
 80072ca:	f001 fabd 	bl	8008848 <siprintf>

    // 使用拼接好的字符串在 LCD 上显示
    LCD_ShowString(30, 190, 200, 24, 16, (uint8_t*)display_buffer);
 80072ce:	f107 0314 	add.w	r3, r7, #20
 80072d2:	9301      	str	r3, [sp, #4]
 80072d4:	2310      	movs	r3, #16
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	2318      	movs	r3, #24
 80072da:	22c8      	movs	r2, #200	@ 0xc8
 80072dc:	21be      	movs	r1, #190	@ 0xbe
 80072de:	201e      	movs	r0, #30
 80072e0:	f7ff f9e0 	bl	80066a4 <LCD_ShowString>

    uint8_t error_pos = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136

    // Calculate the error position using parity checks
    for (uint8_t i = 0; i < parity_count; i++) {
 80072ea:	2300      	movs	r3, #0
 80072ec:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
 80072f0:	e0ca      	b.n	8007488 <hammingDecode+0x224>
        uint8_t parity_position = (1 << i) - 1;
 80072f2:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 80072f6:	2201      	movs	r2, #1
 80072f8:	fa02 f303 	lsl.w	r3, r2, r3
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	3b01      	subs	r3, #1
 8007300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        uint8_t parity_value = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134

        for (uint8_t j = parity_position; j < encoded_length; j++) {
 800730a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800730e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8007312:	e01d      	b.n	8007350 <hammingDecode+0xec>
            if ((j + 1) & (1 << i)) {
 8007314:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 800731e:	fa42 f303 	asr.w	r3, r2, r3
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00d      	beq.n	8007346 <hammingDecode+0xe2>
                parity_value ^= encoded[j];
 800732a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800732e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007332:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007336:	6812      	ldr	r2, [r2, #0]
 8007338:	4413      	add	r3, r2
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8007340:	4053      	eors	r3, r2
 8007342:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
        for (uint8_t j = parity_position; j < encoded_length; j++) {
 8007346:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 800734a:	3301      	adds	r3, #1
 800734c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8007350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007354:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8007358:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d3d8      	bcc.n	8007314 <hammingDecode+0xb0>
            }
        }

        if (parity_value != 0) {
 8007362:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00b      	beq.n	8007382 <hammingDecode+0x11e>
            error_pos |= (1 << i);
 800736a:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 800736e:	2201      	movs	r2, #1
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	b25a      	sxtb	r2, r3
 8007376:	f997 3136 	ldrsb.w	r3, [r7, #310]	@ 0x136
 800737a:	4313      	orrs	r3, r2
 800737c:	b25b      	sxtb	r3, r3
 800737e:	f887 3136 	strb.w	r3, [r7, #310]	@ 0x136
        }
    	LCD_ShowString(30 , 216, 200, 24, 12, (uint8_t*) "Parity Bits: ");
 8007382:	4b70      	ldr	r3, [pc, #448]	@ (8007544 <hammingDecode+0x2e0>)
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	230c      	movs	r3, #12
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	2318      	movs	r3, #24
 800738c:	22c8      	movs	r2, #200	@ 0xc8
 800738e:	21d8      	movs	r1, #216	@ 0xd8
 8007390:	201e      	movs	r0, #30
 8007392:	f7ff f987 	bl	80066a4 <LCD_ShowString>
        LCD_ShowNum(30 + 78 + 12 * i, 216, parity_value, 1, 12);
 8007396:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	0052      	lsls	r2, r2, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	336c      	adds	r3, #108	@ 0x6c
 80073a8:	b298      	uxth	r0, r3
 80073aa:	f897 2134 	ldrb.w	r2, [r7, #308]	@ 0x134
 80073ae:	230c      	movs	r3, #12
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	2301      	movs	r3, #1
 80073b4:	21d8      	movs	r1, #216	@ 0xd8
 80073b6:	f7ff f903 	bl	80065c0 <LCD_ShowNum>
        uint16_t s_x = 10;           // Starting X position on the LCD
 80073ba:	230a      	movs	r3, #10
 80073bc:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
        uint16_t s_y = 50;          // Starting Y position on the LCD
 80073c0:	2332      	movs	r3, #50	@ 0x32
 80073c2:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
        uint16_t e_x = 210;           // Ending X position on the LCD
 80073c6:	23d2      	movs	r3, #210	@ 0xd2
 80073c8:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
        uint16_t e_y = 60;          // Ending Y position on the LCD
 80073cc:	233c      	movs	r3, #60	@ 0x3c
 80073ce:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
        // Calculate progress percentage
        float progress_percentage = ((float)(i + 1) / parity_count);
 80073d2:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 80073d6:	3301      	adds	r3, #1
 80073d8:	4618      	mov	r0, r3
 80073da:	f7f9 fae5 	bl	80009a8 <__aeabi_i2f>
 80073de:	4604      	mov	r4, r0
 80073e0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7f9 fadf 	bl	80009a8 <__aeabi_i2f>
 80073ea:	4603      	mov	r3, r0
 80073ec:	4619      	mov	r1, r3
 80073ee:	4620      	mov	r0, r4
 80073f0:	f7f9 fbe2 	bl	8000bb8 <__aeabi_fdiv>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        // Draw the progress bar (background as empty and fill with progress)
        uint16_t fill_width = s_x + (uint16_t)round((e_x - s_x) * progress_percentage);
 80073fa:	f8b7 2120 	ldrh.w	r2, [r7, #288]	@ 0x120
 80073fe:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	4618      	mov	r0, r3
 8007406:	f7f9 facf 	bl	80009a8 <__aeabi_i2f>
 800740a:	4603      	mov	r3, r0
 800740c:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8007410:	4618      	mov	r0, r3
 8007412:	f7f9 fb1d 	bl	8000a50 <__aeabi_fmul>
 8007416:	4603      	mov	r3, r0
 8007418:	4618      	mov	r0, r3
 800741a:	f7f9 f993 	bl	8000744 <__aeabi_f2d>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	4610      	mov	r0, r2
 8007424:	4619      	mov	r1, r3
 8007426:	f001 fe11 	bl	800904c <round>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	f7f9 f9df 	bl	80007f4 <__aeabi_d2uiz>
 8007436:	4603      	mov	r3, r0
 8007438:	b29a      	uxth	r2, r3
 800743a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 800743e:	4413      	add	r3, r2
 8007440:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
        LCD_Color_Fill(s_x, s_y, fill_width, e_y, (uint16_t*) GREEN);
 8007444:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8007448:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 800744c:	f8b7 1122 	ldrh.w	r1, [r7, #290]	@ 0x122
 8007450:	f8b7 0124 	ldrh.w	r0, [r7, #292]	@ 0x124
 8007454:	f44f 64fc 	mov.w	r4, #2016	@ 0x7e0
 8007458:	9400      	str	r4, [sp, #0]
 800745a:	f7fe ff01 	bl	8006260 <LCD_Color_Fill>
        LCD_Color_Fill(fill_width, s_y, e_x , e_y,(uint16_t*) RED);
 800745e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8007462:	f8b7 2120 	ldrh.w	r2, [r7, #288]	@ 0x120
 8007466:	f8b7 1122 	ldrh.w	r1, [r7, #290]	@ 0x122
 800746a:	f8b7 0116 	ldrh.w	r0, [r7, #278]	@ 0x116
 800746e:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8007472:	9400      	str	r4, [sp, #0]
 8007474:	f7fe fef4 	bl	8006260 <LCD_Color_Fill>
        HAL_Delay(100);
 8007478:	2064      	movs	r0, #100	@ 0x64
 800747a:	f000 f9ef 	bl	800785c <HAL_Delay>
    for (uint8_t i = 0; i < parity_count; i++) {
 800747e:	f897 3135 	ldrb.w	r3, [r7, #309]	@ 0x135
 8007482:	3301      	adds	r3, #1
 8007484:	f887 3135 	strb.w	r3, [r7, #309]	@ 0x135
 8007488:	f897 2135 	ldrb.w	r2, [r7, #309]	@ 0x135
 800748c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8007490:	429a      	cmp	r2, r3
 8007492:	f4ff af2e 	bcc.w	80072f2 <hammingDecode+0x8e>
    }

    // Correct the error if needed
    if (error_pos != 0) {
 8007496:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 800749a:	2b00      	cmp	r3, #0
 800749c:	d013      	beq.n	80074c6 <hammingDecode+0x262>
    	sprintf(display_buffer, "One error occurs in bit %d", error_pos);
 800749e:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4928      	ldr	r1, [pc, #160]	@ (8007548 <hammingDecode+0x2e4>)
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f9cd 	bl	8008848 <siprintf>
    	LCD_ShowString(30, 230, 200, 24, 12, (uint8_t*) display_buffer);
 80074ae:	f107 0314 	add.w	r3, r7, #20
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	230c      	movs	r3, #12
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2318      	movs	r3, #24
 80074ba:	22c8      	movs	r2, #200	@ 0xc8
 80074bc:	21e6      	movs	r1, #230	@ 0xe6
 80074be:	201e      	movs	r0, #30
 80074c0:	f7ff f8f0 	bl	80066a4 <LCD_ShowString>
 80074c4:	e009      	b.n	80074da <hammingDecode+0x276>
    }else{
    	LCD_ShowString(30, 230, 200, 24, 12, (uint8_t*) "No errors!");
 80074c6:	4b21      	ldr	r3, [pc, #132]	@ (800754c <hammingDecode+0x2e8>)
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	230c      	movs	r3, #12
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2318      	movs	r3, #24
 80074d0:	22c8      	movs	r2, #200	@ 0xc8
 80074d2:	21e6      	movs	r1, #230	@ 0xe6
 80074d4:	201e      	movs	r0, #30
 80074d6:	f7ff f8e5 	bl	80066a4 <LCD_ShowString>
    }

    // Extract original data (excluding parity bits)
    *decoded_length = encoded_length - parity_count;
 80074da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074de:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074f0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	701a      	strb	r2, [r3, #0]

    *decoded = (uint8_t *)malloc(*decoded_length * sizeof(uint8_t));
 80074f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80074fc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f001 f8e1 	bl	80086cc <malloc>
 800750a:	4603      	mov	r3, r0
 800750c:	461a      	mov	r2, r3
 800750e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007512:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	601a      	str	r2, [r3, #0]

    // Now, define correct_data to hold the corrected data
    uint8_t* correct_data = (uint8_t *)malloc(*decoded_length * sizeof(uint8_t));
 800751a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800751e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f001 f8d0 	bl	80086cc <malloc>
 800752c:	4603      	mov	r3, r0
 800752e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c


    uint8_t j = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    for (uint8_t i = 1; i < encoded_length + 1; i++) {
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
 800753e:	e052      	b.n	80075e6 <hammingDecode+0x382>
 8007540:	08009180 	.word	0x08009180
 8007544:	08009170 	.word	0x08009170
 8007548:	08009194 	.word	0x08009194
 800754c:	08009154 	.word	0x08009154
        if ((i & (i - 1)) != 0) {
 8007550:	f897 2131 	ldrb.w	r2, [r7, #305]	@ 0x131
 8007554:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8007558:	3b01      	subs	r3, #1
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d03d      	beq.n	80075dc <hammingDecode+0x378>
            (*decoded)[j] = encoded[i - 1];
 8007560:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8007564:	3b01      	subs	r3, #1
 8007566:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800756a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	441a      	add	r2, r3
 8007572:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007576:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6819      	ldr	r1, [r3, #0]
 800757e:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 8007582:	440b      	add	r3, r1
 8007584:	7812      	ldrb	r2, [r2, #0]
 8007586:	701a      	strb	r2, [r3, #0]
            correct_data[j] = encoded[i - 1];
 8007588:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 800758c:	3b01      	subs	r3, #1
 800758e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007592:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	441a      	add	r2, r3
 800759a:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 800759e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80075a2:	440b      	add	r3, r1
 80075a4:	7812      	ldrb	r2, [r2, #0]
 80075a6:	701a      	strb	r2, [r3, #0]
            if(error_pos == i){
 80075a8:	f897 2136 	ldrb.w	r2, [r7, #310]	@ 0x136
 80075ac:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d10e      	bne.n	80075d2 <hammingDecode+0x36e>
            	correct_data[j] ^= 1;
 80075b4:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 80075b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80075bc:	4413      	add	r3, r2
 80075be:	781a      	ldrb	r2, [r3, #0]
 80075c0:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 80075c4:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80075c8:	440b      	add	r3, r1
 80075ca:	f082 0201 	eor.w	r2, r2, #1
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
            }
            j = j + 1;
 80075d2:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 80075d6:	3301      	adds	r3, #1
 80075d8:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    for (uint8_t i = 1; i < encoded_length + 1; i++) {
 80075dc:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80075e0:	3301      	adds	r3, #1
 80075e2:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
 80075e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80075ea:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 80075ee:	781a      	ldrb	r2, [r3, #0]
 80075f0:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d2ab      	bcs.n	8007550 <hammingDecode+0x2ec>
        }
    }
    char* data_string;
    if(error_pos !=0){
 80075f8:	f897 3136 	ldrb.w	r3, [r7, #310]	@ 0x136
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d026      	beq.n	800764e <hammingDecode+0x3ea>
    	data_string = ConvertNumberToString(*decoded,*decoded_length);
 8007600:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007604:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007610:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	4619      	mov	r1, r3
 800761a:	4610      	mov	r0, r2
 800761c:	f7ff fbc4 	bl	8006da8 <ConvertNumberToString>
 8007620:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    	sprintf(display_buffer, "The error data is %s", data_string);
 8007624:	f107 0314 	add.w	r3, r7, #20
 8007628:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800762c:	4926      	ldr	r1, [pc, #152]	@ (80076c8 <hammingDecode+0x464>)
 800762e:	4618      	mov	r0, r3
 8007630:	f001 f90a 	bl	8008848 <siprintf>
    	LCD_ShowString(30, 264, 200, 24, 12, (uint8_t*) display_buffer);
 8007634:	f107 0314 	add.w	r3, r7, #20
 8007638:	9301      	str	r3, [sp, #4]
 800763a:	230c      	movs	r3, #12
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	2318      	movs	r3, #24
 8007640:	22c8      	movs	r2, #200	@ 0xc8
 8007642:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8007646:	201e      	movs	r0, #30
 8007648:	f7ff f82c 	bl	80066a4 <LCD_ShowString>
 800764c:	e00a      	b.n	8007664 <hammingDecode+0x400>
    }else{
    	LCD_ShowString(30, 264, 200, 24, 12, (uint8_t*) "There is no error");
 800764e:	4b1f      	ldr	r3, [pc, #124]	@ (80076cc <hammingDecode+0x468>)
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	230c      	movs	r3, #12
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	2318      	movs	r3, #24
 8007658:	22c8      	movs	r2, #200	@ 0xc8
 800765a:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800765e:	201e      	movs	r0, #30
 8007660:	f7ff f820 	bl	80066a4 <LCD_ShowString>
    }
  	data_string = ConvertNumberToString(correct_data,*decoded_length);
 8007664:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007668:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	4619      	mov	r1, r3
 8007672:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8007676:	f7ff fb97 	bl	8006da8 <ConvertNumberToString>
 800767a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
	LCD_ShowString(30, 110, 200, 24, 24, (uint8_t*)data_string);
 800767e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	2318      	movs	r3, #24
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	2318      	movs	r3, #24
 800768a:	22c8      	movs	r2, #200	@ 0xc8
 800768c:	216e      	movs	r1, #110	@ 0x6e
 800768e:	201e      	movs	r0, #30
 8007690:	f7ff f808 	bl	80066a4 <LCD_ShowString>
  	sprintf(display_buffer, "The correct data is %s", data_string);
 8007694:	f107 0314 	add.w	r3, r7, #20
 8007698:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800769c:	490c      	ldr	r1, [pc, #48]	@ (80076d0 <hammingDecode+0x46c>)
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 f8d2 	bl	8008848 <siprintf>
  	LCD_ShowString(30, 298, 200, 24, 12, (uint8_t*) display_buffer );
 80076a4:	f107 0314 	add.w	r3, r7, #20
 80076a8:	9301      	str	r3, [sp, #4]
 80076aa:	230c      	movs	r3, #12
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	2318      	movs	r3, #24
 80076b0:	22c8      	movs	r2, #200	@ 0xc8
 80076b2:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 80076b6:	201e      	movs	r0, #30
 80076b8:	f7fe fff4 	bl	80066a4 <LCD_ShowString>

}
 80076bc:	bf00      	nop
 80076be:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd90      	pop	{r4, r7, pc}
 80076c6:	bf00      	nop
 80076c8:	080091b0 	.word	0x080091b0
 80076cc:	080091c8 	.word	0x080091c8
 80076d0:	080091dc 	.word	0x080091dc

080076d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076dc:	4a14      	ldr	r2, [pc, #80]	@ (8007730 <_sbrk+0x5c>)
 80076de:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <_sbrk+0x60>)
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076e8:	4b13      	ldr	r3, [pc, #76]	@ (8007738 <_sbrk+0x64>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d102      	bne.n	80076f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076f0:	4b11      	ldr	r3, [pc, #68]	@ (8007738 <_sbrk+0x64>)
 80076f2:	4a12      	ldr	r2, [pc, #72]	@ (800773c <_sbrk+0x68>)
 80076f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076f6:	4b10      	ldr	r3, [pc, #64]	@ (8007738 <_sbrk+0x64>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	429a      	cmp	r2, r3
 8007702:	d207      	bcs.n	8007714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007704:	f001 f8d8 	bl	80088b8 <__errno>
 8007708:	4603      	mov	r3, r0
 800770a:	220c      	movs	r2, #12
 800770c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800770e:	f04f 33ff 	mov.w	r3, #4294967295
 8007712:	e009      	b.n	8007728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007714:	4b08      	ldr	r3, [pc, #32]	@ (8007738 <_sbrk+0x64>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800771a:	4b07      	ldr	r3, [pc, #28]	@ (8007738 <_sbrk+0x64>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4413      	add	r3, r2
 8007722:	4a05      	ldr	r2, [pc, #20]	@ (8007738 <_sbrk+0x64>)
 8007724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007726:	68fb      	ldr	r3, [r7, #12]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	2000c000 	.word	0x2000c000
 8007734:	00000400 	.word	0x00000400
 8007738:	20000100 	.word	0x20000100
 800773c:	20000250 	.word	0x20000250

08007740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007744:	bf00      	nop
 8007746:	46bd      	mov	sp, r7
 8007748:	bc80      	pop	{r7}
 800774a:	4770      	bx	lr

0800774c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800774c:	f7ff fff8 	bl	8007740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007750:	480b      	ldr	r0, [pc, #44]	@ (8007780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8007752:	490c      	ldr	r1, [pc, #48]	@ (8007784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8007754:	4a0c      	ldr	r2, [pc, #48]	@ (8007788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8007756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007758:	e002      	b.n	8007760 <LoopCopyDataInit>

0800775a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800775a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800775c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800775e:	3304      	adds	r3, #4

08007760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007764:	d3f9      	bcc.n	800775a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007766:	4a09      	ldr	r2, [pc, #36]	@ (800778c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8007768:	4c09      	ldr	r4, [pc, #36]	@ (8007790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800776a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800776c:	e001      	b.n	8007772 <LoopFillZerobss>

0800776e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800776e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007770:	3204      	adds	r2, #4

08007772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007774:	d3fb      	bcc.n	800776e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007776:	f001 f8a5 	bl	80088c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800777a:	f7fe ffe0 	bl	800673e <main>
  bx lr
 800777e:	4770      	bx	lr
  ldr r0, =_sdata
 8007780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007784:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8007788:	0800aa14 	.word	0x0800aa14
  ldr r2, =_sbss
 800778c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8007790:	20000250 	.word	0x20000250

08007794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007794:	e7fe      	b.n	8007794 <ADC1_2_IRQHandler>
	...

08007798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800779c:	4b08      	ldr	r3, [pc, #32]	@ (80077c0 <HAL_Init+0x28>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a07      	ldr	r2, [pc, #28]	@ (80077c0 <HAL_Init+0x28>)
 80077a2:	f043 0310 	orr.w	r3, r3, #16
 80077a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077a8:	2003      	movs	r0, #3
 80077aa:	f000 f96b 	bl	8007a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077ae:	2003      	movs	r0, #3
 80077b0:	f000 f808 	bl	80077c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077b4:	f7ff f8c0 	bl	8006938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40022000 	.word	0x40022000

080077c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80077cc:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <HAL_InitTick+0x54>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	4b12      	ldr	r3, [pc, #72]	@ (800781c <HAL_InitTick+0x58>)
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	4619      	mov	r1, r3
 80077d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077da:	fbb3 f3f1 	udiv	r3, r3, r1
 80077de:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f991 	bl	8007b0a <HAL_SYSTICK_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e00e      	b.n	8007810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b0f      	cmp	r3, #15
 80077f6:	d80a      	bhi.n	800780e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80077f8:	2200      	movs	r2, #0
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007800:	f000 f94b 	bl	8007a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007804:	4a06      	ldr	r2, [pc, #24]	@ (8007820 <HAL_InitTick+0x5c>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e000      	b.n	8007810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
}
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000004 	.word	0x20000004
 800781c:	2000000c 	.word	0x2000000c
 8007820:	20000008 	.word	0x20000008

08007824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007828:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <HAL_IncTick+0x1c>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	4b05      	ldr	r3, [pc, #20]	@ (8007844 <HAL_IncTick+0x20>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4413      	add	r3, r2
 8007834:	4a03      	ldr	r2, [pc, #12]	@ (8007844 <HAL_IncTick+0x20>)
 8007836:	6013      	str	r3, [r2, #0]
}
 8007838:	bf00      	nop
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr
 8007840:	2000000c 	.word	0x2000000c
 8007844:	20000104 	.word	0x20000104

08007848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return uwTick;
 800784c:	4b02      	ldr	r3, [pc, #8]	@ (8007858 <HAL_GetTick+0x10>)
 800784e:	681b      	ldr	r3, [r3, #0]
}
 8007850:	4618      	mov	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	bc80      	pop	{r7}
 8007856:	4770      	bx	lr
 8007858:	20000104 	.word	0x20000104

0800785c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007864:	f7ff fff0 	bl	8007848 <HAL_GetTick>
 8007868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d005      	beq.n	8007882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007876:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <HAL_Delay+0x44>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007882:	bf00      	nop
 8007884:	f7ff ffe0 	bl	8007848 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	429a      	cmp	r2, r3
 8007892:	d8f7      	bhi.n	8007884 <HAL_Delay+0x28>
  {
  }
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	2000000c 	.word	0x2000000c

080078a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078b4:	4b0c      	ldr	r3, [pc, #48]	@ (80078e8 <__NVIC_SetPriorityGrouping+0x44>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80078c0:	4013      	ands	r3, r2
 80078c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80078d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078d6:	4a04      	ldr	r2, [pc, #16]	@ (80078e8 <__NVIC_SetPriorityGrouping+0x44>)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	60d3      	str	r3, [r2, #12]
}
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	e000ed00 	.word	0xe000ed00

080078ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80078f0:	4b04      	ldr	r3, [pc, #16]	@ (8007904 <__NVIC_GetPriorityGrouping+0x18>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	0a1b      	lsrs	r3, r3, #8
 80078f6:	f003 0307 	and.w	r3, r3, #7
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bc80      	pop	{r7}
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	e000ed00 	.word	0xe000ed00

08007908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007916:	2b00      	cmp	r3, #0
 8007918:	db0b      	blt.n	8007932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	f003 021f 	and.w	r2, r3, #31
 8007920:	4906      	ldr	r1, [pc, #24]	@ (800793c <__NVIC_EnableIRQ+0x34>)
 8007922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	2001      	movs	r0, #1
 800792a:	fa00 f202 	lsl.w	r2, r0, r2
 800792e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr
 800793c:	e000e100 	.word	0xe000e100

08007940 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800794a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	db12      	blt.n	8007978 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	f003 021f 	and.w	r2, r3, #31
 8007958:	490a      	ldr	r1, [pc, #40]	@ (8007984 <__NVIC_DisableIRQ+0x44>)
 800795a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800795e:	095b      	lsrs	r3, r3, #5
 8007960:	2001      	movs	r0, #1
 8007962:	fa00 f202 	lsl.w	r2, r0, r2
 8007966:	3320      	adds	r3, #32
 8007968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800796c:	f3bf 8f4f 	dsb	sy
}
 8007970:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007972:	f3bf 8f6f 	isb	sy
}
 8007976:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	e000e100 	.word	0xe000e100

08007988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	6039      	str	r1, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007998:	2b00      	cmp	r3, #0
 800799a:	db0a      	blt.n	80079b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	b2da      	uxtb	r2, r3
 80079a0:	490c      	ldr	r1, [pc, #48]	@ (80079d4 <__NVIC_SetPriority+0x4c>)
 80079a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a6:	0112      	lsls	r2, r2, #4
 80079a8:	b2d2      	uxtb	r2, r2
 80079aa:	440b      	add	r3, r1
 80079ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079b0:	e00a      	b.n	80079c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	b2da      	uxtb	r2, r3
 80079b6:	4908      	ldr	r1, [pc, #32]	@ (80079d8 <__NVIC_SetPriority+0x50>)
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	3b04      	subs	r3, #4
 80079c0:	0112      	lsls	r2, r2, #4
 80079c2:	b2d2      	uxtb	r2, r2
 80079c4:	440b      	add	r3, r1
 80079c6:	761a      	strb	r2, [r3, #24]
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bc80      	pop	{r7}
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	e000e100 	.word	0xe000e100
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079dc:	b480      	push	{r7}
 80079de:	b089      	sub	sp, #36	@ 0x24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f1c3 0307 	rsb	r3, r3, #7
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf28      	it	cs
 80079fa:	2304      	movcs	r3, #4
 80079fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2b06      	cmp	r3, #6
 8007a04:	d902      	bls.n	8007a0c <NVIC_EncodePriority+0x30>
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	3b03      	subs	r3, #3
 8007a0a:	e000      	b.n	8007a0e <NVIC_EncodePriority+0x32>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	401a      	ands	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a24:	f04f 31ff 	mov.w	r1, #4294967295
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	43d9      	mvns	r1, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a34:	4313      	orrs	r3, r2
         );
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3724      	adds	r7, #36	@ 0x24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr

08007a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a50:	d301      	bcc.n	8007a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a52:	2301      	movs	r3, #1
 8007a54:	e00f      	b.n	8007a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a56:	4a0a      	ldr	r2, [pc, #40]	@ (8007a80 <SysTick_Config+0x40>)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a5e:	210f      	movs	r1, #15
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	f7ff ff90 	bl	8007988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <SysTick_Config+0x40>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a6e:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <SysTick_Config+0x40>)
 8007a70:	2207      	movs	r2, #7
 8007a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	e000e010 	.word	0xe000e010

08007a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff ff09 	bl	80078a4 <__NVIC_SetPriorityGrouping>
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
 8007aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007aac:	f7ff ff1e 	bl	80078ec <__NVIC_GetPriorityGrouping>
 8007ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	6978      	ldr	r0, [r7, #20]
 8007ab8:	f7ff ff90 	bl	80079dc <NVIC_EncodePriority>
 8007abc:	4602      	mov	r2, r0
 8007abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff ff5f 	bl	8007988 <__NVIC_SetPriority>
}
 8007aca:	bf00      	nop
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	4603      	mov	r3, r0
 8007ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7ff ff11 	bl	8007908 <__NVIC_EnableIRQ>
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	4603      	mov	r3, r0
 8007af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7ff ff1f 	bl	8007940 <__NVIC_DisableIRQ>
}
 8007b02:	bf00      	nop
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff ff94 	bl	8007a40 <SysTick_Config>
 8007b18:	4603      	mov	r3, r0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b08b      	sub	sp, #44	@ 0x2c
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007b32:	2300      	movs	r3, #0
 8007b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b36:	e179      	b.n	8007e2c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007b38:	2201      	movs	r2, #1
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69fa      	ldr	r2, [r7, #28]
 8007b48:	4013      	ands	r3, r2
 8007b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	f040 8168 	bne.w	8007e26 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4a96      	ldr	r2, [pc, #600]	@ (8007db4 <HAL_GPIO_Init+0x290>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d05e      	beq.n	8007c1e <HAL_GPIO_Init+0xfa>
 8007b60:	4a94      	ldr	r2, [pc, #592]	@ (8007db4 <HAL_GPIO_Init+0x290>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d875      	bhi.n	8007c52 <HAL_GPIO_Init+0x12e>
 8007b66:	4a94      	ldr	r2, [pc, #592]	@ (8007db8 <HAL_GPIO_Init+0x294>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d058      	beq.n	8007c1e <HAL_GPIO_Init+0xfa>
 8007b6c:	4a92      	ldr	r2, [pc, #584]	@ (8007db8 <HAL_GPIO_Init+0x294>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d86f      	bhi.n	8007c52 <HAL_GPIO_Init+0x12e>
 8007b72:	4a92      	ldr	r2, [pc, #584]	@ (8007dbc <HAL_GPIO_Init+0x298>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d052      	beq.n	8007c1e <HAL_GPIO_Init+0xfa>
 8007b78:	4a90      	ldr	r2, [pc, #576]	@ (8007dbc <HAL_GPIO_Init+0x298>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d869      	bhi.n	8007c52 <HAL_GPIO_Init+0x12e>
 8007b7e:	4a90      	ldr	r2, [pc, #576]	@ (8007dc0 <HAL_GPIO_Init+0x29c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d04c      	beq.n	8007c1e <HAL_GPIO_Init+0xfa>
 8007b84:	4a8e      	ldr	r2, [pc, #568]	@ (8007dc0 <HAL_GPIO_Init+0x29c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d863      	bhi.n	8007c52 <HAL_GPIO_Init+0x12e>
 8007b8a:	4a8e      	ldr	r2, [pc, #568]	@ (8007dc4 <HAL_GPIO_Init+0x2a0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d046      	beq.n	8007c1e <HAL_GPIO_Init+0xfa>
 8007b90:	4a8c      	ldr	r2, [pc, #560]	@ (8007dc4 <HAL_GPIO_Init+0x2a0>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d85d      	bhi.n	8007c52 <HAL_GPIO_Init+0x12e>
 8007b96:	2b12      	cmp	r3, #18
 8007b98:	d82a      	bhi.n	8007bf0 <HAL_GPIO_Init+0xcc>
 8007b9a:	2b12      	cmp	r3, #18
 8007b9c:	d859      	bhi.n	8007c52 <HAL_GPIO_Init+0x12e>
 8007b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba4 <HAL_GPIO_Init+0x80>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007c1f 	.word	0x08007c1f
 8007ba8:	08007bf9 	.word	0x08007bf9
 8007bac:	08007c0b 	.word	0x08007c0b
 8007bb0:	08007c4d 	.word	0x08007c4d
 8007bb4:	08007c53 	.word	0x08007c53
 8007bb8:	08007c53 	.word	0x08007c53
 8007bbc:	08007c53 	.word	0x08007c53
 8007bc0:	08007c53 	.word	0x08007c53
 8007bc4:	08007c53 	.word	0x08007c53
 8007bc8:	08007c53 	.word	0x08007c53
 8007bcc:	08007c53 	.word	0x08007c53
 8007bd0:	08007c53 	.word	0x08007c53
 8007bd4:	08007c53 	.word	0x08007c53
 8007bd8:	08007c53 	.word	0x08007c53
 8007bdc:	08007c53 	.word	0x08007c53
 8007be0:	08007c53 	.word	0x08007c53
 8007be4:	08007c53 	.word	0x08007c53
 8007be8:	08007c01 	.word	0x08007c01
 8007bec:	08007c15 	.word	0x08007c15
 8007bf0:	4a75      	ldr	r2, [pc, #468]	@ (8007dc8 <HAL_GPIO_Init+0x2a4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d013      	beq.n	8007c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007bf6:	e02c      	b.n	8007c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	623b      	str	r3, [r7, #32]
          break;
 8007bfe:	e029      	b.n	8007c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	3304      	adds	r3, #4
 8007c06:	623b      	str	r3, [r7, #32]
          break;
 8007c08:	e024      	b.n	8007c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	623b      	str	r3, [r7, #32]
          break;
 8007c12:	e01f      	b.n	8007c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	330c      	adds	r3, #12
 8007c1a:	623b      	str	r3, [r7, #32]
          break;
 8007c1c:	e01a      	b.n	8007c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d102      	bne.n	8007c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007c26:	2304      	movs	r3, #4
 8007c28:	623b      	str	r3, [r7, #32]
          break;
 8007c2a:	e013      	b.n	8007c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d105      	bne.n	8007c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c34:	2308      	movs	r3, #8
 8007c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	611a      	str	r2, [r3, #16]
          break;
 8007c3e:	e009      	b.n	8007c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c40:	2308      	movs	r3, #8
 8007c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	615a      	str	r2, [r3, #20]
          break;
 8007c4a:	e003      	b.n	8007c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	623b      	str	r3, [r7, #32]
          break;
 8007c50:	e000      	b.n	8007c54 <HAL_GPIO_Init+0x130>
          break;
 8007c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	2bff      	cmp	r3, #255	@ 0xff
 8007c58:	d801      	bhi.n	8007c5e <HAL_GPIO_Init+0x13a>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	e001      	b.n	8007c62 <HAL_GPIO_Init+0x13e>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3304      	adds	r3, #4
 8007c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2bff      	cmp	r3, #255	@ 0xff
 8007c68:	d802      	bhi.n	8007c70 <HAL_GPIO_Init+0x14c>
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	e002      	b.n	8007c76 <HAL_GPIO_Init+0x152>
 8007c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c72:	3b08      	subs	r3, #8
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	210f      	movs	r1, #15
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	fa01 f303 	lsl.w	r3, r1, r3
 8007c84:	43db      	mvns	r3, r3
 8007c86:	401a      	ands	r2, r3
 8007c88:	6a39      	ldr	r1, [r7, #32]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c90:	431a      	orrs	r2, r3
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 80c1 	beq.w	8007e26 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007ca4:	4b49      	ldr	r3, [pc, #292]	@ (8007dcc <HAL_GPIO_Init+0x2a8>)
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	4a48      	ldr	r2, [pc, #288]	@ (8007dcc <HAL_GPIO_Init+0x2a8>)
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	6193      	str	r3, [r2, #24]
 8007cb0:	4b46      	ldr	r3, [pc, #280]	@ (8007dcc <HAL_GPIO_Init+0x2a8>)
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]
 8007cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007cbc:	4a44      	ldr	r2, [pc, #272]	@ (8007dd0 <HAL_GPIO_Init+0x2ac>)
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc0:	089b      	lsrs	r3, r3, #2
 8007cc2:	3302      	adds	r3, #2
 8007cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	220f      	movs	r2, #15
 8007cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8007dd4 <HAL_GPIO_Init+0x2b0>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d01f      	beq.n	8007d28 <HAL_GPIO_Init+0x204>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a3b      	ldr	r2, [pc, #236]	@ (8007dd8 <HAL_GPIO_Init+0x2b4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d019      	beq.n	8007d24 <HAL_GPIO_Init+0x200>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a3a      	ldr	r2, [pc, #232]	@ (8007ddc <HAL_GPIO_Init+0x2b8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <HAL_GPIO_Init+0x1fc>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a39      	ldr	r2, [pc, #228]	@ (8007de0 <HAL_GPIO_Init+0x2bc>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00d      	beq.n	8007d1c <HAL_GPIO_Init+0x1f8>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a38      	ldr	r2, [pc, #224]	@ (8007de4 <HAL_GPIO_Init+0x2c0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d007      	beq.n	8007d18 <HAL_GPIO_Init+0x1f4>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a37      	ldr	r2, [pc, #220]	@ (8007de8 <HAL_GPIO_Init+0x2c4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d101      	bne.n	8007d14 <HAL_GPIO_Init+0x1f0>
 8007d10:	2305      	movs	r3, #5
 8007d12:	e00a      	b.n	8007d2a <HAL_GPIO_Init+0x206>
 8007d14:	2306      	movs	r3, #6
 8007d16:	e008      	b.n	8007d2a <HAL_GPIO_Init+0x206>
 8007d18:	2304      	movs	r3, #4
 8007d1a:	e006      	b.n	8007d2a <HAL_GPIO_Init+0x206>
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e004      	b.n	8007d2a <HAL_GPIO_Init+0x206>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e002      	b.n	8007d2a <HAL_GPIO_Init+0x206>
 8007d24:	2301      	movs	r3, #1
 8007d26:	e000      	b.n	8007d2a <HAL_GPIO_Init+0x206>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d2c:	f002 0203 	and.w	r2, r2, #3
 8007d30:	0092      	lsls	r2, r2, #2
 8007d32:	4093      	lsls	r3, r2
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007d3a:	4925      	ldr	r1, [pc, #148]	@ (8007dd0 <HAL_GPIO_Init+0x2ac>)
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3e:	089b      	lsrs	r3, r3, #2
 8007d40:	3302      	adds	r3, #2
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d006      	beq.n	8007d62 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d54:	4b25      	ldr	r3, [pc, #148]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	4924      	ldr	r1, [pc, #144]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	608b      	str	r3, [r1, #8]
 8007d60:	e006      	b.n	8007d70 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007d62:	4b22      	ldr	r3, [pc, #136]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	4920      	ldr	r1, [pc, #128]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	491a      	ldr	r1, [pc, #104]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60cb      	str	r3, [r1, #12]
 8007d88:	e006      	b.n	8007d98 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007d8a:	4b18      	ldr	r3, [pc, #96]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	4916      	ldr	r1, [pc, #88]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d025      	beq.n	8007df0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007da4:	4b11      	ldr	r3, [pc, #68]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	4910      	ldr	r1, [pc, #64]	@ (8007dec <HAL_GPIO_Init+0x2c8>)
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	604b      	str	r3, [r1, #4]
 8007db0:	e025      	b.n	8007dfe <HAL_GPIO_Init+0x2da>
 8007db2:	bf00      	nop
 8007db4:	10320000 	.word	0x10320000
 8007db8:	10310000 	.word	0x10310000
 8007dbc:	10220000 	.word	0x10220000
 8007dc0:	10210000 	.word	0x10210000
 8007dc4:	10120000 	.word	0x10120000
 8007dc8:	10110000 	.word	0x10110000
 8007dcc:	40021000 	.word	0x40021000
 8007dd0:	40010000 	.word	0x40010000
 8007dd4:	40010800 	.word	0x40010800
 8007dd8:	40010c00 	.word	0x40010c00
 8007ddc:	40011000 	.word	0x40011000
 8007de0:	40011400 	.word	0x40011400
 8007de4:	40011800 	.word	0x40011800
 8007de8:	40011c00 	.word	0x40011c00
 8007dec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007df0:	4b15      	ldr	r3, [pc, #84]	@ (8007e48 <HAL_GPIO_Init+0x324>)
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	43db      	mvns	r3, r3
 8007df8:	4913      	ldr	r1, [pc, #76]	@ (8007e48 <HAL_GPIO_Init+0x324>)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d006      	beq.n	8007e18 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e48 <HAL_GPIO_Init+0x324>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	490e      	ldr	r1, [pc, #56]	@ (8007e48 <HAL_GPIO_Init+0x324>)
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	600b      	str	r3, [r1, #0]
 8007e16:	e006      	b.n	8007e26 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e18:	4b0b      	ldr	r3, [pc, #44]	@ (8007e48 <HAL_GPIO_Init+0x324>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	43db      	mvns	r3, r3
 8007e20:	4909      	ldr	r1, [pc, #36]	@ (8007e48 <HAL_GPIO_Init+0x324>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	3301      	adds	r3, #1
 8007e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	fa22 f303 	lsr.w	r3, r2, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f ae7e 	bne.w	8007b38 <HAL_GPIO_Init+0x14>
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	372c      	adds	r7, #44	@ 0x2c
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr
 8007e48:	40010400 	.word	0x40010400

08007e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	887b      	ldrh	r3, [r7, #2]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
 8007e68:	e001      	b.n	8007e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	807b      	strh	r3, [r7, #2]
 8007e86:	4613      	mov	r3, r2
 8007e88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e8a:	787b      	ldrb	r3, [r7, #1]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e90:	887a      	ldrh	r2, [r7, #2]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007e96:	e003      	b.n	8007ea0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007e98:	887b      	ldrh	r3, [r7, #2]
 8007e9a:	041a      	lsls	r2, r3, #16
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	611a      	str	r2, [r3, #16]
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bc80      	pop	{r7}
 8007ea8:	4770      	bx	lr

08007eaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ebc:	887a      	ldrh	r2, [r7, #2]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	041a      	lsls	r2, r3, #16
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	43d9      	mvns	r1, r3
 8007ec8:	887b      	ldrh	r3, [r7, #2]
 8007eca:	400b      	ands	r3, r1
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	611a      	str	r2, [r3, #16]
}
 8007ed2:	bf00      	nop
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc80      	pop	{r7}
 8007eda:	4770      	bx	lr

08007edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007ee6:	4b08      	ldr	r3, [pc, #32]	@ (8007f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ee8:	695a      	ldr	r2, [r3, #20]
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	4013      	ands	r3, r2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d006      	beq.n	8007f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ef2:	4a05      	ldr	r2, [pc, #20]	@ (8007f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007ef8:	88fb      	ldrh	r3, [r7, #6]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe fd90 	bl	8006a20 <HAL_GPIO_EXTI_Callback>
  }
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40010400 	.word	0x40010400

08007f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e272      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8087 	beq.w	800803a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f2c:	4b92      	ldr	r3, [pc, #584]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f003 030c 	and.w	r3, r3, #12
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d00c      	beq.n	8007f52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007f38:	4b8f      	ldr	r3, [pc, #572]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f003 030c 	and.w	r3, r3, #12
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d112      	bne.n	8007f6a <HAL_RCC_OscConfig+0x5e>
 8007f44:	4b8c      	ldr	r3, [pc, #560]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f50:	d10b      	bne.n	8007f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f52:	4b89      	ldr	r3, [pc, #548]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d06c      	beq.n	8008038 <HAL_RCC_OscConfig+0x12c>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d168      	bne.n	8008038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e24c      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f72:	d106      	bne.n	8007f82 <HAL_RCC_OscConfig+0x76>
 8007f74:	4b80      	ldr	r3, [pc, #512]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a7f      	ldr	r2, [pc, #508]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	e02e      	b.n	8007fe0 <HAL_RCC_OscConfig+0xd4>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10c      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x98>
 8007f8a:	4b7b      	ldr	r3, [pc, #492]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a7a      	ldr	r2, [pc, #488]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	4b78      	ldr	r3, [pc, #480]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a77      	ldr	r2, [pc, #476]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fa0:	6013      	str	r3, [r2, #0]
 8007fa2:	e01d      	b.n	8007fe0 <HAL_RCC_OscConfig+0xd4>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fac:	d10c      	bne.n	8007fc8 <HAL_RCC_OscConfig+0xbc>
 8007fae:	4b72      	ldr	r3, [pc, #456]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a71      	ldr	r2, [pc, #452]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	4b6f      	ldr	r3, [pc, #444]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a6e      	ldr	r2, [pc, #440]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	e00b      	b.n	8007fe0 <HAL_RCC_OscConfig+0xd4>
 8007fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a6a      	ldr	r2, [pc, #424]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	4b68      	ldr	r3, [pc, #416]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a67      	ldr	r2, [pc, #412]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8007fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d013      	beq.n	8008010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe8:	f7ff fc2e 	bl	8007848 <HAL_GetTick>
 8007fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ff0:	f7ff fc2a 	bl	8007848 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b64      	cmp	r3, #100	@ 0x64
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e200      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008002:	4b5d      	ldr	r3, [pc, #372]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <HAL_RCC_OscConfig+0xe4>
 800800e:	e014      	b.n	800803a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008010:	f7ff fc1a 	bl	8007848 <HAL_GetTick>
 8008014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008016:	e008      	b.n	800802a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008018:	f7ff fc16 	bl	8007848 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b64      	cmp	r3, #100	@ 0x64
 8008024:	d901      	bls.n	800802a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e1ec      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800802a:	4b53      	ldr	r3, [pc, #332]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1f0      	bne.n	8008018 <HAL_RCC_OscConfig+0x10c>
 8008036:	e000      	b.n	800803a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	d063      	beq.n	800810e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008046:	4b4c      	ldr	r3, [pc, #304]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f003 030c 	and.w	r3, r3, #12
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00b      	beq.n	800806a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008052:	4b49      	ldr	r3, [pc, #292]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f003 030c 	and.w	r3, r3, #12
 800805a:	2b08      	cmp	r3, #8
 800805c:	d11c      	bne.n	8008098 <HAL_RCC_OscConfig+0x18c>
 800805e:	4b46      	ldr	r3, [pc, #280]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d116      	bne.n	8008098 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800806a:	4b43      	ldr	r3, [pc, #268]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <HAL_RCC_OscConfig+0x176>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d001      	beq.n	8008082 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e1c0      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008082:	4b3d      	ldr	r3, [pc, #244]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	4939      	ldr	r1, [pc, #228]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008092:	4313      	orrs	r3, r2
 8008094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008096:	e03a      	b.n	800810e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d020      	beq.n	80080e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080a0:	4b36      	ldr	r3, [pc, #216]	@ (800817c <HAL_RCC_OscConfig+0x270>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a6:	f7ff fbcf 	bl	8007848 <HAL_GetTick>
 80080aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080ae:	f7ff fbcb 	bl	8007848 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e1a1      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	4927      	ldr	r1, [pc, #156]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	600b      	str	r3, [r1, #0]
 80080e0:	e015      	b.n	800810e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080e2:	4b26      	ldr	r3, [pc, #152]	@ (800817c <HAL_RCC_OscConfig+0x270>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e8:	f7ff fbae 	bl	8007848 <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080f0:	f7ff fbaa 	bl	8007848 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e180      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008102:	4b1d      	ldr	r3, [pc, #116]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f0      	bne.n	80080f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0308 	and.w	r3, r3, #8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d03a      	beq.n	8008190 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d019      	beq.n	8008156 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008122:	4b17      	ldr	r3, [pc, #92]	@ (8008180 <HAL_RCC_OscConfig+0x274>)
 8008124:	2201      	movs	r2, #1
 8008126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008128:	f7ff fb8e 	bl	8007848 <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008130:	f7ff fb8a 	bl	8007848 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e160      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008142:	4b0d      	ldr	r3, [pc, #52]	@ (8008178 <HAL_RCC_OscConfig+0x26c>)
 8008144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008146:	f003 0302 	and.w	r3, r3, #2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800814e:	2001      	movs	r0, #1
 8008150:	f000 fa9e 	bl	8008690 <RCC_Delay>
 8008154:	e01c      	b.n	8008190 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008156:	4b0a      	ldr	r3, [pc, #40]	@ (8008180 <HAL_RCC_OscConfig+0x274>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800815c:	f7ff fb74 	bl	8007848 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008162:	e00f      	b.n	8008184 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008164:	f7ff fb70 	bl	8007848 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d908      	bls.n	8008184 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e146      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
 8008176:	bf00      	nop
 8008178:	40021000 	.word	0x40021000
 800817c:	42420000 	.word	0x42420000
 8008180:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008184:	4b92      	ldr	r3, [pc, #584]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008188:	f003 0302 	and.w	r3, r3, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e9      	bne.n	8008164 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0304 	and.w	r3, r3, #4
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80a6 	beq.w	80082ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081a2:	4b8b      	ldr	r3, [pc, #556]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10d      	bne.n	80081ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ae:	4b88      	ldr	r3, [pc, #544]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	4a87      	ldr	r2, [pc, #540]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80081b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b8:	61d3      	str	r3, [r2, #28]
 80081ba:	4b85      	ldr	r3, [pc, #532]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081c6:	2301      	movs	r3, #1
 80081c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ca:	4b82      	ldr	r3, [pc, #520]	@ (80083d4 <HAL_RCC_OscConfig+0x4c8>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d118      	bne.n	8008208 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081d6:	4b7f      	ldr	r3, [pc, #508]	@ (80083d4 <HAL_RCC_OscConfig+0x4c8>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a7e      	ldr	r2, [pc, #504]	@ (80083d4 <HAL_RCC_OscConfig+0x4c8>)
 80081dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081e2:	f7ff fb31 	bl	8007848 <HAL_GetTick>
 80081e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e8:	e008      	b.n	80081fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ea:	f7ff fb2d 	bl	8007848 <HAL_GetTick>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	2b64      	cmp	r3, #100	@ 0x64
 80081f6:	d901      	bls.n	80081fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e103      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081fc:	4b75      	ldr	r3, [pc, #468]	@ (80083d4 <HAL_RCC_OscConfig+0x4c8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0f0      	beq.n	80081ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d106      	bne.n	800821e <HAL_RCC_OscConfig+0x312>
 8008210:	4b6f      	ldr	r3, [pc, #444]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	4a6e      	ldr	r2, [pc, #440]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008216:	f043 0301 	orr.w	r3, r3, #1
 800821a:	6213      	str	r3, [r2, #32]
 800821c:	e02d      	b.n	800827a <HAL_RCC_OscConfig+0x36e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <HAL_RCC_OscConfig+0x334>
 8008226:	4b6a      	ldr	r3, [pc, #424]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	4a69      	ldr	r2, [pc, #420]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 800822c:	f023 0301 	bic.w	r3, r3, #1
 8008230:	6213      	str	r3, [r2, #32]
 8008232:	4b67      	ldr	r3, [pc, #412]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	4a66      	ldr	r2, [pc, #408]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008238:	f023 0304 	bic.w	r3, r3, #4
 800823c:	6213      	str	r3, [r2, #32]
 800823e:	e01c      	b.n	800827a <HAL_RCC_OscConfig+0x36e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b05      	cmp	r3, #5
 8008246:	d10c      	bne.n	8008262 <HAL_RCC_OscConfig+0x356>
 8008248:	4b61      	ldr	r3, [pc, #388]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 800824a:	6a1b      	ldr	r3, [r3, #32]
 800824c:	4a60      	ldr	r2, [pc, #384]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 800824e:	f043 0304 	orr.w	r3, r3, #4
 8008252:	6213      	str	r3, [r2, #32]
 8008254:	4b5e      	ldr	r3, [pc, #376]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	4a5d      	ldr	r2, [pc, #372]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	6213      	str	r3, [r2, #32]
 8008260:	e00b      	b.n	800827a <HAL_RCC_OscConfig+0x36e>
 8008262:	4b5b      	ldr	r3, [pc, #364]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	4a5a      	ldr	r2, [pc, #360]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008268:	f023 0301 	bic.w	r3, r3, #1
 800826c:	6213      	str	r3, [r2, #32]
 800826e:	4b58      	ldr	r3, [pc, #352]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	4a57      	ldr	r2, [pc, #348]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008274:	f023 0304 	bic.w	r3, r3, #4
 8008278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d015      	beq.n	80082ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008282:	f7ff fae1 	bl	8007848 <HAL_GetTick>
 8008286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008288:	e00a      	b.n	80082a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800828a:	f7ff fadd 	bl	8007848 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008298:	4293      	cmp	r3, r2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e0b1      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a0:	4b4b      	ldr	r3, [pc, #300]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0ee      	beq.n	800828a <HAL_RCC_OscConfig+0x37e>
 80082ac:	e014      	b.n	80082d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082ae:	f7ff facb 	bl	8007848 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b4:	e00a      	b.n	80082cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082b6:	f7ff fac7 	bl	8007848 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e09b      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082cc:	4b40      	ldr	r3, [pc, #256]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1ee      	bne.n	80082b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d105      	bne.n	80082ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082de:	4b3c      	ldr	r3, [pc, #240]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	4a3b      	ldr	r2, [pc, #236]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80082e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 8087 	beq.w	8008402 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082f4:	4b36      	ldr	r3, [pc, #216]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f003 030c 	and.w	r3, r3, #12
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d061      	beq.n	80083c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	69db      	ldr	r3, [r3, #28]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d146      	bne.n	8008396 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008308:	4b33      	ldr	r3, [pc, #204]	@ (80083d8 <HAL_RCC_OscConfig+0x4cc>)
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830e:	f7ff fa9b 	bl	8007848 <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008316:	f7ff fa97 	bl	8007848 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e06d      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008328:	4b29      	ldr	r3, [pc, #164]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1f0      	bne.n	8008316 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800833c:	d108      	bne.n	8008350 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800833e:	4b24      	ldr	r3, [pc, #144]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	4921      	ldr	r1, [pc, #132]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 800834c:	4313      	orrs	r3, r2
 800834e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008350:	4b1f      	ldr	r3, [pc, #124]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a19      	ldr	r1, [r3, #32]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008360:	430b      	orrs	r3, r1
 8008362:	491b      	ldr	r1, [pc, #108]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 8008364:	4313      	orrs	r3, r2
 8008366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008368:	4b1b      	ldr	r3, [pc, #108]	@ (80083d8 <HAL_RCC_OscConfig+0x4cc>)
 800836a:	2201      	movs	r2, #1
 800836c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800836e:	f7ff fa6b 	bl	8007848 <HAL_GetTick>
 8008372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008374:	e008      	b.n	8008388 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008376:	f7ff fa67 	bl	8007848 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	2b02      	cmp	r3, #2
 8008382:	d901      	bls.n	8008388 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e03d      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008388:	4b11      	ldr	r3, [pc, #68]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d0f0      	beq.n	8008376 <HAL_RCC_OscConfig+0x46a>
 8008394:	e035      	b.n	8008402 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008396:	4b10      	ldr	r3, [pc, #64]	@ (80083d8 <HAL_RCC_OscConfig+0x4cc>)
 8008398:	2200      	movs	r2, #0
 800839a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800839c:	f7ff fa54 	bl	8007848 <HAL_GetTick>
 80083a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083a2:	e008      	b.n	80083b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083a4:	f7ff fa50 	bl	8007848 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d901      	bls.n	80083b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	e026      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083b6:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <HAL_RCC_OscConfig+0x4c4>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f0      	bne.n	80083a4 <HAL_RCC_OscConfig+0x498>
 80083c2:	e01e      	b.n	8008402 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d107      	bne.n	80083dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e019      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
 80083d0:	40021000 	.word	0x40021000
 80083d4:	40007000 	.word	0x40007000
 80083d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80083dc:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <HAL_RCC_OscConfig+0x500>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d106      	bne.n	80083fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d001      	beq.n	8008402 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	40021000 	.word	0x40021000

08008410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e0d0      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008424:	4b6a      	ldr	r3, [pc, #424]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d910      	bls.n	8008454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008432:	4b67      	ldr	r3, [pc, #412]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f023 0207 	bic.w	r2, r3, #7
 800843a:	4965      	ldr	r1, [pc, #404]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	4313      	orrs	r3, r2
 8008440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008442:	4b63      	ldr	r3, [pc, #396]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d001      	beq.n	8008454 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e0b8      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d020      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800846c:	4b59      	ldr	r3, [pc, #356]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	4a58      	ldr	r2, [pc, #352]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008472:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008476:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0308 	and.w	r3, r3, #8
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008484:	4b53      	ldr	r3, [pc, #332]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	4a52      	ldr	r2, [pc, #328]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 800848a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800848e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008490:	4b50      	ldr	r3, [pc, #320]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	494d      	ldr	r1, [pc, #308]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d040      	beq.n	8008530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d107      	bne.n	80084c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084b6:	4b47      	ldr	r3, [pc, #284]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d115      	bne.n	80084ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e07f      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d107      	bne.n	80084de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ce:	4b41      	ldr	r3, [pc, #260]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d109      	bne.n	80084ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e073      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084de:	4b3d      	ldr	r3, [pc, #244]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e06b      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084ee:	4b39      	ldr	r3, [pc, #228]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f023 0203 	bic.w	r2, r3, #3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	4936      	ldr	r1, [pc, #216]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008500:	f7ff f9a2 	bl	8007848 <HAL_GetTick>
 8008504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008506:	e00a      	b.n	800851e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008508:	f7ff f99e 	bl	8007848 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008516:	4293      	cmp	r3, r2
 8008518:	d901      	bls.n	800851e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e053      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800851e:	4b2d      	ldr	r3, [pc, #180]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f003 020c 	and.w	r2, r3, #12
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	429a      	cmp	r2, r3
 800852e:	d1eb      	bne.n	8008508 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008530:	4b27      	ldr	r3, [pc, #156]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	429a      	cmp	r2, r3
 800853c:	d210      	bcs.n	8008560 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800853e:	4b24      	ldr	r3, [pc, #144]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f023 0207 	bic.w	r2, r3, #7
 8008546:	4922      	ldr	r1, [pc, #136]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	4313      	orrs	r3, r2
 800854c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800854e:	4b20      	ldr	r3, [pc, #128]	@ (80085d0 <HAL_RCC_ClockConfig+0x1c0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	429a      	cmp	r2, r3
 800855a:	d001      	beq.n	8008560 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e032      	b.n	80085c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d008      	beq.n	800857e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800856c:	4b19      	ldr	r3, [pc, #100]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	4916      	ldr	r1, [pc, #88]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 800857a:	4313      	orrs	r3, r2
 800857c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800858a:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	490e      	ldr	r1, [pc, #56]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 800859a:	4313      	orrs	r3, r2
 800859c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800859e:	f000 f821 	bl	80085e4 <HAL_RCC_GetSysClockFreq>
 80085a2:	4602      	mov	r2, r0
 80085a4:	4b0b      	ldr	r3, [pc, #44]	@ (80085d4 <HAL_RCC_ClockConfig+0x1c4>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	091b      	lsrs	r3, r3, #4
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	490a      	ldr	r1, [pc, #40]	@ (80085d8 <HAL_RCC_ClockConfig+0x1c8>)
 80085b0:	5ccb      	ldrb	r3, [r1, r3]
 80085b2:	fa22 f303 	lsr.w	r3, r2, r3
 80085b6:	4a09      	ldr	r2, [pc, #36]	@ (80085dc <HAL_RCC_ClockConfig+0x1cc>)
 80085b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80085ba:	4b09      	ldr	r3, [pc, #36]	@ (80085e0 <HAL_RCC_ClockConfig+0x1d0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f7ff f900 	bl	80077c4 <HAL_InitTick>

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40022000 	.word	0x40022000
 80085d4:	40021000 	.word	0x40021000
 80085d8:	0800a9b4 	.word	0x0800a9b4
 80085dc:	20000004 	.word	0x20000004
 80085e0:	20000008 	.word	0x20000008

080085e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	2300      	movs	r3, #0
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80085fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008678 <HAL_RCC_GetSysClockFreq+0x94>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f003 030c 	and.w	r3, r3, #12
 800860a:	2b04      	cmp	r3, #4
 800860c:	d002      	beq.n	8008614 <HAL_RCC_GetSysClockFreq+0x30>
 800860e:	2b08      	cmp	r3, #8
 8008610:	d003      	beq.n	800861a <HAL_RCC_GetSysClockFreq+0x36>
 8008612:	e027      	b.n	8008664 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008614:	4b19      	ldr	r3, [pc, #100]	@ (800867c <HAL_RCC_GetSysClockFreq+0x98>)
 8008616:	613b      	str	r3, [r7, #16]
      break;
 8008618:	e027      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	0c9b      	lsrs	r3, r3, #18
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	4a17      	ldr	r2, [pc, #92]	@ (8008680 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008624:	5cd3      	ldrb	r3, [r2, r3]
 8008626:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008632:	4b11      	ldr	r3, [pc, #68]	@ (8008678 <HAL_RCC_GetSysClockFreq+0x94>)
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	0c5b      	lsrs	r3, r3, #17
 8008638:	f003 0301 	and.w	r3, r3, #1
 800863c:	4a11      	ldr	r2, [pc, #68]	@ (8008684 <HAL_RCC_GetSysClockFreq+0xa0>)
 800863e:	5cd3      	ldrb	r3, [r2, r3]
 8008640:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a0d      	ldr	r2, [pc, #52]	@ (800867c <HAL_RCC_GetSysClockFreq+0x98>)
 8008646:	fb03 f202 	mul.w	r2, r3, r2
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	e004      	b.n	800865e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a0c      	ldr	r2, [pc, #48]	@ (8008688 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008658:	fb02 f303 	mul.w	r3, r2, r3
 800865c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	613b      	str	r3, [r7, #16]
      break;
 8008662:	e002      	b.n	800866a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008664:	4b09      	ldr	r3, [pc, #36]	@ (800868c <HAL_RCC_GetSysClockFreq+0xa8>)
 8008666:	613b      	str	r3, [r7, #16]
      break;
 8008668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800866a:	693b      	ldr	r3, [r7, #16]
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40021000 	.word	0x40021000
 800867c:	00f42400 	.word	0x00f42400
 8008680:	0800a9c4 	.word	0x0800a9c4
 8008684:	0800a9d4 	.word	0x0800a9d4
 8008688:	003d0900 	.word	0x003d0900
 800868c:	007a1200 	.word	0x007a1200

08008690 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <RCC_Delay+0x34>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a0a      	ldr	r2, [pc, #40]	@ (80086c8 <RCC_Delay+0x38>)
 800869e:	fba2 2303 	umull	r2, r3, r2, r3
 80086a2:	0a5b      	lsrs	r3, r3, #9
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	fb02 f303 	mul.w	r3, r2, r3
 80086aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80086ac:	bf00      	nop
  }
  while (Delay --);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1e5a      	subs	r2, r3, #1
 80086b2:	60fa      	str	r2, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1f9      	bne.n	80086ac <RCC_Delay+0x1c>
}
 80086b8:	bf00      	nop
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	bc80      	pop	{r7}
 80086c2:	4770      	bx	lr
 80086c4:	20000004 	.word	0x20000004
 80086c8:	10624dd3 	.word	0x10624dd3

080086cc <malloc>:
 80086cc:	4b02      	ldr	r3, [pc, #8]	@ (80086d8 <malloc+0xc>)
 80086ce:	4601      	mov	r1, r0
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	f000 b82d 	b.w	8008730 <_malloc_r>
 80086d6:	bf00      	nop
 80086d8:	20000010 	.word	0x20000010

080086dc <free>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	@ (80086e8 <free+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f000 b915 	b.w	8008910 <_free_r>
 80086e6:	bf00      	nop
 80086e8:	20000010 	.word	0x20000010

080086ec <sbrk_aligned>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	4e0f      	ldr	r6, [pc, #60]	@ (800872c <sbrk_aligned+0x40>)
 80086f0:	460c      	mov	r4, r1
 80086f2:	6831      	ldr	r1, [r6, #0]
 80086f4:	4605      	mov	r5, r0
 80086f6:	b911      	cbnz	r1, 80086fe <sbrk_aligned+0x12>
 80086f8:	f000 f8ce 	bl	8008898 <_sbrk_r>
 80086fc:	6030      	str	r0, [r6, #0]
 80086fe:	4621      	mov	r1, r4
 8008700:	4628      	mov	r0, r5
 8008702:	f000 f8c9 	bl	8008898 <_sbrk_r>
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d103      	bne.n	8008712 <sbrk_aligned+0x26>
 800870a:	f04f 34ff 	mov.w	r4, #4294967295
 800870e:	4620      	mov	r0, r4
 8008710:	bd70      	pop	{r4, r5, r6, pc}
 8008712:	1cc4      	adds	r4, r0, #3
 8008714:	f024 0403 	bic.w	r4, r4, #3
 8008718:	42a0      	cmp	r0, r4
 800871a:	d0f8      	beq.n	800870e <sbrk_aligned+0x22>
 800871c:	1a21      	subs	r1, r4, r0
 800871e:	4628      	mov	r0, r5
 8008720:	f000 f8ba 	bl	8008898 <_sbrk_r>
 8008724:	3001      	adds	r0, #1
 8008726:	d1f2      	bne.n	800870e <sbrk_aligned+0x22>
 8008728:	e7ef      	b.n	800870a <sbrk_aligned+0x1e>
 800872a:	bf00      	nop
 800872c:	20000108 	.word	0x20000108

08008730 <_malloc_r>:
 8008730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008734:	1ccd      	adds	r5, r1, #3
 8008736:	f025 0503 	bic.w	r5, r5, #3
 800873a:	3508      	adds	r5, #8
 800873c:	2d0c      	cmp	r5, #12
 800873e:	bf38      	it	cc
 8008740:	250c      	movcc	r5, #12
 8008742:	2d00      	cmp	r5, #0
 8008744:	4606      	mov	r6, r0
 8008746:	db01      	blt.n	800874c <_malloc_r+0x1c>
 8008748:	42a9      	cmp	r1, r5
 800874a:	d904      	bls.n	8008756 <_malloc_r+0x26>
 800874c:	230c      	movs	r3, #12
 800874e:	6033      	str	r3, [r6, #0]
 8008750:	2000      	movs	r0, #0
 8008752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800882c <_malloc_r+0xfc>
 800875a:	f000 f869 	bl	8008830 <__malloc_lock>
 800875e:	f8d8 3000 	ldr.w	r3, [r8]
 8008762:	461c      	mov	r4, r3
 8008764:	bb44      	cbnz	r4, 80087b8 <_malloc_r+0x88>
 8008766:	4629      	mov	r1, r5
 8008768:	4630      	mov	r0, r6
 800876a:	f7ff ffbf 	bl	80086ec <sbrk_aligned>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	4604      	mov	r4, r0
 8008772:	d158      	bne.n	8008826 <_malloc_r+0xf6>
 8008774:	f8d8 4000 	ldr.w	r4, [r8]
 8008778:	4627      	mov	r7, r4
 800877a:	2f00      	cmp	r7, #0
 800877c:	d143      	bne.n	8008806 <_malloc_r+0xd6>
 800877e:	2c00      	cmp	r4, #0
 8008780:	d04b      	beq.n	800881a <_malloc_r+0xea>
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	4639      	mov	r1, r7
 8008786:	4630      	mov	r0, r6
 8008788:	eb04 0903 	add.w	r9, r4, r3
 800878c:	f000 f884 	bl	8008898 <_sbrk_r>
 8008790:	4581      	cmp	r9, r0
 8008792:	d142      	bne.n	800881a <_malloc_r+0xea>
 8008794:	6821      	ldr	r1, [r4, #0]
 8008796:	4630      	mov	r0, r6
 8008798:	1a6d      	subs	r5, r5, r1
 800879a:	4629      	mov	r1, r5
 800879c:	f7ff ffa6 	bl	80086ec <sbrk_aligned>
 80087a0:	3001      	adds	r0, #1
 80087a2:	d03a      	beq.n	800881a <_malloc_r+0xea>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	442b      	add	r3, r5
 80087a8:	6023      	str	r3, [r4, #0]
 80087aa:	f8d8 3000 	ldr.w	r3, [r8]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	bb62      	cbnz	r2, 800880c <_malloc_r+0xdc>
 80087b2:	f8c8 7000 	str.w	r7, [r8]
 80087b6:	e00f      	b.n	80087d8 <_malloc_r+0xa8>
 80087b8:	6822      	ldr	r2, [r4, #0]
 80087ba:	1b52      	subs	r2, r2, r5
 80087bc:	d420      	bmi.n	8008800 <_malloc_r+0xd0>
 80087be:	2a0b      	cmp	r2, #11
 80087c0:	d917      	bls.n	80087f2 <_malloc_r+0xc2>
 80087c2:	1961      	adds	r1, r4, r5
 80087c4:	42a3      	cmp	r3, r4
 80087c6:	6025      	str	r5, [r4, #0]
 80087c8:	bf18      	it	ne
 80087ca:	6059      	strne	r1, [r3, #4]
 80087cc:	6863      	ldr	r3, [r4, #4]
 80087ce:	bf08      	it	eq
 80087d0:	f8c8 1000 	streq.w	r1, [r8]
 80087d4:	5162      	str	r2, [r4, r5]
 80087d6:	604b      	str	r3, [r1, #4]
 80087d8:	4630      	mov	r0, r6
 80087da:	f000 f82f 	bl	800883c <__malloc_unlock>
 80087de:	f104 000b 	add.w	r0, r4, #11
 80087e2:	1d23      	adds	r3, r4, #4
 80087e4:	f020 0007 	bic.w	r0, r0, #7
 80087e8:	1ac2      	subs	r2, r0, r3
 80087ea:	bf1c      	itt	ne
 80087ec:	1a1b      	subne	r3, r3, r0
 80087ee:	50a3      	strne	r3, [r4, r2]
 80087f0:	e7af      	b.n	8008752 <_malloc_r+0x22>
 80087f2:	6862      	ldr	r2, [r4, #4]
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	bf0c      	ite	eq
 80087f8:	f8c8 2000 	streq.w	r2, [r8]
 80087fc:	605a      	strne	r2, [r3, #4]
 80087fe:	e7eb      	b.n	80087d8 <_malloc_r+0xa8>
 8008800:	4623      	mov	r3, r4
 8008802:	6864      	ldr	r4, [r4, #4]
 8008804:	e7ae      	b.n	8008764 <_malloc_r+0x34>
 8008806:	463c      	mov	r4, r7
 8008808:	687f      	ldr	r7, [r7, #4]
 800880a:	e7b6      	b.n	800877a <_malloc_r+0x4a>
 800880c:	461a      	mov	r2, r3
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	42a3      	cmp	r3, r4
 8008812:	d1fb      	bne.n	800880c <_malloc_r+0xdc>
 8008814:	2300      	movs	r3, #0
 8008816:	6053      	str	r3, [r2, #4]
 8008818:	e7de      	b.n	80087d8 <_malloc_r+0xa8>
 800881a:	230c      	movs	r3, #12
 800881c:	4630      	mov	r0, r6
 800881e:	6033      	str	r3, [r6, #0]
 8008820:	f000 f80c 	bl	800883c <__malloc_unlock>
 8008824:	e794      	b.n	8008750 <_malloc_r+0x20>
 8008826:	6005      	str	r5, [r0, #0]
 8008828:	e7d6      	b.n	80087d8 <_malloc_r+0xa8>
 800882a:	bf00      	nop
 800882c:	2000010c 	.word	0x2000010c

08008830 <__malloc_lock>:
 8008830:	4801      	ldr	r0, [pc, #4]	@ (8008838 <__malloc_lock+0x8>)
 8008832:	f000 b86b 	b.w	800890c <__retarget_lock_acquire_recursive>
 8008836:	bf00      	nop
 8008838:	2000024c 	.word	0x2000024c

0800883c <__malloc_unlock>:
 800883c:	4801      	ldr	r0, [pc, #4]	@ (8008844 <__malloc_unlock+0x8>)
 800883e:	f000 b866 	b.w	800890e <__retarget_lock_release_recursive>
 8008842:	bf00      	nop
 8008844:	2000024c 	.word	0x2000024c

08008848 <siprintf>:
 8008848:	b40e      	push	{r1, r2, r3}
 800884a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800884e:	b500      	push	{lr}
 8008850:	b09c      	sub	sp, #112	@ 0x70
 8008852:	ab1d      	add	r3, sp, #116	@ 0x74
 8008854:	9002      	str	r0, [sp, #8]
 8008856:	9006      	str	r0, [sp, #24]
 8008858:	9107      	str	r1, [sp, #28]
 800885a:	9104      	str	r1, [sp, #16]
 800885c:	4808      	ldr	r0, [pc, #32]	@ (8008880 <siprintf+0x38>)
 800885e:	4909      	ldr	r1, [pc, #36]	@ (8008884 <siprintf+0x3c>)
 8008860:	f853 2b04 	ldr.w	r2, [r3], #4
 8008864:	9105      	str	r1, [sp, #20]
 8008866:	6800      	ldr	r0, [r0, #0]
 8008868:	a902      	add	r1, sp, #8
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	f000 f8f4 	bl	8008a58 <_svfiprintf_r>
 8008870:	2200      	movs	r2, #0
 8008872:	9b02      	ldr	r3, [sp, #8]
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	b01c      	add	sp, #112	@ 0x70
 8008878:	f85d eb04 	ldr.w	lr, [sp], #4
 800887c:	b003      	add	sp, #12
 800887e:	4770      	bx	lr
 8008880:	20000010 	.word	0x20000010
 8008884:	ffff0208 	.word	0xffff0208

08008888 <memset>:
 8008888:	4603      	mov	r3, r0
 800888a:	4402      	add	r2, r0
 800888c:	4293      	cmp	r3, r2
 800888e:	d100      	bne.n	8008892 <memset+0xa>
 8008890:	4770      	bx	lr
 8008892:	f803 1b01 	strb.w	r1, [r3], #1
 8008896:	e7f9      	b.n	800888c <memset+0x4>

08008898 <_sbrk_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	2300      	movs	r3, #0
 800889c:	4d05      	ldr	r5, [pc, #20]	@ (80088b4 <_sbrk_r+0x1c>)
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	f7fe ff16 	bl	80076d4 <_sbrk>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_sbrk_r+0x1a>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_sbrk_r+0x1a>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20000248 	.word	0x20000248

080088b8 <__errno>:
 80088b8:	4b01      	ldr	r3, [pc, #4]	@ (80088c0 <__errno+0x8>)
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	20000010 	.word	0x20000010

080088c4 <__libc_init_array>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	2600      	movs	r6, #0
 80088c8:	4d0c      	ldr	r5, [pc, #48]	@ (80088fc <__libc_init_array+0x38>)
 80088ca:	4c0d      	ldr	r4, [pc, #52]	@ (8008900 <__libc_init_array+0x3c>)
 80088cc:	1b64      	subs	r4, r4, r5
 80088ce:	10a4      	asrs	r4, r4, #2
 80088d0:	42a6      	cmp	r6, r4
 80088d2:	d109      	bne.n	80088e8 <__libc_init_array+0x24>
 80088d4:	f000 fc00 	bl	80090d8 <_init>
 80088d8:	2600      	movs	r6, #0
 80088da:	4d0a      	ldr	r5, [pc, #40]	@ (8008904 <__libc_init_array+0x40>)
 80088dc:	4c0a      	ldr	r4, [pc, #40]	@ (8008908 <__libc_init_array+0x44>)
 80088de:	1b64      	subs	r4, r4, r5
 80088e0:	10a4      	asrs	r4, r4, #2
 80088e2:	42a6      	cmp	r6, r4
 80088e4:	d105      	bne.n	80088f2 <__libc_init_array+0x2e>
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
 80088e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ec:	4798      	blx	r3
 80088ee:	3601      	adds	r6, #1
 80088f0:	e7ee      	b.n	80088d0 <__libc_init_array+0xc>
 80088f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f6:	4798      	blx	r3
 80088f8:	3601      	adds	r6, #1
 80088fa:	e7f2      	b.n	80088e2 <__libc_init_array+0x1e>
 80088fc:	0800aa0c 	.word	0x0800aa0c
 8008900:	0800aa0c 	.word	0x0800aa0c
 8008904:	0800aa0c 	.word	0x0800aa0c
 8008908:	0800aa10 	.word	0x0800aa10

0800890c <__retarget_lock_acquire_recursive>:
 800890c:	4770      	bx	lr

0800890e <__retarget_lock_release_recursive>:
 800890e:	4770      	bx	lr

08008910 <_free_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4605      	mov	r5, r0
 8008914:	2900      	cmp	r1, #0
 8008916:	d040      	beq.n	800899a <_free_r+0x8a>
 8008918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800891c:	1f0c      	subs	r4, r1, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfb8      	it	lt
 8008922:	18e4      	addlt	r4, r4, r3
 8008924:	f7ff ff84 	bl	8008830 <__malloc_lock>
 8008928:	4a1c      	ldr	r2, [pc, #112]	@ (800899c <_free_r+0x8c>)
 800892a:	6813      	ldr	r3, [r2, #0]
 800892c:	b933      	cbnz	r3, 800893c <_free_r+0x2c>
 800892e:	6063      	str	r3, [r4, #4]
 8008930:	6014      	str	r4, [r2, #0]
 8008932:	4628      	mov	r0, r5
 8008934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008938:	f7ff bf80 	b.w	800883c <__malloc_unlock>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d908      	bls.n	8008952 <_free_r+0x42>
 8008940:	6820      	ldr	r0, [r4, #0]
 8008942:	1821      	adds	r1, r4, r0
 8008944:	428b      	cmp	r3, r1
 8008946:	bf01      	itttt	eq
 8008948:	6819      	ldreq	r1, [r3, #0]
 800894a:	685b      	ldreq	r3, [r3, #4]
 800894c:	1809      	addeq	r1, r1, r0
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	e7ed      	b.n	800892e <_free_r+0x1e>
 8008952:	461a      	mov	r2, r3
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b10b      	cbz	r3, 800895c <_free_r+0x4c>
 8008958:	42a3      	cmp	r3, r4
 800895a:	d9fa      	bls.n	8008952 <_free_r+0x42>
 800895c:	6811      	ldr	r1, [r2, #0]
 800895e:	1850      	adds	r0, r2, r1
 8008960:	42a0      	cmp	r0, r4
 8008962:	d10b      	bne.n	800897c <_free_r+0x6c>
 8008964:	6820      	ldr	r0, [r4, #0]
 8008966:	4401      	add	r1, r0
 8008968:	1850      	adds	r0, r2, r1
 800896a:	4283      	cmp	r3, r0
 800896c:	6011      	str	r1, [r2, #0]
 800896e:	d1e0      	bne.n	8008932 <_free_r+0x22>
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	4408      	add	r0, r1
 8008976:	6010      	str	r0, [r2, #0]
 8008978:	6053      	str	r3, [r2, #4]
 800897a:	e7da      	b.n	8008932 <_free_r+0x22>
 800897c:	d902      	bls.n	8008984 <_free_r+0x74>
 800897e:	230c      	movs	r3, #12
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	e7d6      	b.n	8008932 <_free_r+0x22>
 8008984:	6820      	ldr	r0, [r4, #0]
 8008986:	1821      	adds	r1, r4, r0
 8008988:	428b      	cmp	r3, r1
 800898a:	bf01      	itttt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	1809      	addeq	r1, r1, r0
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	6054      	str	r4, [r2, #4]
 8008998:	e7cb      	b.n	8008932 <_free_r+0x22>
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	2000010c 	.word	0x2000010c

080089a0 <__ssputs_r>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	461f      	mov	r7, r3
 80089a6:	688e      	ldr	r6, [r1, #8]
 80089a8:	4682      	mov	sl, r0
 80089aa:	42be      	cmp	r6, r7
 80089ac:	460c      	mov	r4, r1
 80089ae:	4690      	mov	r8, r2
 80089b0:	680b      	ldr	r3, [r1, #0]
 80089b2:	d82d      	bhi.n	8008a10 <__ssputs_r+0x70>
 80089b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089bc:	d026      	beq.n	8008a0c <__ssputs_r+0x6c>
 80089be:	6965      	ldr	r5, [r4, #20]
 80089c0:	6909      	ldr	r1, [r1, #16]
 80089c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089c6:	eba3 0901 	sub.w	r9, r3, r1
 80089ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089ce:	1c7b      	adds	r3, r7, #1
 80089d0:	444b      	add	r3, r9
 80089d2:	106d      	asrs	r5, r5, #1
 80089d4:	429d      	cmp	r5, r3
 80089d6:	bf38      	it	cc
 80089d8:	461d      	movcc	r5, r3
 80089da:	0553      	lsls	r3, r2, #21
 80089dc:	d527      	bpl.n	8008a2e <__ssputs_r+0x8e>
 80089de:	4629      	mov	r1, r5
 80089e0:	f7ff fea6 	bl	8008730 <_malloc_r>
 80089e4:	4606      	mov	r6, r0
 80089e6:	b360      	cbz	r0, 8008a42 <__ssputs_r+0xa2>
 80089e8:	464a      	mov	r2, r9
 80089ea:	6921      	ldr	r1, [r4, #16]
 80089ec:	f000 faea 	bl	8008fc4 <memcpy>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80089f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089fa:	81a3      	strh	r3, [r4, #12]
 80089fc:	6126      	str	r6, [r4, #16]
 80089fe:	444e      	add	r6, r9
 8008a00:	6026      	str	r6, [r4, #0]
 8008a02:	463e      	mov	r6, r7
 8008a04:	6165      	str	r5, [r4, #20]
 8008a06:	eba5 0509 	sub.w	r5, r5, r9
 8008a0a:	60a5      	str	r5, [r4, #8]
 8008a0c:	42be      	cmp	r6, r7
 8008a0e:	d900      	bls.n	8008a12 <__ssputs_r+0x72>
 8008a10:	463e      	mov	r6, r7
 8008a12:	4632      	mov	r2, r6
 8008a14:	4641      	mov	r1, r8
 8008a16:	6820      	ldr	r0, [r4, #0]
 8008a18:	f000 faac 	bl	8008f74 <memmove>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	1b9b      	subs	r3, r3, r6
 8008a22:	60a3      	str	r3, [r4, #8]
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	4433      	add	r3, r6
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a2e:	462a      	mov	r2, r5
 8008a30:	f000 fad6 	bl	8008fe0 <_realloc_r>
 8008a34:	4606      	mov	r6, r0
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1e0      	bne.n	80089fc <__ssputs_r+0x5c>
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	6921      	ldr	r1, [r4, #16]
 8008a3e:	f7ff ff67 	bl	8008910 <_free_r>
 8008a42:	230c      	movs	r3, #12
 8008a44:	f8ca 3000 	str.w	r3, [sl]
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	e7e9      	b.n	8008a2a <__ssputs_r+0x8a>
	...

08008a58 <_svfiprintf_r>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	4698      	mov	r8, r3
 8008a5e:	898b      	ldrh	r3, [r1, #12]
 8008a60:	4607      	mov	r7, r0
 8008a62:	061b      	lsls	r3, r3, #24
 8008a64:	460d      	mov	r5, r1
 8008a66:	4614      	mov	r4, r2
 8008a68:	b09d      	sub	sp, #116	@ 0x74
 8008a6a:	d510      	bpl.n	8008a8e <_svfiprintf_r+0x36>
 8008a6c:	690b      	ldr	r3, [r1, #16]
 8008a6e:	b973      	cbnz	r3, 8008a8e <_svfiprintf_r+0x36>
 8008a70:	2140      	movs	r1, #64	@ 0x40
 8008a72:	f7ff fe5d 	bl	8008730 <_malloc_r>
 8008a76:	6028      	str	r0, [r5, #0]
 8008a78:	6128      	str	r0, [r5, #16]
 8008a7a:	b930      	cbnz	r0, 8008a8a <_svfiprintf_r+0x32>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	b01d      	add	sp, #116	@ 0x74
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	2340      	movs	r3, #64	@ 0x40
 8008a8c:	616b      	str	r3, [r5, #20]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a92:	2320      	movs	r3, #32
 8008a94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a98:	2330      	movs	r3, #48	@ 0x30
 8008a9a:	f04f 0901 	mov.w	r9, #1
 8008a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aa2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008c3c <_svfiprintf_r+0x1e4>
 8008aa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aaa:	4623      	mov	r3, r4
 8008aac:	469a      	mov	sl, r3
 8008aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab2:	b10a      	cbz	r2, 8008ab8 <_svfiprintf_r+0x60>
 8008ab4:	2a25      	cmp	r2, #37	@ 0x25
 8008ab6:	d1f9      	bne.n	8008aac <_svfiprintf_r+0x54>
 8008ab8:	ebba 0b04 	subs.w	fp, sl, r4
 8008abc:	d00b      	beq.n	8008ad6 <_svfiprintf_r+0x7e>
 8008abe:	465b      	mov	r3, fp
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff ff6b 	bl	80089a0 <__ssputs_r>
 8008aca:	3001      	adds	r0, #1
 8008acc:	f000 80a7 	beq.w	8008c1e <_svfiprintf_r+0x1c6>
 8008ad0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ad2:	445a      	add	r2, fp
 8008ad4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 809f 	beq.w	8008c1e <_svfiprintf_r+0x1c6>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aea:	f10a 0a01 	add.w	sl, sl, #1
 8008aee:	9304      	str	r3, [sp, #16]
 8008af0:	9307      	str	r3, [sp, #28]
 8008af2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008af6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008af8:	4654      	mov	r4, sl
 8008afa:	2205      	movs	r2, #5
 8008afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b00:	484e      	ldr	r0, [pc, #312]	@ (8008c3c <_svfiprintf_r+0x1e4>)
 8008b02:	f000 fa51 	bl	8008fa8 <memchr>
 8008b06:	9a04      	ldr	r2, [sp, #16]
 8008b08:	b9d8      	cbnz	r0, 8008b42 <_svfiprintf_r+0xea>
 8008b0a:	06d0      	lsls	r0, r2, #27
 8008b0c:	bf44      	itt	mi
 8008b0e:	2320      	movmi	r3, #32
 8008b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b14:	0711      	lsls	r1, r2, #28
 8008b16:	bf44      	itt	mi
 8008b18:	232b      	movmi	r3, #43	@ 0x2b
 8008b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b24:	d015      	beq.n	8008b52 <_svfiprintf_r+0xfa>
 8008b26:	4654      	mov	r4, sl
 8008b28:	2000      	movs	r0, #0
 8008b2a:	f04f 0c0a 	mov.w	ip, #10
 8008b2e:	9a07      	ldr	r2, [sp, #28]
 8008b30:	4621      	mov	r1, r4
 8008b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b36:	3b30      	subs	r3, #48	@ 0x30
 8008b38:	2b09      	cmp	r3, #9
 8008b3a:	d94b      	bls.n	8008bd4 <_svfiprintf_r+0x17c>
 8008b3c:	b1b0      	cbz	r0, 8008b6c <_svfiprintf_r+0x114>
 8008b3e:	9207      	str	r2, [sp, #28]
 8008b40:	e014      	b.n	8008b6c <_svfiprintf_r+0x114>
 8008b42:	eba0 0308 	sub.w	r3, r0, r8
 8008b46:	fa09 f303 	lsl.w	r3, r9, r3
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	46a2      	mov	sl, r4
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	e7d2      	b.n	8008af8 <_svfiprintf_r+0xa0>
 8008b52:	9b03      	ldr	r3, [sp, #12]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	9103      	str	r1, [sp, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bfbb      	ittet	lt
 8008b5e:	425b      	neglt	r3, r3
 8008b60:	f042 0202 	orrlt.w	r2, r2, #2
 8008b64:	9307      	strge	r3, [sp, #28]
 8008b66:	9307      	strlt	r3, [sp, #28]
 8008b68:	bfb8      	it	lt
 8008b6a:	9204      	strlt	r2, [sp, #16]
 8008b6c:	7823      	ldrb	r3, [r4, #0]
 8008b6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b70:	d10a      	bne.n	8008b88 <_svfiprintf_r+0x130>
 8008b72:	7863      	ldrb	r3, [r4, #1]
 8008b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b76:	d132      	bne.n	8008bde <_svfiprintf_r+0x186>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	3402      	adds	r4, #2
 8008b7c:	1d1a      	adds	r2, r3, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	9203      	str	r2, [sp, #12]
 8008b82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b86:	9305      	str	r3, [sp, #20]
 8008b88:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c40 <_svfiprintf_r+0x1e8>
 8008b8c:	2203      	movs	r2, #3
 8008b8e:	4650      	mov	r0, sl
 8008b90:	7821      	ldrb	r1, [r4, #0]
 8008b92:	f000 fa09 	bl	8008fa8 <memchr>
 8008b96:	b138      	cbz	r0, 8008ba8 <_svfiprintf_r+0x150>
 8008b98:	2240      	movs	r2, #64	@ 0x40
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	eba0 000a 	sub.w	r0, r0, sl
 8008ba0:	4082      	lsls	r2, r0
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	3401      	adds	r4, #1
 8008ba6:	9304      	str	r3, [sp, #16]
 8008ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bac:	2206      	movs	r2, #6
 8008bae:	4825      	ldr	r0, [pc, #148]	@ (8008c44 <_svfiprintf_r+0x1ec>)
 8008bb0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bb4:	f000 f9f8 	bl	8008fa8 <memchr>
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d036      	beq.n	8008c2a <_svfiprintf_r+0x1d2>
 8008bbc:	4b22      	ldr	r3, [pc, #136]	@ (8008c48 <_svfiprintf_r+0x1f0>)
 8008bbe:	bb1b      	cbnz	r3, 8008c08 <_svfiprintf_r+0x1b0>
 8008bc0:	9b03      	ldr	r3, [sp, #12]
 8008bc2:	3307      	adds	r3, #7
 8008bc4:	f023 0307 	bic.w	r3, r3, #7
 8008bc8:	3308      	adds	r3, #8
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bce:	4433      	add	r3, r6
 8008bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd2:	e76a      	b.n	8008aaa <_svfiprintf_r+0x52>
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bdc:	e7a8      	b.n	8008b30 <_svfiprintf_r+0xd8>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f04f 0c0a 	mov.w	ip, #10
 8008be4:	4619      	mov	r1, r3
 8008be6:	3401      	adds	r4, #1
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	4620      	mov	r0, r4
 8008bec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf0:	3a30      	subs	r2, #48	@ 0x30
 8008bf2:	2a09      	cmp	r2, #9
 8008bf4:	d903      	bls.n	8008bfe <_svfiprintf_r+0x1a6>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0c6      	beq.n	8008b88 <_svfiprintf_r+0x130>
 8008bfa:	9105      	str	r1, [sp, #20]
 8008bfc:	e7c4      	b.n	8008b88 <_svfiprintf_r+0x130>
 8008bfe:	4604      	mov	r4, r0
 8008c00:	2301      	movs	r3, #1
 8008c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c06:	e7f0      	b.n	8008bea <_svfiprintf_r+0x192>
 8008c08:	ab03      	add	r3, sp, #12
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	462a      	mov	r2, r5
 8008c0e:	4638      	mov	r0, r7
 8008c10:	4b0e      	ldr	r3, [pc, #56]	@ (8008c4c <_svfiprintf_r+0x1f4>)
 8008c12:	a904      	add	r1, sp, #16
 8008c14:	f3af 8000 	nop.w
 8008c18:	1c42      	adds	r2, r0, #1
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	d1d6      	bne.n	8008bcc <_svfiprintf_r+0x174>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	065b      	lsls	r3, r3, #25
 8008c22:	f53f af2d 	bmi.w	8008a80 <_svfiprintf_r+0x28>
 8008c26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c28:	e72c      	b.n	8008a84 <_svfiprintf_r+0x2c>
 8008c2a:	ab03      	add	r3, sp, #12
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4638      	mov	r0, r7
 8008c32:	4b06      	ldr	r3, [pc, #24]	@ (8008c4c <_svfiprintf_r+0x1f4>)
 8008c34:	a904      	add	r1, sp, #16
 8008c36:	f000 f87d 	bl	8008d34 <_printf_i>
 8008c3a:	e7ed      	b.n	8008c18 <_svfiprintf_r+0x1c0>
 8008c3c:	0800a9d6 	.word	0x0800a9d6
 8008c40:	0800a9dc 	.word	0x0800a9dc
 8008c44:	0800a9e0 	.word	0x0800a9e0
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	080089a1 	.word	0x080089a1

08008c50 <_printf_common>:
 8008c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c54:	4616      	mov	r6, r2
 8008c56:	4698      	mov	r8, r3
 8008c58:	688a      	ldr	r2, [r1, #8]
 8008c5a:	690b      	ldr	r3, [r1, #16]
 8008c5c:	4607      	mov	r7, r0
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	bfb8      	it	lt
 8008c62:	4613      	movlt	r3, r2
 8008c64:	6033      	str	r3, [r6, #0]
 8008c66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c70:	b10a      	cbz	r2, 8008c76 <_printf_common+0x26>
 8008c72:	3301      	adds	r3, #1
 8008c74:	6033      	str	r3, [r6, #0]
 8008c76:	6823      	ldr	r3, [r4, #0]
 8008c78:	0699      	lsls	r1, r3, #26
 8008c7a:	bf42      	ittt	mi
 8008c7c:	6833      	ldrmi	r3, [r6, #0]
 8008c7e:	3302      	addmi	r3, #2
 8008c80:	6033      	strmi	r3, [r6, #0]
 8008c82:	6825      	ldr	r5, [r4, #0]
 8008c84:	f015 0506 	ands.w	r5, r5, #6
 8008c88:	d106      	bne.n	8008c98 <_printf_common+0x48>
 8008c8a:	f104 0a19 	add.w	sl, r4, #25
 8008c8e:	68e3      	ldr	r3, [r4, #12]
 8008c90:	6832      	ldr	r2, [r6, #0]
 8008c92:	1a9b      	subs	r3, r3, r2
 8008c94:	42ab      	cmp	r3, r5
 8008c96:	dc2b      	bgt.n	8008cf0 <_printf_common+0xa0>
 8008c98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	3b00      	subs	r3, #0
 8008ca0:	bf18      	it	ne
 8008ca2:	2301      	movne	r3, #1
 8008ca4:	0692      	lsls	r2, r2, #26
 8008ca6:	d430      	bmi.n	8008d0a <_printf_common+0xba>
 8008ca8:	4641      	mov	r1, r8
 8008caa:	4638      	mov	r0, r7
 8008cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cb0:	47c8      	blx	r9
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d023      	beq.n	8008cfe <_printf_common+0xae>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	6922      	ldr	r2, [r4, #16]
 8008cba:	f003 0306 	and.w	r3, r3, #6
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	bf14      	ite	ne
 8008cc2:	2500      	movne	r5, #0
 8008cc4:	6833      	ldreq	r3, [r6, #0]
 8008cc6:	f04f 0600 	mov.w	r6, #0
 8008cca:	bf08      	it	eq
 8008ccc:	68e5      	ldreq	r5, [r4, #12]
 8008cce:	f104 041a 	add.w	r4, r4, #26
 8008cd2:	bf08      	it	eq
 8008cd4:	1aed      	subeq	r5, r5, r3
 8008cd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008cda:	bf08      	it	eq
 8008cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	bfc4      	itt	gt
 8008ce4:	1a9b      	subgt	r3, r3, r2
 8008ce6:	18ed      	addgt	r5, r5, r3
 8008ce8:	42b5      	cmp	r5, r6
 8008cea:	d11a      	bne.n	8008d22 <_printf_common+0xd2>
 8008cec:	2000      	movs	r0, #0
 8008cee:	e008      	b.n	8008d02 <_printf_common+0xb2>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	47c8      	blx	r9
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d103      	bne.n	8008d06 <_printf_common+0xb6>
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d06:	3501      	adds	r5, #1
 8008d08:	e7c1      	b.n	8008c8e <_printf_common+0x3e>
 8008d0a:	2030      	movs	r0, #48	@ 0x30
 8008d0c:	18e1      	adds	r1, r4, r3
 8008d0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d18:	4422      	add	r2, r4
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d20:	e7c2      	b.n	8008ca8 <_printf_common+0x58>
 8008d22:	2301      	movs	r3, #1
 8008d24:	4622      	mov	r2, r4
 8008d26:	4641      	mov	r1, r8
 8008d28:	4638      	mov	r0, r7
 8008d2a:	47c8      	blx	r9
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d0e6      	beq.n	8008cfe <_printf_common+0xae>
 8008d30:	3601      	adds	r6, #1
 8008d32:	e7d9      	b.n	8008ce8 <_printf_common+0x98>

08008d34 <_printf_i>:
 8008d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d38:	7e0f      	ldrb	r7, [r1, #24]
 8008d3a:	4691      	mov	r9, r2
 8008d3c:	2f78      	cmp	r7, #120	@ 0x78
 8008d3e:	4680      	mov	r8, r0
 8008d40:	460c      	mov	r4, r1
 8008d42:	469a      	mov	sl, r3
 8008d44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d4a:	d807      	bhi.n	8008d5c <_printf_i+0x28>
 8008d4c:	2f62      	cmp	r7, #98	@ 0x62
 8008d4e:	d80a      	bhi.n	8008d66 <_printf_i+0x32>
 8008d50:	2f00      	cmp	r7, #0
 8008d52:	f000 80d3 	beq.w	8008efc <_printf_i+0x1c8>
 8008d56:	2f58      	cmp	r7, #88	@ 0x58
 8008d58:	f000 80ba 	beq.w	8008ed0 <_printf_i+0x19c>
 8008d5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d64:	e03a      	b.n	8008ddc <_printf_i+0xa8>
 8008d66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d6a:	2b15      	cmp	r3, #21
 8008d6c:	d8f6      	bhi.n	8008d5c <_printf_i+0x28>
 8008d6e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d74 <_printf_i+0x40>)
 8008d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d74:	08008dcd 	.word	0x08008dcd
 8008d78:	08008de1 	.word	0x08008de1
 8008d7c:	08008d5d 	.word	0x08008d5d
 8008d80:	08008d5d 	.word	0x08008d5d
 8008d84:	08008d5d 	.word	0x08008d5d
 8008d88:	08008d5d 	.word	0x08008d5d
 8008d8c:	08008de1 	.word	0x08008de1
 8008d90:	08008d5d 	.word	0x08008d5d
 8008d94:	08008d5d 	.word	0x08008d5d
 8008d98:	08008d5d 	.word	0x08008d5d
 8008d9c:	08008d5d 	.word	0x08008d5d
 8008da0:	08008ee3 	.word	0x08008ee3
 8008da4:	08008e0b 	.word	0x08008e0b
 8008da8:	08008e9d 	.word	0x08008e9d
 8008dac:	08008d5d 	.word	0x08008d5d
 8008db0:	08008d5d 	.word	0x08008d5d
 8008db4:	08008f05 	.word	0x08008f05
 8008db8:	08008d5d 	.word	0x08008d5d
 8008dbc:	08008e0b 	.word	0x08008e0b
 8008dc0:	08008d5d 	.word	0x08008d5d
 8008dc4:	08008d5d 	.word	0x08008d5d
 8008dc8:	08008ea5 	.word	0x08008ea5
 8008dcc:	6833      	ldr	r3, [r6, #0]
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6032      	str	r2, [r6, #0]
 8008dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e09e      	b.n	8008f1e <_printf_i+0x1ea>
 8008de0:	6833      	ldr	r3, [r6, #0]
 8008de2:	6820      	ldr	r0, [r4, #0]
 8008de4:	1d19      	adds	r1, r3, #4
 8008de6:	6031      	str	r1, [r6, #0]
 8008de8:	0606      	lsls	r6, r0, #24
 8008dea:	d501      	bpl.n	8008df0 <_printf_i+0xbc>
 8008dec:	681d      	ldr	r5, [r3, #0]
 8008dee:	e003      	b.n	8008df8 <_printf_i+0xc4>
 8008df0:	0645      	lsls	r5, r0, #25
 8008df2:	d5fb      	bpl.n	8008dec <_printf_i+0xb8>
 8008df4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008df8:	2d00      	cmp	r5, #0
 8008dfa:	da03      	bge.n	8008e04 <_printf_i+0xd0>
 8008dfc:	232d      	movs	r3, #45	@ 0x2d
 8008dfe:	426d      	negs	r5, r5
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e04:	230a      	movs	r3, #10
 8008e06:	4859      	ldr	r0, [pc, #356]	@ (8008f6c <_printf_i+0x238>)
 8008e08:	e011      	b.n	8008e2e <_printf_i+0xfa>
 8008e0a:	6821      	ldr	r1, [r4, #0]
 8008e0c:	6833      	ldr	r3, [r6, #0]
 8008e0e:	0608      	lsls	r0, r1, #24
 8008e10:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e14:	d402      	bmi.n	8008e1c <_printf_i+0xe8>
 8008e16:	0649      	lsls	r1, r1, #25
 8008e18:	bf48      	it	mi
 8008e1a:	b2ad      	uxthmi	r5, r5
 8008e1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e1e:	6033      	str	r3, [r6, #0]
 8008e20:	bf14      	ite	ne
 8008e22:	230a      	movne	r3, #10
 8008e24:	2308      	moveq	r3, #8
 8008e26:	4851      	ldr	r0, [pc, #324]	@ (8008f6c <_printf_i+0x238>)
 8008e28:	2100      	movs	r1, #0
 8008e2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e2e:	6866      	ldr	r6, [r4, #4]
 8008e30:	2e00      	cmp	r6, #0
 8008e32:	bfa8      	it	ge
 8008e34:	6821      	ldrge	r1, [r4, #0]
 8008e36:	60a6      	str	r6, [r4, #8]
 8008e38:	bfa4      	itt	ge
 8008e3a:	f021 0104 	bicge.w	r1, r1, #4
 8008e3e:	6021      	strge	r1, [r4, #0]
 8008e40:	b90d      	cbnz	r5, 8008e46 <_printf_i+0x112>
 8008e42:	2e00      	cmp	r6, #0
 8008e44:	d04b      	beq.n	8008ede <_printf_i+0x1aa>
 8008e46:	4616      	mov	r6, r2
 8008e48:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e4c:	fb03 5711 	mls	r7, r3, r1, r5
 8008e50:	5dc7      	ldrb	r7, [r0, r7]
 8008e52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e56:	462f      	mov	r7, r5
 8008e58:	42bb      	cmp	r3, r7
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	d9f4      	bls.n	8008e48 <_printf_i+0x114>
 8008e5e:	2b08      	cmp	r3, #8
 8008e60:	d10b      	bne.n	8008e7a <_printf_i+0x146>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	07df      	lsls	r7, r3, #31
 8008e66:	d508      	bpl.n	8008e7a <_printf_i+0x146>
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	6861      	ldr	r1, [r4, #4]
 8008e6c:	4299      	cmp	r1, r3
 8008e6e:	bfde      	ittt	le
 8008e70:	2330      	movle	r3, #48	@ 0x30
 8008e72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e7a:	1b92      	subs	r2, r2, r6
 8008e7c:	6122      	str	r2, [r4, #16]
 8008e7e:	464b      	mov	r3, r9
 8008e80:	4621      	mov	r1, r4
 8008e82:	4640      	mov	r0, r8
 8008e84:	f8cd a000 	str.w	sl, [sp]
 8008e88:	aa03      	add	r2, sp, #12
 8008e8a:	f7ff fee1 	bl	8008c50 <_printf_common>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d14a      	bne.n	8008f28 <_printf_i+0x1f4>
 8008e92:	f04f 30ff 	mov.w	r0, #4294967295
 8008e96:	b004      	add	sp, #16
 8008e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9c:	6823      	ldr	r3, [r4, #0]
 8008e9e:	f043 0320 	orr.w	r3, r3, #32
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	2778      	movs	r7, #120	@ 0x78
 8008ea6:	4832      	ldr	r0, [pc, #200]	@ (8008f70 <_printf_i+0x23c>)
 8008ea8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	6831      	ldr	r1, [r6, #0]
 8008eb0:	061f      	lsls	r7, r3, #24
 8008eb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8008eb6:	d402      	bmi.n	8008ebe <_printf_i+0x18a>
 8008eb8:	065f      	lsls	r7, r3, #25
 8008eba:	bf48      	it	mi
 8008ebc:	b2ad      	uxthmi	r5, r5
 8008ebe:	6031      	str	r1, [r6, #0]
 8008ec0:	07d9      	lsls	r1, r3, #31
 8008ec2:	bf44      	itt	mi
 8008ec4:	f043 0320 	orrmi.w	r3, r3, #32
 8008ec8:	6023      	strmi	r3, [r4, #0]
 8008eca:	b11d      	cbz	r5, 8008ed4 <_printf_i+0x1a0>
 8008ecc:	2310      	movs	r3, #16
 8008ece:	e7ab      	b.n	8008e28 <_printf_i+0xf4>
 8008ed0:	4826      	ldr	r0, [pc, #152]	@ (8008f6c <_printf_i+0x238>)
 8008ed2:	e7e9      	b.n	8008ea8 <_printf_i+0x174>
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	f023 0320 	bic.w	r3, r3, #32
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	e7f6      	b.n	8008ecc <_printf_i+0x198>
 8008ede:	4616      	mov	r6, r2
 8008ee0:	e7bd      	b.n	8008e5e <_printf_i+0x12a>
 8008ee2:	6833      	ldr	r3, [r6, #0]
 8008ee4:	6825      	ldr	r5, [r4, #0]
 8008ee6:	1d18      	adds	r0, r3, #4
 8008ee8:	6961      	ldr	r1, [r4, #20]
 8008eea:	6030      	str	r0, [r6, #0]
 8008eec:	062e      	lsls	r6, r5, #24
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	d501      	bpl.n	8008ef6 <_printf_i+0x1c2>
 8008ef2:	6019      	str	r1, [r3, #0]
 8008ef4:	e002      	b.n	8008efc <_printf_i+0x1c8>
 8008ef6:	0668      	lsls	r0, r5, #25
 8008ef8:	d5fb      	bpl.n	8008ef2 <_printf_i+0x1be>
 8008efa:	8019      	strh	r1, [r3, #0]
 8008efc:	2300      	movs	r3, #0
 8008efe:	4616      	mov	r6, r2
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	e7bc      	b.n	8008e7e <_printf_i+0x14a>
 8008f04:	6833      	ldr	r3, [r6, #0]
 8008f06:	2100      	movs	r1, #0
 8008f08:	1d1a      	adds	r2, r3, #4
 8008f0a:	6032      	str	r2, [r6, #0]
 8008f0c:	681e      	ldr	r6, [r3, #0]
 8008f0e:	6862      	ldr	r2, [r4, #4]
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 f849 	bl	8008fa8 <memchr>
 8008f16:	b108      	cbz	r0, 8008f1c <_printf_i+0x1e8>
 8008f18:	1b80      	subs	r0, r0, r6
 8008f1a:	6060      	str	r0, [r4, #4]
 8008f1c:	6863      	ldr	r3, [r4, #4]
 8008f1e:	6123      	str	r3, [r4, #16]
 8008f20:	2300      	movs	r3, #0
 8008f22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f26:	e7aa      	b.n	8008e7e <_printf_i+0x14a>
 8008f28:	4632      	mov	r2, r6
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	47d0      	blx	sl
 8008f32:	3001      	adds	r0, #1
 8008f34:	d0ad      	beq.n	8008e92 <_printf_i+0x15e>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	079b      	lsls	r3, r3, #30
 8008f3a:	d413      	bmi.n	8008f64 <_printf_i+0x230>
 8008f3c:	68e0      	ldr	r0, [r4, #12]
 8008f3e:	9b03      	ldr	r3, [sp, #12]
 8008f40:	4298      	cmp	r0, r3
 8008f42:	bfb8      	it	lt
 8008f44:	4618      	movlt	r0, r3
 8008f46:	e7a6      	b.n	8008e96 <_printf_i+0x162>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4632      	mov	r2, r6
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	4640      	mov	r0, r8
 8008f50:	47d0      	blx	sl
 8008f52:	3001      	adds	r0, #1
 8008f54:	d09d      	beq.n	8008e92 <_printf_i+0x15e>
 8008f56:	3501      	adds	r5, #1
 8008f58:	68e3      	ldr	r3, [r4, #12]
 8008f5a:	9903      	ldr	r1, [sp, #12]
 8008f5c:	1a5b      	subs	r3, r3, r1
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	dcf2      	bgt.n	8008f48 <_printf_i+0x214>
 8008f62:	e7eb      	b.n	8008f3c <_printf_i+0x208>
 8008f64:	2500      	movs	r5, #0
 8008f66:	f104 0619 	add.w	r6, r4, #25
 8008f6a:	e7f5      	b.n	8008f58 <_printf_i+0x224>
 8008f6c:	0800a9e7 	.word	0x0800a9e7
 8008f70:	0800a9f8 	.word	0x0800a9f8

08008f74 <memmove>:
 8008f74:	4288      	cmp	r0, r1
 8008f76:	b510      	push	{r4, lr}
 8008f78:	eb01 0402 	add.w	r4, r1, r2
 8008f7c:	d902      	bls.n	8008f84 <memmove+0x10>
 8008f7e:	4284      	cmp	r4, r0
 8008f80:	4623      	mov	r3, r4
 8008f82:	d807      	bhi.n	8008f94 <memmove+0x20>
 8008f84:	1e43      	subs	r3, r0, #1
 8008f86:	42a1      	cmp	r1, r4
 8008f88:	d008      	beq.n	8008f9c <memmove+0x28>
 8008f8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f92:	e7f8      	b.n	8008f86 <memmove+0x12>
 8008f94:	4601      	mov	r1, r0
 8008f96:	4402      	add	r2, r0
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	d100      	bne.n	8008f9e <memmove+0x2a>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fa6:	e7f7      	b.n	8008f98 <memmove+0x24>

08008fa8 <memchr>:
 8008fa8:	4603      	mov	r3, r0
 8008faa:	b510      	push	{r4, lr}
 8008fac:	b2c9      	uxtb	r1, r1
 8008fae:	4402      	add	r2, r0
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	d101      	bne.n	8008fba <memchr+0x12>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e003      	b.n	8008fc2 <memchr+0x1a>
 8008fba:	7804      	ldrb	r4, [r0, #0]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	428c      	cmp	r4, r1
 8008fc0:	d1f6      	bne.n	8008fb0 <memchr+0x8>
 8008fc2:	bd10      	pop	{r4, pc}

08008fc4 <memcpy>:
 8008fc4:	440a      	add	r2, r1
 8008fc6:	4291      	cmp	r1, r2
 8008fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fcc:	d100      	bne.n	8008fd0 <memcpy+0xc>
 8008fce:	4770      	bx	lr
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd6:	4291      	cmp	r1, r2
 8008fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fdc:	d1f9      	bne.n	8008fd2 <memcpy+0xe>
 8008fde:	bd10      	pop	{r4, pc}

08008fe0 <_realloc_r>:
 8008fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	4615      	mov	r5, r2
 8008fe8:	460c      	mov	r4, r1
 8008fea:	b921      	cbnz	r1, 8008ff6 <_realloc_r+0x16>
 8008fec:	4611      	mov	r1, r2
 8008fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff2:	f7ff bb9d 	b.w	8008730 <_malloc_r>
 8008ff6:	b92a      	cbnz	r2, 8009004 <_realloc_r+0x24>
 8008ff8:	f7ff fc8a 	bl	8008910 <_free_r>
 8008ffc:	2400      	movs	r4, #0
 8008ffe:	4620      	mov	r0, r4
 8009000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009004:	f000 f81a 	bl	800903c <_malloc_usable_size_r>
 8009008:	4285      	cmp	r5, r0
 800900a:	4606      	mov	r6, r0
 800900c:	d802      	bhi.n	8009014 <_realloc_r+0x34>
 800900e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009012:	d8f4      	bhi.n	8008ffe <_realloc_r+0x1e>
 8009014:	4629      	mov	r1, r5
 8009016:	4640      	mov	r0, r8
 8009018:	f7ff fb8a 	bl	8008730 <_malloc_r>
 800901c:	4607      	mov	r7, r0
 800901e:	2800      	cmp	r0, #0
 8009020:	d0ec      	beq.n	8008ffc <_realloc_r+0x1c>
 8009022:	42b5      	cmp	r5, r6
 8009024:	462a      	mov	r2, r5
 8009026:	4621      	mov	r1, r4
 8009028:	bf28      	it	cs
 800902a:	4632      	movcs	r2, r6
 800902c:	f7ff ffca 	bl	8008fc4 <memcpy>
 8009030:	4621      	mov	r1, r4
 8009032:	4640      	mov	r0, r8
 8009034:	f7ff fc6c 	bl	8008910 <_free_r>
 8009038:	463c      	mov	r4, r7
 800903a:	e7e0      	b.n	8008ffe <_realloc_r+0x1e>

0800903c <_malloc_usable_size_r>:
 800903c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009040:	1f18      	subs	r0, r3, #4
 8009042:	2b00      	cmp	r3, #0
 8009044:	bfbc      	itt	lt
 8009046:	580b      	ldrlt	r3, [r1, r0]
 8009048:	18c0      	addlt	r0, r0, r3
 800904a:	4770      	bx	lr

0800904c <round>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009052:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8009056:	2a13      	cmp	r2, #19
 8009058:	4604      	mov	r4, r0
 800905a:	460d      	mov	r5, r1
 800905c:	460b      	mov	r3, r1
 800905e:	dc1a      	bgt.n	8009096 <round+0x4a>
 8009060:	2a00      	cmp	r2, #0
 8009062:	da0b      	bge.n	800907c <round+0x30>
 8009064:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8009068:	3201      	adds	r2, #1
 800906a:	bf04      	itt	eq
 800906c:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8009070:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8009074:	2200      	movs	r2, #0
 8009076:	461d      	mov	r5, r3
 8009078:	4614      	mov	r4, r2
 800907a:	e016      	b.n	80090aa <round+0x5e>
 800907c:	4815      	ldr	r0, [pc, #84]	@ (80090d4 <round+0x88>)
 800907e:	4110      	asrs	r0, r2
 8009080:	4001      	ands	r1, r0
 8009082:	4321      	orrs	r1, r4
 8009084:	d011      	beq.n	80090aa <round+0x5e>
 8009086:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800908a:	fa41 f202 	asr.w	r2, r1, r2
 800908e:	4413      	add	r3, r2
 8009090:	ea23 0300 	bic.w	r3, r3, r0
 8009094:	e7ee      	b.n	8009074 <round+0x28>
 8009096:	2a33      	cmp	r2, #51	@ 0x33
 8009098:	dd0a      	ble.n	80090b0 <round+0x64>
 800909a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800909e:	d104      	bne.n	80090aa <round+0x5e>
 80090a0:	4602      	mov	r2, r0
 80090a2:	f7f7 f9f1 	bl	8000488 <__adddf3>
 80090a6:	4604      	mov	r4, r0
 80090a8:	460d      	mov	r5, r1
 80090aa:	4620      	mov	r0, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090b0:	f04f 30ff 	mov.w	r0, #4294967295
 80090b4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80090b8:	40f8      	lsrs	r0, r7
 80090ba:	4220      	tst	r0, r4
 80090bc:	d0f5      	beq.n	80090aa <round+0x5e>
 80090be:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80090c2:	2201      	movs	r2, #1
 80090c4:	408a      	lsls	r2, r1
 80090c6:	1912      	adds	r2, r2, r4
 80090c8:	bf28      	it	cs
 80090ca:	3301      	addcs	r3, #1
 80090cc:	ea22 0200 	bic.w	r2, r2, r0
 80090d0:	e7d1      	b.n	8009076 <round+0x2a>
 80090d2:	bf00      	nop
 80090d4:	000fffff 	.word	0x000fffff

080090d8 <_init>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	bf00      	nop
 80090dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090de:	bc08      	pop	{r3}
 80090e0:	469e      	mov	lr, r3
 80090e2:	4770      	bx	lr

080090e4 <_fini>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr
