
Lab_Assignment_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099c4  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018cc  08009bac  08009bac  0000abac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b478  0800b478  0000d064  2**0
                  CONTENTS
  4 .ARM          00000000  0800b478  0800b478  0000d064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b478  0800b478  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b478  0800b478  0000c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b47c  0800b47c  0000c47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800b480  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000179c  20000064  0800b4e4  0000d064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001800  0800b4e4  0000d800  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db84  00000000  00000000  0000d08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002425  00000000  00000000  0001ac11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001d038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa4  00000000  00000000  0001ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a18b  00000000  00000000  0001e86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011529  00000000  00000000  000389f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098d4c  00000000  00000000  00049f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e24  00000000  00000000  000e2cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  000e6ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000064 	.word	0x20000064
 8000204:	00000000 	.word	0x00000000
 8000208:	08009b94 	.word	0x08009b94

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000068 	.word	0x20000068
 8000224:	08009b94 	.word	0x08009b94

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	@ 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a45      	ldr	r2, [pc, #276]	@ (8000964 <MX_GPIO_Init+0x130>)
 800084e:	f043 0320 	orr.w	r3, r3, #32
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a3f      	ldr	r2, [pc, #252]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b3d      	ldr	r3, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x130>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000878:	4b3a      	ldr	r3, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a39      	ldr	r2, [pc, #228]	@ (8000964 <MX_GPIO_Init+0x130>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b37      	ldr	r3, [pc, #220]	@ (8000964 <MX_GPIO_Init+0x130>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000896:	4834      	ldr	r0, [pc, #208]	@ (8000968 <MX_GPIO_Init+0x134>)
 8000898:	f006 fe7b 	bl	8007592 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	4832      	ldr	r0, [pc, #200]	@ (800096c <MX_GPIO_Init+0x138>)
 80008a2:	f006 fe76 	bl	8007592 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_GPIO_Init+0x13c>)
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	482b      	ldr	r0, [pc, #172]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008ba:	f006 fcbf 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80008be:	2320      	movs	r3, #32
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	4829      	ldr	r0, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x144>)
 80008d2:	f006 fcb3 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	481e      	ldr	r0, [pc, #120]	@ (8000968 <MX_GPIO_Init+0x134>)
 80008f0:	f006 fca4 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80008f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <MX_GPIO_Init+0x140>)
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	@ (8000968 <MX_GPIO_Init+0x134>)
 800090a:	f006 fc97 	bl	800723c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800090e:	2304      	movs	r3, #4
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0310 	add.w	r3, r7, #16
 8000922:	4619      	mov	r1, r3
 8000924:	4811      	ldr	r0, [pc, #68]	@ (800096c <MX_GPIO_Init+0x138>)
 8000926:	f006 fc89 	bl	800723c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 2);
 800092a:	2202      	movs	r2, #2
 800092c:	2102      	movs	r1, #2
 800092e:	2006      	movs	r0, #6
 8000930:	f006 fafd 	bl	8006f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000934:	2006      	movs	r0, #6
 8000936:	f006 fb16 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 2);
 800093a:	2202      	movs	r2, #2
 800093c:	2102      	movs	r1, #2
 800093e:	2017      	movs	r0, #23
 8000940:	f006 faf5 	bl	8006f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000944:	2017      	movs	r0, #23
 8000946:	f006 fb0e 	bl	8006f66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 2);
 800094a:	2202      	movs	r2, #2
 800094c:	2102      	movs	r1, #2
 800094e:	2028      	movs	r0, #40	@ 0x28
 8000950:	f006 faed 	bl	8006f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000954:	2028      	movs	r0, #40	@ 0x28
 8000956:	f006 fb06 	bl	8006f66 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000
 8000968:	40010800 	.word	0x40010800
 800096c:	40011400 	.word	0x40011400
 8000970:	10110000 	.word	0x10110000
 8000974:	10210000 	.word	0x10210000
 8000978:	40011000 	.word	0x40011000

0800097c <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <LCD_WR_REG+0x40>)
 8000988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800098c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <LCD_WR_REG+0x40>)
 8000990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000994:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <LCD_WR_REG+0x44>)
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <LCD_WR_REG+0x40>)
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <LCD_WR_REG+0x40>)
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <LCD_WR_REG+0x40>)
 80009aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ae:	611a      	str	r2, [r3, #16]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40010c00 	.word	0x40010c00

080009c4 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <LCD_WR_DATAX+0x40>)
 80009d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009d4:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <LCD_WR_DATAX+0x40>)
 80009d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009dc:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <LCD_WR_DATAX+0x44>)
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80009e4:	4b07      	ldr	r3, [pc, #28]	@ (8000a04 <LCD_WR_DATAX+0x40>)
 80009e6:	2280      	movs	r2, #128	@ 0x80
 80009e8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80009ea:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <LCD_WR_DATAX+0x40>)
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <LCD_WR_DATAX+0x40>)
 80009f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009f6:	611a      	str	r2, [r3, #16]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <LCD_RD_DATA+0x7c>)
 8000a14:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000a18:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <LCD_RD_DATA+0x7c>)
 8000a1c:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000a20:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <LCD_RD_DATA+0x7c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <LCD_RD_DATA+0x80>)
 8000a2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a2e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <LCD_RD_DATA+0x80>)
 8000a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a36:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <LCD_RD_DATA+0x80>)
 8000a3a:	2240      	movs	r2, #64	@ 0x40
 8000a3c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000a3e:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <LCD_RD_DATA+0x84>)
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	f648 1289 	movw	r2, #35209	@ 0x8989
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d102      	bne.n	8000a50 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f006 f950 	bl	8006cf0 <HAL_Delay>
	t = DATAIN
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <LCD_RD_DATA+0x7c>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <LCD_RD_DATA+0x80>)
 8000a58:	2240      	movs	r2, #64	@ 0x40
 8000a5a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <LCD_RD_DATA+0x80>)
 8000a5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a62:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <LCD_RD_DATA+0x7c>)
 8000a66:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000a6a:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <LCD_RD_DATA+0x7c>)
 8000a6e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000a72:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <LCD_RD_DATA+0x7c>)
 8000a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a7a:	60da      	str	r2, [r3, #12]
	return t;
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40010c00 	.word	0x40010c00
 8000a8c:	40011000 	.word	0x40011000
 8000a90:	20000084 	.word	0x20000084

08000a94 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	460a      	mov	r2, r1
 8000a9e:	80fb      	strh	r3, [r7, #6]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000aa4:	88fb      	ldrh	r3, [r7, #6]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff68 	bl	800097c <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <LCD_WriteReg+0x4c>)
 8000aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <LCD_WriteReg+0x4c>)
 8000ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	4a09      	ldr	r2, [pc, #36]	@ (8000ae4 <LCD_WriteReg+0x50>)
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	60d3      	str	r3, [r2, #12]
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <LCD_WriteReg+0x4c>)
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	615a      	str	r2, [r3, #20]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <LCD_WriteReg+0x4c>)
 8000aca:	2280      	movs	r2, #128	@ 0x80
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	4b04      	ldr	r3, [pc, #16]	@ (8000ae0 <LCD_WriteReg+0x4c>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad4:	611a      	str	r2, [r3, #16]
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40010c00 	.word	0x40010c00

08000ae8 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff41 	bl	800097c <LCD_WR_REG>
	return LCD_RD_DATA();
 8000afa:	f7ff ff87 	bl	8000a0c <LCD_RD_DATA>
 8000afe:	4603      	mov	r3, r0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <LCD_WriteRAM_Prepare+0x14>)
 8000b0e:	891b      	ldrh	r3, [r3, #8]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff33 	bl	800097c <LCD_WR_REG>
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000084 	.word	0x20000084

08000b20 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	460a      	mov	r2, r1
 8000b2a:	80fb      	strh	r3, [r7, #6]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000b30:	4b73      	ldr	r3, [pc, #460]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000b32:	889b      	ldrh	r3, [r3, #4]
 8000b34:	f249 3241 	movw	r2, #37697	@ 0x9341
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d005      	beq.n	8000b48 <LCD_SetCursor+0x28>
 8000b3c:	4b70      	ldr	r3, [pc, #448]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	f245 3210 	movw	r2, #21264	@ 0x5310
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d164      	bne.n	8000c12 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000b48:	4b6d      	ldr	r3, [pc, #436]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000b4a:	895b      	ldrh	r3, [r3, #10]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff15 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000b52:	4b6c      	ldr	r3, [pc, #432]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	4b67      	ldr	r3, [pc, #412]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	4b65      	ldr	r3, [pc, #404]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	4b64      	ldr	r3, [pc, #400]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	4b62      	ldr	r3, [pc, #392]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000b80:	4b60      	ldr	r3, [pc, #384]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	4b5e      	ldr	r3, [pc, #376]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	88fb      	ldrh	r3, [r7, #6]
 8000b92:	4a5d      	ldr	r2, [pc, #372]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	60d3      	str	r3, [r2, #12]
 8000b98:	4b5a      	ldr	r3, [pc, #360]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000b9a:	2280      	movs	r2, #128	@ 0x80
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	4b59      	ldr	r3, [pc, #356]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000ba0:	2280      	movs	r2, #128	@ 0x80
 8000ba2:	611a      	str	r2, [r3, #16]
 8000ba4:	4b57      	ldr	r3, [pc, #348]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000baa:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000bac:	4b54      	ldr	r3, [pc, #336]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000bae:	899b      	ldrh	r3, [r3, #12]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fee3 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000bb6:	4b53      	ldr	r3, [pc, #332]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	4b51      	ldr	r3, [pc, #324]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	88bb      	ldrh	r3, [r7, #4]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000bd2:	2280      	movs	r2, #128	@ 0x80
 8000bd4:	615a      	str	r2, [r3, #20]
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	4b49      	ldr	r3, [pc, #292]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000bde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000be2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000be4:	4b47      	ldr	r3, [pc, #284]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000be6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	4b45      	ldr	r3, [pc, #276]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	88bb      	ldrh	r3, [r7, #4]
 8000bf6:	4a44      	ldr	r2, [pc, #272]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	60d3      	str	r3, [r2, #12]
 8000bfc:	4b41      	ldr	r3, [pc, #260]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	4b40      	ldr	r3, [pc, #256]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	4b3e      	ldr	r3, [pc, #248]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c0e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000c10:	e248      	b.n	80010a4 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000c12:	4b3b      	ldr	r3, [pc, #236]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000c14:	889b      	ldrh	r3, [r3, #4]
 8000c16:	f646 0204 	movw	r2, #26628	@ 0x6804
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d176      	bne.n	8000d0c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000c1e:	4b38      	ldr	r3, [pc, #224]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000c20:	799b      	ldrb	r3, [r3, #6]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d106      	bne.n	8000c34 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000c26:	4b36      	ldr	r3, [pc, #216]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000c28:	881a      	ldrh	r2, [r3, #0]
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3b01      	subs	r3, #1
 8000c32:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000c34:	4b32      	ldr	r3, [pc, #200]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000c36:	895b      	ldrh	r3, [r3, #10]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fe9f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c44:	611a      	str	r2, [r3, #16]
 8000c46:	4b2f      	ldr	r3, [pc, #188]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c4c:	615a      	str	r2, [r3, #20]
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	615a      	str	r2, [r3, #20]
 8000c5e:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c72:	611a      	str	r2, [r3, #16]
 8000c74:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	88fb      	ldrh	r3, [r7, #6]
 8000c7e:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	60d3      	str	r3, [r2, #12]
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	615a      	str	r2, [r3, #20]
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c8c:	2280      	movs	r2, #128	@ 0x80
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c96:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000c98:	4b19      	ldr	r3, [pc, #100]	@ (8000d00 <LCD_SetCursor+0x1e0>)
 8000c9a:	899b      	ldrh	r3, [r3, #12]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe6d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ca2:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cb0:	615a      	str	r2, [r3, #20]
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cbe:	2280      	movs	r2, #128	@ 0x80
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <LCD_SetCursor+0x1e8>)
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	60d3      	str	r3, [r2, #12]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cea:	2280      	movs	r2, #128	@ 0x80
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	4b05      	ldr	r3, [pc, #20]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cf0:	2280      	movs	r2, #128	@ 0x80
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <LCD_SetCursor+0x1e4>)
 8000cf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cfa:	611a      	str	r2, [r3, #16]
}
 8000cfc:	e1d2      	b.n	80010a4 <LCD_SetCursor+0x584>
 8000cfe:	bf00      	nop
 8000d00:	20000084 	.word	0x20000084
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000d0c:	4b99      	ldr	r3, [pc, #612]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000d0e:	889b      	ldrh	r3, [r3, #4]
 8000d10:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000d14:	4293      	cmp	r3, r2
 8000d16:	f040 8133 	bne.w	8000f80 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000d1a:	4b96      	ldr	r3, [pc, #600]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000d1c:	799b      	ldrb	r3, [r3, #6]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d163      	bne.n	8000dea <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000d22:	4b94      	ldr	r3, [pc, #592]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d30:	4b90      	ldr	r3, [pc, #576]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000d32:	895b      	ldrh	r3, [r3, #10]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe21 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000d3a:	4b8f      	ldr	r3, [pc, #572]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	4b8d      	ldr	r3, [pc, #564]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	4b8c      	ldr	r3, [pc, #560]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	4b89      	ldr	r3, [pc, #548]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d52:	2280      	movs	r2, #128	@ 0x80
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	4b88      	ldr	r3, [pc, #544]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	4b86      	ldr	r3, [pc, #536]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d62:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000d64:	4b84      	ldr	r3, [pc, #528]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d6a:	611a      	str	r2, [r3, #16]
 8000d6c:	4b82      	ldr	r3, [pc, #520]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	4b81      	ldr	r3, [pc, #516]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d7c:	2280      	movs	r2, #128	@ 0x80
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	4b7d      	ldr	r3, [pc, #500]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d82:	2280      	movs	r2, #128	@ 0x80
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	4b7c      	ldr	r3, [pc, #496]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	4b78      	ldr	r3, [pc, #480]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d9c:	615a      	str	r2, [r3, #20]
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	4b75      	ldr	r3, [pc, #468]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	4b73      	ldr	r3, [pc, #460]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000daa:	2280      	movs	r2, #128	@ 0x80
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	4b72      	ldr	r3, [pc, #456]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	4b70      	ldr	r3, [pc, #448]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dba:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000dbc:	4b6e      	ldr	r3, [pc, #440]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	4a6b      	ldr	r2, [pc, #428]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	4b68      	ldr	r3, [pc, #416]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	4b67      	ldr	r3, [pc, #412]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ddc:	2280      	movs	r2, #128	@ 0x80
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	4b65      	ldr	r3, [pc, #404]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	e061      	b.n	8000eae <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000dea:	4b62      	ldr	r3, [pc, #392]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000dec:	895b      	ldrh	r3, [r3, #10]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fdc4 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000df4:	4b60      	ldr	r3, [pc, #384]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000dfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	0a1b      	lsrs	r3, r3, #8
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e10:	2280      	movs	r2, #128	@ 0x80
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	4b58      	ldr	r3, [pc, #352]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e16:	2280      	movs	r2, #128	@ 0x80
 8000e18:	611a      	str	r2, [r3, #16]
 8000e1a:	4b57      	ldr	r3, [pc, #348]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e20:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000e22:	4b55      	ldr	r3, [pc, #340]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	4b53      	ldr	r3, [pc, #332]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e30:	615a      	str	r2, [r3, #20]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	4a51      	ldr	r2, [pc, #324]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	60d3      	str	r3, [r2, #12]
 8000e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e3c:	2280      	movs	r2, #128	@ 0x80
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	4b4d      	ldr	r3, [pc, #308]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e42:	2280      	movs	r2, #128	@ 0x80
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	4b4c      	ldr	r3, [pc, #304]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e4c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	4b48      	ldr	r3, [pc, #288]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e5c:	615a      	str	r2, [r3, #20]
 8000e5e:	4b45      	ldr	r3, [pc, #276]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	121a      	asrs	r2, r3, #8
 8000e66:	4b45      	ldr	r3, [pc, #276]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	4b43      	ldr	r3, [pc, #268]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e6c:	2280      	movs	r2, #128	@ 0x80
 8000e6e:	615a      	str	r2, [r3, #20]
 8000e70:	4b41      	ldr	r3, [pc, #260]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	611a      	str	r2, [r3, #16]
 8000e76:	4b40      	ldr	r3, [pc, #256]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e7c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	4b3c      	ldr	r3, [pc, #240]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	4b39      	ldr	r3, [pc, #228]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a39      	ldr	r2, [pc, #228]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	60d3      	str	r3, [r2, #12]
 8000e9a:	4b37      	ldr	r3, [pc, #220]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000e9c:	2280      	movs	r2, #128	@ 0x80
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	4b35      	ldr	r3, [pc, #212]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ea2:	2280      	movs	r2, #128	@ 0x80
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	4b34      	ldr	r3, [pc, #208]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000eae:	4b31      	ldr	r3, [pc, #196]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000eb0:	899b      	ldrh	r3, [r3, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fd62 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ec2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	4b29      	ldr	r3, [pc, #164]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ed4:	2280      	movs	r2, #128	@ 0x80
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	611a      	str	r2, [r3, #16]
 8000ede:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ee6:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ef4:	615a      	str	r2, [r3, #20]
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	4a20      	ldr	r2, [pc, #128]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	60d3      	str	r3, [r2, #12]
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f00:	2280      	movs	r2, #128	@ 0x80
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f06:	2280      	movs	r2, #128	@ 0x80
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f10:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f20:	615a      	str	r2, [r3, #20]
 8000f22:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000f24:	885b      	ldrh	r3, [r3, #2]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	121a      	asrs	r2, r3, #8
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f30:	2280      	movs	r2, #128	@ 0x80
 8000f32:	615a      	str	r2, [r3, #20]
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f36:	2280      	movs	r2, #128	@ 0x80
 8000f38:	611a      	str	r2, [r3, #16]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8000f42:	4b0d      	ldr	r3, [pc, #52]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f48:	611a      	str	r2, [r3, #16]
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <LCD_SetCursor+0x454>)
 8000f54:	885b      	ldrh	r3, [r3, #2]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a08      	ldr	r2, [pc, #32]	@ (8000f7c <LCD_SetCursor+0x45c>)
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	60d3      	str	r3, [r2, #12]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <LCD_SetCursor+0x458>)
 8000f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f70:	611a      	str	r2, [r3, #16]
}
 8000f72:	e097      	b.n	80010a4 <LCD_SetCursor+0x584>
 8000f74:	20000084 	.word	0x20000084
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8000f80:	4b4a      	ldr	r3, [pc, #296]	@ (80010ac <LCD_SetCursor+0x58c>)
 8000f82:	889b      	ldrh	r3, [r3, #4]
 8000f84:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d172      	bne.n	8001072 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8000f8c:	4b47      	ldr	r3, [pc, #284]	@ (80010ac <LCD_SetCursor+0x58c>)
 8000f8e:	895b      	ldrh	r3, [r3, #10]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fcf3 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000f96:	4b46      	ldr	r3, [pc, #280]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	4b44      	ldr	r3, [pc, #272]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b41      	ldr	r3, [pc, #260]	@ (80010b4 <LCD_SetCursor+0x594>)
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000fb2:	2280      	movs	r2, #128	@ 0x80
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000fb8:	2280      	movs	r2, #128	@ 0x80
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fc2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8000fc4:	4b39      	ldr	r3, [pc, #228]	@ (80010ac <LCD_SetCursor+0x58c>)
 8000fc6:	895b      	ldrh	r3, [r3, #10]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fcd5 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8000fd2:	4b37      	ldr	r3, [pc, #220]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000fd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	4b35      	ldr	r3, [pc, #212]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	4a33      	ldr	r2, [pc, #204]	@ (80010b4 <LCD_SetCursor+0x594>)
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	60d3      	str	r3, [r2, #12]
 8000fea:	4b31      	ldr	r3, [pc, #196]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000fec:	2280      	movs	r2, #128	@ 0x80
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <LCD_SetCursor+0x590>)
 8000ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ffc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80010ac <LCD_SetCursor+0x58c>)
 8001000:	899b      	ldrh	r3, [r3, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fcba 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001008:	4b29      	ldr	r3, [pc, #164]	@ (80010b0 <LCD_SetCursor+0x590>)
 800100a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	4b27      	ldr	r3, [pc, #156]	@ (80010b0 <LCD_SetCursor+0x590>)
 8001012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b25      	ldr	r3, [pc, #148]	@ (80010b4 <LCD_SetCursor+0x594>)
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <LCD_SetCursor+0x590>)
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	4b21      	ldr	r3, [pc, #132]	@ (80010b0 <LCD_SetCursor+0x590>)
 800102a:	2280      	movs	r2, #128	@ 0x80
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <LCD_SetCursor+0x590>)
 8001030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001034:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <LCD_SetCursor+0x58c>)
 8001038:	899b      	ldrh	r3, [r3, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	b29b      	uxth	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc9c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <LCD_SetCursor+0x590>)
 8001046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <LCD_SetCursor+0x590>)
 800104e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001052:	615a      	str	r2, [r3, #20]
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <LCD_SetCursor+0x594>)
 8001058:	b2db      	uxtb	r3, r3
 800105a:	60d3      	str	r3, [r2, #12]
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <LCD_SetCursor+0x590>)
 800105e:	2280      	movs	r2, #128	@ 0x80
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <LCD_SetCursor+0x590>)
 8001064:	2280      	movs	r2, #128	@ 0x80
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <LCD_SetCursor+0x590>)
 800106a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800106e:	611a      	str	r2, [r3, #16]
}
 8001070:	e018      	b.n	80010a4 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <LCD_SetCursor+0x58c>)
 8001074:	799b      	ldrb	r3, [r3, #6]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d106      	bne.n	8001088 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <LCD_SetCursor+0x58c>)
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b01      	subs	r3, #1
 8001086:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <LCD_SetCursor+0x58c>)
 800108a:	895b      	ldrh	r3, [r3, #10]
 800108c:	88fa      	ldrh	r2, [r7, #6]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fcff 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001096:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <LCD_SetCursor+0x58c>)
 8001098:	899b      	ldrh	r3, [r3, #12]
 800109a:	88ba      	ldrh	r2, [r7, #4]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fcf8 	bl	8000a94 <LCD_WriteReg>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000084 	.word	0x20000084
 80010b0:	40011000 	.word	0x40011000
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80010ca:	4b78      	ldr	r3, [pc, #480]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 80010cc:	799b      	ldrb	r3, [r3, #6]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10b      	bne.n	80010ea <LCD_Scan_Dir+0x32>
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 80010d4:	889b      	ldrh	r3, [r3, #4]
 80010d6:	f646 0204 	movw	r2, #26628	@ 0x6804
 80010da:	4293      	cmp	r3, r2
 80010dc:	d005      	beq.n	80010ea <LCD_Scan_Dir+0x32>
 80010de:	4b73      	ldr	r3, [pc, #460]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 80010e0:	889b      	ldrh	r3, [r3, #4]
 80010e2:	f641 1263 	movw	r2, #6499	@ 0x1963
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d109      	bne.n	80010fe <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80010ea:	4b70      	ldr	r3, [pc, #448]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 80010ec:	799b      	ldrb	r3, [r3, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d134      	bne.n	800115c <LCD_Scan_Dir+0xa4>
 80010f2:	4b6e      	ldr	r3, [pc, #440]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 80010f4:	889b      	ldrh	r3, [r3, #4]
 80010f6:	f641 1263 	movw	r2, #6499	@ 0x1963
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12e      	bne.n	800115c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d82b      	bhi.n	800115c <LCD_Scan_Dir+0xa4>
 8001104:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <LCD_Scan_Dir+0x54>)
 8001106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110a:	bf00      	nop
 800110c:	0800112d 	.word	0x0800112d
 8001110:	08001133 	.word	0x08001133
 8001114:	08001139 	.word	0x08001139
 8001118:	0800113f 	.word	0x0800113f
 800111c:	08001145 	.word	0x08001145
 8001120:	0800114b 	.word	0x0800114b
 8001124:	08001151 	.word	0x08001151
 8001128:	08001157 	.word	0x08001157
		{
		case 0:
			dir = 6;
 800112c:	2306      	movs	r3, #6
 800112e:	71fb      	strb	r3, [r7, #7]
			break;
 8001130:	e014      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001132:	2307      	movs	r3, #7
 8001134:	71fb      	strb	r3, [r7, #7]
			break;
 8001136:	e011      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	71fb      	strb	r3, [r7, #7]
			break;
 800113c:	e00e      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800113e:	2305      	movs	r3, #5
 8001140:	71fb      	strb	r3, [r7, #7]
			break;
 8001142:	e00b      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001144:	2301      	movs	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
			break;
 8001148:	e008      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
			break;
 800114e:	e005      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001150:	2303      	movs	r3, #3
 8001152:	71fb      	strb	r3, [r7, #7]
			break;
 8001154:	e002      	b.n	800115c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8001156:	2302      	movs	r3, #2
 8001158:	71fb      	strb	r3, [r7, #7]
			break;
 800115a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001164:	4293      	cmp	r3, r2
 8001166:	d018      	beq.n	800119a <LCD_Scan_Dir+0xe2>
 8001168:	4b50      	ldr	r3, [pc, #320]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 800116a:	889b      	ldrh	r3, [r3, #4]
 800116c:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001170:	4293      	cmp	r3, r2
 8001172:	d012      	beq.n	800119a <LCD_Scan_Dir+0xe2>
 8001174:	4b4d      	ldr	r3, [pc, #308]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	f245 3210 	movw	r2, #21264	@ 0x5310
 800117c:	4293      	cmp	r3, r2
 800117e:	d00c      	beq.n	800119a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001180:	4b4a      	ldr	r3, [pc, #296]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001188:	4293      	cmp	r3, r2
 800118a:	d006      	beq.n	800119a <LCD_Scan_Dir+0xe2>
 800118c:	4b47      	ldr	r3, [pc, #284]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 800118e:	889b      	ldrh	r3, [r3, #4]
 8001190:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001194:	4293      	cmp	r3, r2
 8001196:	f040 8250 	bne.w	800163a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b07      	cmp	r3, #7
 800119e:	d836      	bhi.n	800120e <LCD_Scan_Dir+0x156>
 80011a0:	a201      	add	r2, pc, #4	@ (adr r2, 80011a8 <LCD_Scan_Dir+0xf0>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	0800120f 	.word	0x0800120f
 80011ac:	080011c9 	.word	0x080011c9
 80011b0:	080011d3 	.word	0x080011d3
 80011b4:	080011dd 	.word	0x080011dd
 80011b8:	080011e7 	.word	0x080011e7
 80011bc:	080011f1 	.word	0x080011f1
 80011c0:	080011fb 	.word	0x080011fb
 80011c4:	08001205 	.word	0x08001205
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ce:	81fb      	strh	r3, [r7, #14]
			break;
 80011d0:	e01d      	b.n	800120e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d8:	81fb      	strh	r3, [r7, #14]
			break;
 80011da:	e018      	b.n	800120e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80011e2:	81fb      	strh	r3, [r7, #14]
			break;
 80011e4:	e013      	b.n	800120e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	f043 0320 	orr.w	r3, r3, #32
 80011ec:	81fb      	strh	r3, [r7, #14]
			break;
 80011ee:	e00e      	b.n	800120e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80011f6:	81fb      	strh	r3, [r7, #14]
			break;
 80011f8:	e009      	b.n	800120e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001200:	81fb      	strh	r3, [r7, #14]
			break;
 8001202:	e004      	b.n	800120e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800120a:	81fb      	strh	r3, [r7, #14]
			break;
 800120c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001210:	889b      	ldrh	r3, [r3, #4]
 8001212:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001216:	4293      	cmp	r3, r2
 8001218:	d103      	bne.n	8001222 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800121a:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 800121e:	81bb      	strh	r3, [r7, #12]
 8001220:	e001      	b.n	8001226 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001222:	2336      	movs	r3, #54	@ 0x36
 8001224:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	f245 3210 	movw	r2, #21264	@ 0x5310
 800122e:	4293      	cmp	r3, r2
 8001230:	d00f      	beq.n	8001252 <LCD_Scan_Dir+0x19a>
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001234:	889b      	ldrh	r3, [r3, #4]
 8001236:	f245 5210 	movw	r2, #21776	@ 0x5510
 800123a:	4293      	cmp	r3, r2
 800123c:	d009      	beq.n	8001252 <LCD_Scan_Dir+0x19a>
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001240:	889b      	ldrh	r3, [r3, #4]
 8001242:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001246:	4293      	cmp	r3, r2
 8001248:	d003      	beq.n	8001252 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001254:	889b      	ldrh	r3, [r3, #4]
 8001256:	f646 0204 	movw	r2, #26628	@ 0x6804
 800125a:	4293      	cmp	r3, r2
 800125c:	d103      	bne.n	8001266 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001266:	89fa      	ldrh	r2, [r7, #14]
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fc11 	bl	8000a94 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001274:	889b      	ldrh	r3, [r3, #4]
 8001276:	f641 1263 	movw	r2, #6499	@ 0x1963
 800127a:	4293      	cmp	r3, r2
 800127c:	d028      	beq.n	80012d0 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 800128a:	881a      	ldrh	r2, [r3, #0]
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 800128e:	885b      	ldrh	r3, [r3, #2]
 8001290:	429a      	cmp	r2, r3
 8001292:	d21d      	bcs.n	80012d0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 8001296:	881b      	ldrh	r3, [r3, #0]
 8001298:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 800129c:	885a      	ldrh	r2, [r3, #2]
 800129e:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 80012a0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012a2:	4a02      	ldr	r2, [pc, #8]	@ (80012ac <LCD_Scan_Dir+0x1f4>)
 80012a4:	897b      	ldrh	r3, [r7, #10]
 80012a6:	8053      	strh	r3, [r2, #2]
 80012a8:	e012      	b.n	80012d0 <LCD_Scan_Dir+0x218>
 80012aa:	bf00      	nop
 80012ac:	20000084 	.word	0x20000084
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80012b0:	4b7f      	ldr	r3, [pc, #508]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	4b7e      	ldr	r3, [pc, #504]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012b6:	885b      	ldrh	r3, [r3, #2]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d909      	bls.n	80012d0 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80012bc:	4b7c      	ldr	r3, [pc, #496]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80012c2:	4b7b      	ldr	r3, [pc, #492]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012c4:	885a      	ldrh	r2, [r3, #2]
 80012c6:	4b7a      	ldr	r3, [pc, #488]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012c8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80012ca:	4a79      	ldr	r2, [pc, #484]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012cc:	897b      	ldrh	r3, [r7, #10]
 80012ce:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80012d0:	4b77      	ldr	r3, [pc, #476]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012d2:	889b      	ldrh	r3, [r3, #4]
 80012d4:	f245 5210 	movw	r2, #21776	@ 0x5510
 80012d8:	4293      	cmp	r3, r2
 80012da:	f040 80ef 	bne.w	80014bc <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80012de:	4b74      	ldr	r3, [pc, #464]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80012e0:	895b      	ldrh	r3, [r3, #10]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fb4a 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80012e8:	4b72      	ldr	r3, [pc, #456]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80012ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	4b70      	ldr	r3, [pc, #448]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80012f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	4b6f      	ldr	r3, [pc, #444]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	4b6d      	ldr	r3, [pc, #436]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001300:	2280      	movs	r2, #128	@ 0x80
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	4b6b      	ldr	r3, [pc, #428]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001306:	2280      	movs	r2, #128	@ 0x80
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	4b6a      	ldr	r3, [pc, #424]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800130c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001310:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001312:	4b67      	ldr	r3, [pc, #412]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001314:	895b      	ldrh	r3, [r3, #10]
 8001316:	3301      	adds	r3, #1
 8001318:	b29b      	uxth	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fb2e 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001320:	4b64      	ldr	r3, [pc, #400]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	4b62      	ldr	r3, [pc, #392]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800132a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132e:	615a      	str	r2, [r3, #20]
 8001330:	4b61      	ldr	r3, [pc, #388]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	615a      	str	r2, [r3, #20]
 800133c:	4b5d      	ldr	r3, [pc, #372]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	4b5c      	ldr	r3, [pc, #368]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001348:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800134a:	4b59      	ldr	r3, [pc, #356]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 800134c:	895b      	ldrh	r3, [r3, #10]
 800134e:	3302      	adds	r3, #2
 8001350:	b29b      	uxth	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fb12 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001358:	4b56      	ldr	r3, [pc, #344]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800135a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800135e:	611a      	str	r2, [r3, #16]
 8001360:	4b54      	ldr	r3, [pc, #336]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	4b51      	ldr	r3, [pc, #324]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	121a      	asrs	r2, r3, #8
 8001370:	4b51      	ldr	r3, [pc, #324]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	4b4f      	ldr	r3, [pc, #316]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001376:	2280      	movs	r2, #128	@ 0x80
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	4b4e      	ldr	r3, [pc, #312]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	4b4c      	ldr	r3, [pc, #304]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001386:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001388:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 800138a:	895b      	ldrh	r3, [r3, #10]
 800138c:	3303      	adds	r3, #3
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff faf3 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001396:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	4b45      	ldr	r3, [pc, #276]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	4a42      	ldr	r2, [pc, #264]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	60d3      	str	r3, [r2, #12]
 80013b2:	4b40      	ldr	r3, [pc, #256]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	615a      	str	r2, [r3, #20]
 80013b8:	4b3e      	ldr	r3, [pc, #248]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013ba:	2280      	movs	r2, #128	@ 0x80
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80013c6:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80013c8:	899b      	ldrh	r3, [r3, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fad6 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80013d0:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	4b36      	ldr	r3, [pc, #216]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013e8:	2280      	movs	r2, #128	@ 0x80
 80013ea:	615a      	str	r2, [r3, #20]
 80013ec:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013ee:	2280      	movs	r2, #128	@ 0x80
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80013f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013f8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	3301      	adds	r3, #1
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff faba 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001408:	4b2a      	ldr	r3, [pc, #168]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800140a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	4b25      	ldr	r3, [pc, #148]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800142c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001430:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001434:	899b      	ldrh	r3, [r3, #12]
 8001436:	3302      	adds	r3, #2
 8001438:	b29b      	uxth	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fa9e 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001440:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001442:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001446:	611a      	str	r2, [r3, #16]
 8001448:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800144a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001452:	885b      	ldrh	r3, [r3, #2]
 8001454:	3b01      	subs	r3, #1
 8001456:	121a      	asrs	r2, r3, #8
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800145e:	2280      	movs	r2, #128	@ 0x80
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800146a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001472:	899b      	ldrh	r3, [r3, #12]
 8001474:	3303      	adds	r3, #3
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fa7f 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001480:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 8001488:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <LCD_Scan_Dir+0x3f8>)
 8001490:	885b      	ldrh	r3, [r3, #2]
 8001492:	3b01      	subs	r3, #1
 8001494:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <LCD_Scan_Dir+0x400>)
 8001496:	b2db      	uxtb	r3, r3
 8001498:	60d3      	str	r3, [r2, #12]
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 800149c:	2280      	movs	r2, #128	@ 0x80
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <LCD_Scan_Dir+0x3fc>)
 80014a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ac:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80014ae:	e10b      	b.n	80016c8 <LCD_Scan_Dir+0x610>
 80014b0:	20000084 	.word	0x20000084
 80014b4:	40011000 	.word	0x40011000
 80014b8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80014bc:	4b84      	ldr	r3, [pc, #528]	@ (80016d0 <LCD_Scan_Dir+0x618>)
 80014be:	895b      	ldrh	r3, [r3, #10]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fa5b 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 80014c6:	4b83      	ldr	r3, [pc, #524]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80014c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	4b81      	ldr	r3, [pc, #516]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80014d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	4b80      	ldr	r3, [pc, #512]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	4b7d      	ldr	r3, [pc, #500]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	4b7c      	ldr	r3, [pc, #496]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	611a      	str	r2, [r3, #16]
 80014e8:	4b7a      	ldr	r3, [pc, #488]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80014ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ee:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80014f0:	4b78      	ldr	r3, [pc, #480]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80014f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	4b76      	ldr	r3, [pc, #472]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80014fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	4b75      	ldr	r3, [pc, #468]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	4b73      	ldr	r3, [pc, #460]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001508:	2280      	movs	r2, #128	@ 0x80
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	4b71      	ldr	r3, [pc, #452]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800150e:	2280      	movs	r2, #128	@ 0x80
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	4b70      	ldr	r3, [pc, #448]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001518:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800151a:	4b6e      	ldr	r3, [pc, #440]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800151c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	4b6c      	ldr	r3, [pc, #432]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	4b69      	ldr	r3, [pc, #420]	@ (80016d0 <LCD_Scan_Dir+0x618>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	121a      	asrs	r2, r3, #8
 8001532:	4b69      	ldr	r3, [pc, #420]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	4b67      	ldr	r3, [pc, #412]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	4b65      	ldr	r3, [pc, #404]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800153e:	2280      	movs	r2, #128	@ 0x80
 8001540:	611a      	str	r2, [r3, #16]
 8001542:	4b64      	ldr	r3, [pc, #400]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001548:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800154a:	4b62      	ldr	r3, [pc, #392]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800154c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	4b60      	ldr	r3, [pc, #384]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001554:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	4b5d      	ldr	r3, [pc, #372]	@ (80016d0 <LCD_Scan_Dir+0x618>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	4a5d      	ldr	r2, [pc, #372]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 8001562:	b2db      	uxtb	r3, r3
 8001564:	60d3      	str	r3, [r2, #12]
 8001566:	4b5b      	ldr	r3, [pc, #364]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001568:	2280      	movs	r2, #128	@ 0x80
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	4b59      	ldr	r3, [pc, #356]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800156e:	2280      	movs	r2, #128	@ 0x80
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	4b58      	ldr	r3, [pc, #352]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001578:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800157a:	4b55      	ldr	r3, [pc, #340]	@ (80016d0 <LCD_Scan_Dir+0x618>)
 800157c:	899b      	ldrh	r3, [r3, #12]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f9fc 	bl	800097c <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001584:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001586:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	4b51      	ldr	r3, [pc, #324]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800158e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001592:	615a      	str	r2, [r3, #20]
 8001594:	4b50      	ldr	r3, [pc, #320]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	4b4e      	ldr	r3, [pc, #312]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800159c:	2280      	movs	r2, #128	@ 0x80
 800159e:	615a      	str	r2, [r3, #20]
 80015a0:	4b4c      	ldr	r3, [pc, #304]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	4b4b      	ldr	r3, [pc, #300]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ac:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80015ae:	4b49      	ldr	r3, [pc, #292]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	4b47      	ldr	r3, [pc, #284]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	4b46      	ldr	r3, [pc, #280]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015c6:	2280      	movs	r2, #128	@ 0x80
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	4b42      	ldr	r3, [pc, #264]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015cc:	2280      	movs	r2, #128	@ 0x80
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	4b40      	ldr	r3, [pc, #256]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015d8:	4b3e      	ldr	r3, [pc, #248]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4b3c      	ldr	r3, [pc, #240]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015e6:	615a      	str	r2, [r3, #20]
 80015e8:	4b39      	ldr	r3, [pc, #228]	@ (80016d0 <LCD_Scan_Dir+0x618>)
 80015ea:	885b      	ldrh	r3, [r3, #2]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	121a      	asrs	r2, r3, #8
 80015f0:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015f6:	2280      	movs	r2, #128	@ 0x80
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	4b36      	ldr	r3, [pc, #216]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 80015fc:	2280      	movs	r2, #128	@ 0x80
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001602:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001606:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001608:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800160a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001612:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <LCD_Scan_Dir+0x618>)
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	3b01      	subs	r3, #1
 800161e:	4a2e      	ldr	r2, [pc, #184]	@ (80016d8 <LCD_Scan_Dir+0x620>)
 8001620:	b2db      	uxtb	r3, r3
 8001622:	60d3      	str	r3, [r2, #12]
 8001624:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 800162c:	2280      	movs	r2, #128	@ 0x80
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <LCD_Scan_Dir+0x61c>)
 8001632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001636:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001638:	e046      	b.n	80016c8 <LCD_Scan_Dir+0x610>
		}
	} else {
		switch (dir) {
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b07      	cmp	r3, #7
 800163e:	d836      	bhi.n	80016ae <LCD_Scan_Dir+0x5f6>
 8001640:	a201      	add	r2, pc, #4	@ (adr r2, 8001648 <LCD_Scan_Dir+0x590>)
 8001642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001646:	bf00      	nop
 8001648:	08001669 	.word	0x08001669
 800164c:	08001673 	.word	0x08001673
 8001650:	0800167d 	.word	0x0800167d
 8001654:	080016af 	.word	0x080016af
 8001658:	08001687 	.word	0x08001687
 800165c:	08001691 	.word	0x08001691
 8001660:	0800169b 	.word	0x0800169b
 8001664:	080016a5 	.word	0x080016a5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800166e:	81fb      	strh	r3, [r7, #14]
			break;
 8001670:	e01d      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	81fb      	strh	r3, [r7, #14]
			break;
 800167a:	e018      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	81fb      	strh	r3, [r7, #14]
			break;
 8001684:	e013      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800168c:	81fb      	strh	r3, [r7, #14]
			break;
 800168e:	e00e      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001690:	89fb      	ldrh	r3, [r7, #14]
 8001692:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8001696:	81fb      	strh	r3, [r7, #14]
			break;
 8001698:	e009      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	f043 0318 	orr.w	r3, r3, #24
 80016a0:	81fb      	strh	r3, [r7, #14]
			break;
 80016a2:	e004      	b.n	80016ae <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	81fb      	strh	r3, [r7, #14]
			break;
 80016ac:	bf00      	nop
		}
		dirreg = 0X03;
 80016ae:	2303      	movs	r3, #3
 80016b0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016b8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80016ba:	89fa      	ldrh	r2, [r7, #14]
 80016bc:	89bb      	ldrh	r3, [r7, #12]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f9e7 	bl	8000a94 <LCD_WriteReg>
	}
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000084 	.word	0x20000084
 80016d4:	40011000 	.word	0x40011000
 80016d8:	40010c00 	.word	0x40010c00

080016dc <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
 80016e6:	460b      	mov	r3, r1
 80016e8:	80bb      	strh	r3, [r7, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80016ee:	4b75      	ldr	r3, [pc, #468]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 80016f0:	889b      	ldrh	r3, [r3, #4]
 80016f2:	f249 3241 	movw	r2, #37697	@ 0x9341
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d005      	beq.n	8001706 <LCD_Fast_DrawPoint+0x2a>
 80016fa:	4b72      	ldr	r3, [pc, #456]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 80016fc:	889b      	ldrh	r3, [r3, #4]
 80016fe:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001702:	4293      	cmp	r3, r2
 8001704:	d164      	bne.n	80017d0 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8001706:	4b6f      	ldr	r3, [pc, #444]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 8001708:	895b      	ldrh	r3, [r3, #10]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f936 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001710:	4b6d      	ldr	r3, [pc, #436]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	4b6b      	ldr	r3, [pc, #428]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800171a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	0a1b      	lsrs	r3, r3, #8
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b69      	ldr	r3, [pc, #420]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	4b67      	ldr	r3, [pc, #412]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	4b65      	ldr	r3, [pc, #404]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001732:	2280      	movs	r2, #128	@ 0x80
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b64      	ldr	r3, [pc, #400]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800173e:	4b62      	ldr	r3, [pc, #392]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b60      	ldr	r3, [pc, #384]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	4a5e      	ldr	r2, [pc, #376]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 8001752:	b2db      	uxtb	r3, r3
 8001754:	60d3      	str	r3, [r2, #12]
 8001756:	4b5c      	ldr	r3, [pc, #368]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001758:	2280      	movs	r2, #128	@ 0x80
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	4b5a      	ldr	r3, [pc, #360]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800175e:	2280      	movs	r2, #128	@ 0x80
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	4b59      	ldr	r3, [pc, #356]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001768:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800176a:	4b56      	ldr	r3, [pc, #344]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 800176c:	899b      	ldrh	r3, [r3, #12]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f904 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001774:	4b54      	ldr	r3, [pc, #336]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001776:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	4b52      	ldr	r3, [pc, #328]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800177e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b50      	ldr	r3, [pc, #320]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	4b4e      	ldr	r3, [pc, #312]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001790:	2280      	movs	r2, #128	@ 0x80
 8001792:	615a      	str	r2, [r3, #20]
 8001794:	4b4c      	ldr	r3, [pc, #304]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001796:	2280      	movs	r2, #128	@ 0x80
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	4b4b      	ldr	r3, [pc, #300]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800179c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80017a2:	4b49      	ldr	r3, [pc, #292]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80017a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	4b47      	ldr	r3, [pc, #284]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80017ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	88bb      	ldrh	r3, [r7, #4]
 80017b4:	4a45      	ldr	r2, [pc, #276]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	60d3      	str	r3, [r2, #12]
 80017ba:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80017bc:	2280      	movs	r2, #128	@ 0x80
 80017be:	615a      	str	r2, [r3, #20]
 80017c0:	4b41      	ldr	r3, [pc, #260]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80017c2:	2280      	movs	r2, #128	@ 0x80
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80017c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	e1e6      	b.n	8001b9e <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 80017d0:	4b3c      	ldr	r3, [pc, #240]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 80017d2:	889b      	ldrh	r3, [r3, #4]
 80017d4:	f245 5210 	movw	r2, #21776	@ 0x5510
 80017d8:	4293      	cmp	r3, r2
 80017da:	d179      	bne.n	80018d0 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 80017dc:	4b39      	ldr	r3, [pc, #228]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 80017de:	895b      	ldrh	r3, [r3, #10]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff f8cb 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80017e6:	4b38      	ldr	r3, [pc, #224]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80017e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017ec:	611a      	str	r2, [r3, #16]
 80017ee:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80017f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001802:	2280      	movs	r2, #128	@ 0x80
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001808:	2280      	movs	r2, #128	@ 0x80
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800180e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001812:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001814:	4b2b      	ldr	r3, [pc, #172]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 8001816:	895b      	ldrh	r3, [r3, #10]
 8001818:	3301      	adds	r3, #1
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff f8ad 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001822:	4b29      	ldr	r3, [pc, #164]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800182c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	4a25      	ldr	r2, [pc, #148]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 8001836:	b2db      	uxtb	r3, r3
 8001838:	60d3      	str	r3, [r2, #12]
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800183c:	2280      	movs	r2, #128	@ 0x80
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001842:	2280      	movs	r2, #128	@ 0x80
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 8001850:	899b      	ldrh	r3, [r3, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f892 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800185a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	b29a      	uxth	r2, r3
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001874:	2280      	movs	r2, #128	@ 0x80
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800187a:	2280      	movs	r2, #128	@ 0x80
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001880:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001884:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <LCD_Fast_DrawPoint+0x1e8>)
 8001888:	899b      	ldrh	r3, [r3, #12]
 800188a:	3301      	adds	r3, #1
 800188c:	b29b      	uxth	r3, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f874 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 8001896:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 800189e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a2:	615a      	str	r2, [r3, #20]
 80018a4:	88bb      	ldrh	r3, [r7, #4]
 80018a6:	4a09      	ldr	r2, [pc, #36]	@ (80018cc <LCD_Fast_DrawPoint+0x1f0>)
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	60d3      	str	r3, [r2, #12]
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80018ae:	2280      	movs	r2, #128	@ 0x80
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80018b4:	2280      	movs	r2, #128	@ 0x80
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <LCD_Fast_DrawPoint+0x1ec>)
 80018ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018be:	611a      	str	r2, [r3, #16]
 80018c0:	e16d      	b.n	8001b9e <LCD_Fast_DrawPoint+0x4c2>
 80018c2:	bf00      	nop
 80018c4:	20000084 	.word	0x20000084
 80018c8:	40011000 	.word	0x40011000
 80018cc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80018d0:	4b68      	ldr	r3, [pc, #416]	@ (8001a74 <LCD_Fast_DrawPoint+0x398>)
 80018d2:	889b      	ldrh	r3, [r3, #4]
 80018d4:	f641 1263 	movw	r2, #6499	@ 0x1963
 80018d8:	4293      	cmp	r3, r2
 80018da:	f040 80d1 	bne.w	8001a80 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 80018de:	4b65      	ldr	r3, [pc, #404]	@ (8001a74 <LCD_Fast_DrawPoint+0x398>)
 80018e0:	799b      	ldrb	r3, [r3, #6]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 80018e6:	4b63      	ldr	r3, [pc, #396]	@ (8001a74 <LCD_Fast_DrawPoint+0x398>)
 80018e8:	881a      	ldrh	r2, [r3, #0]
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80018f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001a74 <LCD_Fast_DrawPoint+0x398>)
 80018f6:	895b      	ldrh	r3, [r3, #10]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f83f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80018fe:	4b5e      	ldr	r3, [pc, #376]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001900:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	4b5c      	ldr	r3, [pc, #368]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190c:	615a      	str	r2, [r3, #20]
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b59      	ldr	r3, [pc, #356]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	4b57      	ldr	r3, [pc, #348]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 800191a:	2280      	movs	r2, #128	@ 0x80
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	4b56      	ldr	r3, [pc, #344]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001920:	2280      	movs	r2, #128	@ 0x80
 8001922:	611a      	str	r2, [r3, #16]
 8001924:	4b54      	ldr	r3, [pc, #336]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800192a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800192c:	4b52      	ldr	r3, [pc, #328]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 800192e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	4a4f      	ldr	r2, [pc, #316]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 8001940:	b2db      	uxtb	r3, r3
 8001942:	60d3      	str	r3, [r2, #12]
 8001944:	4b4c      	ldr	r3, [pc, #304]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001946:	2280      	movs	r2, #128	@ 0x80
 8001948:	615a      	str	r2, [r3, #20]
 800194a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 800194c:	2280      	movs	r2, #128	@ 0x80
 800194e:	611a      	str	r2, [r3, #16]
 8001950:	4b49      	ldr	r3, [pc, #292]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001956:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001958:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 800195a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195e:	611a      	str	r2, [r3, #16]
 8001960:	4b45      	ldr	r3, [pc, #276]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	0a1b      	lsrs	r3, r3, #8
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001974:	2280      	movs	r2, #128	@ 0x80
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	4b3f      	ldr	r3, [pc, #252]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 800197a:	2280      	movs	r2, #128	@ 0x80
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001984:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001986:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800198c:	611a      	str	r2, [r3, #16]
 800198e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4a38      	ldr	r2, [pc, #224]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 800199a:	b2db      	uxtb	r3, r3
 800199c:	60d3      	str	r3, [r2, #12]
 800199e:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019a0:	2280      	movs	r2, #128	@ 0x80
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019b0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019b2:	4b30      	ldr	r3, [pc, #192]	@ (8001a74 <LCD_Fast_DrawPoint+0x398>)
 80019b4:	899b      	ldrh	r3, [r3, #12]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe ffe0 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019c2:	611a      	str	r2, [r3, #16]
 80019c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ca:	615a      	str	r2, [r3, #20]
 80019cc:	88bb      	ldrh	r3, [r7, #4]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019d8:	2280      	movs	r2, #128	@ 0x80
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019de:	2280      	movs	r2, #128	@ 0x80
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f0:	611a      	str	r2, [r3, #16]
 80019f2:	4b21      	ldr	r3, [pc, #132]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 80019f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	4a1f      	ldr	r2, [pc, #124]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	60d3      	str	r3, [r2, #12]
 8001a02:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a04:	2280      	movs	r2, #128	@ 0x80
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a0a:	2280      	movs	r2, #128	@ 0x80
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001a16:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a32:	2280      	movs	r2, #128	@ 0x80
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a38:	2280      	movs	r2, #128	@ 0x80
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a42:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <LCD_Fast_DrawPoint+0x3a0>)
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	60d3      	str	r3, [r2, #12]
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a5e:	2280      	movs	r2, #128	@ 0x80
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a64:	2280      	movs	r2, #128	@ 0x80
 8001a66:	611a      	str	r2, [r3, #16]
 8001a68:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <LCD_Fast_DrawPoint+0x39c>)
 8001a6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	e095      	b.n	8001b9e <LCD_Fast_DrawPoint+0x4c2>
 8001a72:	bf00      	nop
 8001a74:	20000084 	.word	0x20000084
 8001a78:	40011000 	.word	0x40011000
 8001a7c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001a80:	4b5e      	ldr	r3, [pc, #376]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001a82:	889b      	ldrh	r3, [r3, #4]
 8001a84:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d16f      	bne.n	8001b6c <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001a8e:	799b      	ldrb	r3, [r3, #6]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d106      	bne.n	8001aa2 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001a94:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001aa2:	4b56      	ldr	r3, [pc, #344]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001aa4:	895b      	ldrh	r3, [r3, #10]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe ff68 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001aac:	4b54      	ldr	r3, [pc, #336]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	4b52      	ldr	r3, [pc, #328]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	0a1b      	lsrs	r3, r3, #8
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b50      	ldr	r3, [pc, #320]	@ (8001c04 <LCD_Fast_DrawPoint+0x528>)
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	4b4c      	ldr	r3, [pc, #304]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001ace:	2280      	movs	r2, #128	@ 0x80
 8001ad0:	611a      	str	r2, [r3, #16]
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ad8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001ada:	4b49      	ldr	r3, [pc, #292]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001adc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001ae4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae8:	615a      	str	r2, [r3, #20]
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	4a45      	ldr	r2, [pc, #276]	@ (8001c04 <LCD_Fast_DrawPoint+0x528>)
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	60d3      	str	r3, [r2, #12]
 8001af2:	4b43      	ldr	r3, [pc, #268]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001af4:	2280      	movs	r2, #128	@ 0x80
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001afa:	2280      	movs	r2, #128	@ 0x80
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	4b40      	ldr	r3, [pc, #256]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b04:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001b06:	4b3d      	ldr	r3, [pc, #244]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001b08:	899b      	ldrh	r3, [r3, #12]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ff36 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001b10:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	4b39      	ldr	r3, [pc, #228]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <LCD_Fast_DrawPoint+0x528>)
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	4b35      	ldr	r3, [pc, #212]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b2c:	2280      	movs	r2, #128	@ 0x80
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	4b32      	ldr	r3, [pc, #200]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001b3e:	4b30      	ldr	r3, [pc, #192]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	4a2c      	ldr	r2, [pc, #176]	@ (8001c04 <LCD_Fast_DrawPoint+0x528>)
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	60d3      	str	r3, [r2, #12]
 8001b56:	4b2a      	ldr	r3, [pc, #168]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	615a      	str	r2, [r3, #20]
 8001b5c:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	611a      	str	r2, [r3, #16]
 8001b62:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b68:	611a      	str	r2, [r3, #16]
 8001b6a:	e018      	b.n	8001b9e <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001b6c:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001b6e:	799b      	ldrb	r3, [r3, #6]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001b76:	881a      	ldrh	r2, [r3, #0]
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001b84:	895b      	ldrh	r3, [r3, #10]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe ff82 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001b90:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001b92:	899b      	ldrh	r3, [r3, #12]
 8001b94:	88ba      	ldrh	r2, [r7, #4]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe ff7b 	bl	8000a94 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001ba0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bac:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001bae:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <LCD_Fast_DrawPoint+0x520>)
 8001bb0:	891a      	ldrh	r2, [r3, #8]
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <LCD_Fast_DrawPoint+0x528>)
 8001bb4:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001bb8:	2280      	movs	r2, #128	@ 0x80
 8001bba:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001bbc:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001bbe:	2280      	movs	r2, #128	@ 0x80
 8001bc0:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001bca:	4b0d      	ldr	r3, [pc, #52]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <LCD_Fast_DrawPoint+0x528>)
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	60d3      	str	r3, [r2, #12]
 8001be0:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001be2:	2280      	movs	r2, #128	@ 0x80
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001be8:	2280      	movs	r2, #128	@ 0x80
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <LCD_Fast_DrawPoint+0x524>)
 8001bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf2:	611a      	str	r2, [r3, #16]
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000084 	.word	0x20000084
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40010c00 	.word	0x40010c00

08001c08 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001c12:	20be      	movs	r0, #190	@ 0xbe
 8001c14:	f7fe feb2 	bl	800097c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001c18:	4b4b      	ldr	r3, [pc, #300]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c1e:	611a      	str	r2, [r3, #16]
 8001c20:	4b49      	ldr	r3, [pc, #292]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	4b48      	ldr	r3, [pc, #288]	@ (8001d4c <LCD_SSD_BackLightSet+0x144>)
 8001c2a:	2205      	movs	r2, #5
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	4b46      	ldr	r3, [pc, #280]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	615a      	str	r2, [r3, #20]
 8001c34:	4b44      	ldr	r3, [pc, #272]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c36:	2280      	movs	r2, #128	@ 0x80
 8001c38:	611a      	str	r2, [r3, #16]
 8001c3a:	4b43      	ldr	r3, [pc, #268]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c40:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001c42:	4b41      	ldr	r3, [pc, #260]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c50:	615a      	str	r2, [r3, #20]
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fd63 	bl	8000720 <__aeabi_i2d>
 8001c5a:	a339      	add	r3, pc, #228	@ (adr r3, 8001d40 <LCD_SSD_BackLightSet+0x138>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fae2 	bl	8000228 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4c38      	ldr	r4, [pc, #224]	@ (8001d4c <LCD_SSD_BackLightSet+0x144>)
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe fdc1 	bl	80007f4 <__aeabi_d2uiz>
 8001c72:	4603      	mov	r3, r0
 8001c74:	60e3      	str	r3, [r4, #12]
 8001c76:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	4b32      	ldr	r3, [pc, #200]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c7e:	2280      	movs	r2, #128	@ 0x80
 8001c80:	611a      	str	r2, [r3, #16]
 8001c82:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c88:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d4c <LCD_SSD_BackLightSet+0x144>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001ca2:	2280      	movs	r2, #128	@ 0x80
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001ca8:	2280      	movs	r2, #128	@ 0x80
 8001caa:	611a      	str	r2, [r3, #16]
 8001cac:	4b26      	ldr	r3, [pc, #152]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001cb4:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	4b21      	ldr	r3, [pc, #132]	@ (8001d4c <LCD_SSD_BackLightSet+0x144>)
 8001cc6:	22ff      	movs	r2, #255	@ 0xff
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001ccc:	2280      	movs	r2, #128	@ 0x80
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001cd2:	2280      	movs	r2, #128	@ 0x80
 8001cd4:	611a      	str	r2, [r3, #16]
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001cd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cdc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cec:	615a      	str	r2, [r3, #20]
 8001cee:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <LCD_SSD_BackLightSet+0x144>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001cf6:	2280      	movs	r2, #128	@ 0x80
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001cfc:	2280      	movs	r2, #128	@ 0x80
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d06:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001d0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d0e:	611a      	str	r2, [r3, #16]
 8001d10:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001d12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d16:	615a      	str	r2, [r3, #20]
 8001d18:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <LCD_SSD_BackLightSet+0x144>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001d20:	2280      	movs	r2, #128	@ 0x80
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001d26:	2280      	movs	r2, #128	@ 0x80
 8001d28:	611a      	str	r2, [r3, #16]
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <LCD_SSD_BackLightSet+0x140>)
 8001d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d30:	611a      	str	r2, [r3, #16]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd90      	pop	{r4, r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	66666666 	.word	0x66666666
 8001d44:	40046666 	.word	0x40046666
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	40010c00 	.word	0x40010c00

08001d50 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d177      	bne.n	8001e50 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001d60:	4b80      	ldr	r3, [pc, #512]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001d66:	4b7f      	ldr	r3, [pc, #508]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001d68:	22f0      	movs	r2, #240	@ 0xf0
 8001d6a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001d6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001d72:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001d74:	4b7b      	ldr	r3, [pc, #492]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00b      	beq.n	8001d98 <LCD_Display_Dir+0x48>
 8001d80:	4b78      	ldr	r3, [pc, #480]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d005      	beq.n	8001d98 <LCD_Display_Dir+0x48>
 8001d8c:	4b75      	ldr	r3, [pc, #468]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001d8e:	889b      	ldrh	r3, [r3, #4]
 8001d90:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d11e      	bne.n	8001dd6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8001d98:	4b72      	ldr	r3, [pc, #456]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001d9a:	222c      	movs	r2, #44	@ 0x2c
 8001d9c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001d9e:	4b71      	ldr	r3, [pc, #452]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001da0:	222a      	movs	r2, #42	@ 0x2a
 8001da2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001da4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001da6:	222b      	movs	r2, #43	@ 0x2b
 8001da8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001daa:	4b6e      	ldr	r3, [pc, #440]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001dac:	889b      	ldrh	r3, [r3, #4]
 8001dae:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d006      	beq.n	8001dc4 <LCD_Display_Dir+0x74>
 8001db6:	4b6b      	ldr	r3, [pc, #428]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001db8:	889b      	ldrh	r3, [r3, #4]
 8001dba:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 80c7 	bne.w	8001f52 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001dc4:	4b67      	ldr	r3, [pc, #412]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001dc6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001dca:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001dcc:	4b65      	ldr	r3, [pc, #404]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001dce:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001dd2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001dd4:	e0bd      	b.n	8001f52 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001dd6:	4b63      	ldr	r3, [pc, #396]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d114      	bne.n	8001e0c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001de2:	4b60      	ldr	r3, [pc, #384]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001de4:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001de8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001dea:	4b5e      	ldr	r3, [pc, #376]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001dec:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001df0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001df2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001df4:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001df8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001dfc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e00:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001e02:	4b58      	ldr	r3, [pc, #352]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e04:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001e08:	805a      	strh	r2, [r3, #2]
 8001e0a:	e0a3      	b.n	8001f54 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001e0c:	4b55      	ldr	r3, [pc, #340]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e0e:	889b      	ldrh	r3, [r3, #4]
 8001e10:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001e18:	4b52      	ldr	r3, [pc, #328]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e1a:	222c      	movs	r2, #44	@ 0x2c
 8001e1c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001e1e:	4b51      	ldr	r3, [pc, #324]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e20:	222b      	movs	r2, #43	@ 0x2b
 8001e22:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001e24:	4b4f      	ldr	r3, [pc, #316]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e26:	222a      	movs	r2, #42	@ 0x2a
 8001e28:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e2c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e30:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001e32:	4b4c      	ldr	r3, [pc, #304]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e34:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001e38:	805a      	strh	r2, [r3, #2]
 8001e3a:	e08b      	b.n	8001f54 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001e3c:	4b49      	ldr	r3, [pc, #292]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e3e:	2222      	movs	r2, #34	@ 0x22
 8001e40:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001e42:	4b48      	ldr	r3, [pc, #288]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e44:	2220      	movs	r2, #32
 8001e46:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001e48:	4b46      	ldr	r3, [pc, #280]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e4a:	2221      	movs	r2, #33	@ 0x21
 8001e4c:	819a      	strh	r2, [r3, #12]
 8001e4e:	e081      	b.n	8001f54 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001e50:	4b44      	ldr	r3, [pc, #272]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001e56:	4b43      	ldr	r3, [pc, #268]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e58:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001e5c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001e5e:	4b41      	ldr	r3, [pc, #260]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e60:	22f0      	movs	r2, #240	@ 0xf0
 8001e62:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001e64:	4b3f      	ldr	r3, [pc, #252]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d005      	beq.n	8001e7c <LCD_Display_Dir+0x12c>
 8001e70:	4b3c      	ldr	r3, [pc, #240]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d109      	bne.n	8001e90 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001e7c:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e7e:	222c      	movs	r2, #44	@ 0x2c
 8001e80:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001e82:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e84:	222a      	movs	r2, #42	@ 0x2a
 8001e86:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001e88:	4b36      	ldr	r3, [pc, #216]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e8a:	222b      	movs	r2, #43	@ 0x2b
 8001e8c:	819a      	strh	r2, [r3, #12]
 8001e8e:	e04b      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e92:	889b      	ldrh	r3, [r3, #4]
 8001e94:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d109      	bne.n	8001eb0 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001e9e:	222c      	movs	r2, #44	@ 0x2c
 8001ea0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001ea2:	4b30      	ldr	r3, [pc, #192]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ea4:	222b      	movs	r2, #43	@ 0x2b
 8001ea6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001eaa:	222a      	movs	r2, #42	@ 0x2a
 8001eac:	819a      	strh	r2, [r3, #12]
 8001eae:	e03b      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d114      	bne.n	8001ee6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001ebc:	4b29      	ldr	r3, [pc, #164]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ebe:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001ec2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ec6:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8001eca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001ecc:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ece:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001ed2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001ed4:	4b23      	ldr	r3, [pc, #140]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ed6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001eda:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ede:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ee2:	805a      	strh	r2, [r3, #2]
 8001ee4:	e020      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d111      	bne.n	8001f16 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001ef4:	222c      	movs	r2, #44	@ 0x2c
 8001ef6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001efa:	222a      	movs	r2, #42	@ 0x2a
 8001efc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f00:	222b      	movs	r2, #43	@ 0x2b
 8001f02:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001f04:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f06:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001f0a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f0e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001f12:	805a      	strh	r2, [r3, #2]
 8001f14:	e008      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f18:	2222      	movs	r2, #34	@ 0x22
 8001f1a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f1e:	2221      	movs	r2, #33	@ 0x21
 8001f20:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f24:	2220      	movs	r2, #32
 8001f26:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f28:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	f646 0204 	movw	r2, #26628	@ 0x6804
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d005      	beq.n	8001f40 <LCD_Display_Dir+0x1f0>
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d109      	bne.n	8001f54 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f42:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001f46:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <LCD_Display_Dir+0x214>)
 8001f4a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001f4e:	805a      	strh	r2, [r3, #2]
 8001f50:	e000      	b.n	8001f54 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001f52:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff f8af 	bl	80010b8 <LCD_Scan_Dir>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000084 	.word	0x20000084

08001f68 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001f6e:	4b90      	ldr	r3, [pc, #576]	@ (80021b0 <LCD_Init+0x248>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	4a8f      	ldr	r2, [pc, #572]	@ (80021b0 <LCD_Init+0x248>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	6193      	str	r3, [r2, #24]
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80021b0 <LCD_Init+0x248>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001f86:	4b8a      	ldr	r3, [pc, #552]	@ (80021b0 <LCD_Init+0x248>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	4a89      	ldr	r2, [pc, #548]	@ (80021b0 <LCD_Init+0x248>)
 8001f8c:	f043 0310 	orr.w	r3, r3, #16
 8001f90:	6193      	str	r3, [r2, #24]
 8001f92:	4b87      	ldr	r3, [pc, #540]	@ (80021b0 <LCD_Init+0x248>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 0310 	and.w	r3, r3, #16
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001f9e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001fa2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001fac:	2303      	movs	r3, #3
 8001fae:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	487f      	ldr	r0, [pc, #508]	@ (80021b4 <LCD_Init+0x24c>)
 8001fb8:	f005 f940 	bl	800723c <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001fbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fc0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	487b      	ldr	r0, [pc, #492]	@ (80021b8 <LCD_Init+0x250>)
 8001fca:	f005 f937 	bl	800723c <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001fce:	2032      	movs	r0, #50	@ 0x32
 8001fd0:	f004 fe8e 	bl	8006cf0 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7fe fd5c 	bl	8000a94 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001fdc:	2032      	movs	r0, #50	@ 0x32
 8001fde:	f004 fe87 	bl	8006cf0 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7fe fd80 	bl	8000ae8 <LCD_ReadReg>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b73      	ldr	r3, [pc, #460]	@ (80021bc <LCD_Init+0x254>)
 8001fee:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001ff0:	4b72      	ldr	r3, [pc, #456]	@ (80021bc <LCD_Init+0x254>)
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ff6:	d90b      	bls.n	8002010 <LCD_Init+0xa8>
 8001ff8:	4b70      	ldr	r3, [pc, #448]	@ (80021bc <LCD_Init+0x254>)
 8001ffa:	889b      	ldrh	r3, [r3, #4]
 8001ffc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002000:	4293      	cmp	r3, r2
 8002002:	d005      	beq.n	8002010 <LCD_Init+0xa8>
 8002004:	4b6d      	ldr	r3, [pc, #436]	@ (80021bc <LCD_Init+0x254>)
 8002006:	889b      	ldrh	r3, [r3, #4]
 8002008:	f5b3 4f13 	cmp.w	r3, #37632	@ 0x9300
 800200c:	f040 80c8 	bne.w	80021a0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002010:	20d3      	movs	r0, #211	@ 0xd3
 8002012:	f7fe fcb3 	bl	800097c <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8002016:	f7fe fcf9 	bl	8000a0c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 800201a:	f7fe fcf7 	bl	8000a0c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 800201e:	f7fe fcf5 	bl	8000a0c <LCD_RD_DATA>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	4b65      	ldr	r3, [pc, #404]	@ (80021bc <LCD_Init+0x254>)
 8002028:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 800202a:	4b64      	ldr	r3, [pc, #400]	@ (80021bc <LCD_Init+0x254>)
 800202c:	889b      	ldrh	r3, [r3, #4]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b29a      	uxth	r2, r3
 8002032:	4b62      	ldr	r3, [pc, #392]	@ (80021bc <LCD_Init+0x254>)
 8002034:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8002036:	f7fe fce9 	bl	8000a0c <LCD_RD_DATA>
 800203a:	4603      	mov	r3, r0
 800203c:	461a      	mov	r2, r3
 800203e:	4b5f      	ldr	r3, [pc, #380]	@ (80021bc <LCD_Init+0x254>)
 8002040:	889b      	ldrh	r3, [r3, #4]
 8002042:	4313      	orrs	r3, r2
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b5d      	ldr	r3, [pc, #372]	@ (80021bc <LCD_Init+0x254>)
 8002048:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800204a:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <LCD_Init+0x254>)
 800204c:	889b      	ldrh	r3, [r3, #4]
 800204e:	f249 3241 	movw	r2, #37697	@ 0x9341
 8002052:	4293      	cmp	r3, r2
 8002054:	f000 80a4 	beq.w	80021a0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8002058:	20bf      	movs	r0, #191	@ 0xbf
 800205a:	f7fe fc8f 	bl	800097c <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800205e:	f7fe fcd5 	bl	8000a0c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8002062:	f7fe fcd3 	bl	8000a0c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8002066:	f7fe fcd1 	bl	8000a0c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800206a:	f7fe fccf 	bl	8000a0c <LCD_RD_DATA>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b52      	ldr	r3, [pc, #328]	@ (80021bc <LCD_Init+0x254>)
 8002074:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8002076:	4b51      	ldr	r3, [pc, #324]	@ (80021bc <LCD_Init+0x254>)
 8002078:	889b      	ldrh	r3, [r3, #4]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b4f      	ldr	r3, [pc, #316]	@ (80021bc <LCD_Init+0x254>)
 8002080:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8002082:	f7fe fcc3 	bl	8000a0c <LCD_RD_DATA>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	4b4c      	ldr	r3, [pc, #304]	@ (80021bc <LCD_Init+0x254>)
 800208c:	889b      	ldrh	r3, [r3, #4]
 800208e:	4313      	orrs	r3, r2
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b4a      	ldr	r3, [pc, #296]	@ (80021bc <LCD_Init+0x254>)
 8002094:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8002096:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <LCD_Init+0x254>)
 8002098:	889b      	ldrh	r3, [r3, #4]
 800209a:	f646 0204 	movw	r2, #26628	@ 0x6804
 800209e:	4293      	cmp	r3, r2
 80020a0:	d07e      	beq.n	80021a0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80020a2:	20d4      	movs	r0, #212	@ 0xd4
 80020a4:	f7fe fc6a 	bl	800097c <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80020a8:	f7fe fcb0 	bl	8000a0c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80020ac:	f7fe fcae 	bl	8000a0c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80020b0:	f7fe fcac 	bl	8000a0c <LCD_RD_DATA>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b40      	ldr	r3, [pc, #256]	@ (80021bc <LCD_Init+0x254>)
 80020ba:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80020bc:	4b3f      	ldr	r3, [pc, #252]	@ (80021bc <LCD_Init+0x254>)
 80020be:	889b      	ldrh	r3, [r3, #4]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	4b3d      	ldr	r3, [pc, #244]	@ (80021bc <LCD_Init+0x254>)
 80020c6:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80020c8:	f7fe fca0 	bl	8000a0c <LCD_RD_DATA>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <LCD_Init+0x254>)
 80020d2:	889b      	ldrh	r3, [r3, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <LCD_Init+0x254>)
 80020da:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80020dc:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <LCD_Init+0x254>)
 80020de:	889b      	ldrh	r3, [r3, #4]
 80020e0:	f245 3210 	movw	r2, #21264	@ 0x5310
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d05b      	beq.n	80021a0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80020e8:	f44f 405a 	mov.w	r0, #55808	@ 0xda00
 80020ec:	f7fe fc46 	bl	800097c <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80020f0:	f7fe fc8c 	bl	8000a0c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80020f4:	f44f 405b 	mov.w	r0, #56064	@ 0xdb00
 80020f8:	f7fe fc40 	bl	800097c <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80020fc:	f7fe fc86 	bl	8000a0c <LCD_RD_DATA>
 8002100:	4603      	mov	r3, r0
 8002102:	461a      	mov	r2, r3
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <LCD_Init+0x254>)
 8002106:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002108:	4b2c      	ldr	r3, [pc, #176]	@ (80021bc <LCD_Init+0x254>)
 800210a:	889b      	ldrh	r3, [r3, #4]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	b29a      	uxth	r2, r3
 8002110:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <LCD_Init+0x254>)
 8002112:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002114:	f44f 405c 	mov.w	r0, #56320	@ 0xdc00
 8002118:	f7fe fc30 	bl	800097c <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 800211c:	f7fe fc76 	bl	8000a0c <LCD_RD_DATA>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <LCD_Init+0x254>)
 8002126:	889b      	ldrh	r3, [r3, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	b29a      	uxth	r2, r3
 800212c:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <LCD_Init+0x254>)
 800212e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8002130:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <LCD_Init+0x254>)
 8002132:	889b      	ldrh	r3, [r3, #4]
 8002134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002138:	d103      	bne.n	8002142 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800213a:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <LCD_Init+0x254>)
 800213c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8002140:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <LCD_Init+0x254>)
 8002144:	889b      	ldrh	r3, [r3, #4]
 8002146:	f245 5210 	movw	r2, #21776	@ 0x5510
 800214a:	4293      	cmp	r3, r2
 800214c:	d028      	beq.n	80021a0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800214e:	20a1      	movs	r0, #161	@ 0xa1
 8002150:	f7fe fc14 	bl	800097c <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8002154:	f7fe fc5a 	bl	8000a0c <LCD_RD_DATA>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <LCD_Init+0x254>)
 800215e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8002160:	f7fe fc54 	bl	8000a0c <LCD_RD_DATA>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <LCD_Init+0x254>)
 800216a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800216c:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <LCD_Init+0x254>)
 800216e:	889b      	ldrh	r3, [r3, #4]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b29a      	uxth	r2, r3
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <LCD_Init+0x254>)
 8002176:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002178:	f7fe fc48 	bl	8000a0c <LCD_RD_DATA>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <LCD_Init+0x254>)
 8002182:	889b      	ldrh	r3, [r3, #4]
 8002184:	4313      	orrs	r3, r2
 8002186:	b29a      	uxth	r2, r3
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <LCD_Init+0x254>)
 800218a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <LCD_Init+0x254>)
 800218e:	889b      	ldrh	r3, [r3, #4]
 8002190:	f245 7261 	movw	r2, #22369	@ 0x5761
 8002194:	4293      	cmp	r3, r2
 8002196:	d103      	bne.n	80021a0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002198:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <LCD_Init+0x254>)
 800219a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800219e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <LCD_Init+0x254>)
 80021a2:	889b      	ldrh	r3, [r3, #4]
 80021a4:	f249 3241 	movw	r2, #37697	@ 0x9341
 80021a8:	4293      	cmp	r3, r2
 80021aa:	f040 811f 	bne.w	80023ec <LCD_Init+0x484>
 80021ae:	e007      	b.n	80021c0 <LCD_Init+0x258>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	20000084 	.word	0x20000084
			{
		LCD_WR_REG(0xCF);
 80021c0:	20cf      	movs	r0, #207	@ 0xcf
 80021c2:	f7fe fbdb 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7fe fbfc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80021cc:	20c1      	movs	r0, #193	@ 0xc1
 80021ce:	f7fe fbf9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80021d2:	2030      	movs	r0, #48	@ 0x30
 80021d4:	f7fe fbf6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80021d8:	20ed      	movs	r0, #237	@ 0xed
 80021da:	f7fe fbcf 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80021de:	2064      	movs	r0, #100	@ 0x64
 80021e0:	f7fe fbf0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f7fe fbed 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80021ea:	2012      	movs	r0, #18
 80021ec:	f7fe fbea 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80021f0:	2081      	movs	r0, #129	@ 0x81
 80021f2:	f7fe fbe7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80021f6:	20e8      	movs	r0, #232	@ 0xe8
 80021f8:	f7fe fbc0 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80021fc:	2085      	movs	r0, #133	@ 0x85
 80021fe:	f7fe fbe1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002202:	2010      	movs	r0, #16
 8002204:	f7fe fbde 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002208:	207a      	movs	r0, #122	@ 0x7a
 800220a:	f7fe fbdb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 800220e:	20cb      	movs	r0, #203	@ 0xcb
 8002210:	f7fe fbb4 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8002214:	2039      	movs	r0, #57	@ 0x39
 8002216:	f7fe fbd5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 800221a:	202c      	movs	r0, #44	@ 0x2c
 800221c:	f7fe fbd2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002220:	2000      	movs	r0, #0
 8002222:	f7fe fbcf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002226:	2034      	movs	r0, #52	@ 0x34
 8002228:	f7fe fbcc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800222c:	2002      	movs	r0, #2
 800222e:	f7fe fbc9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8002232:	20f7      	movs	r0, #247	@ 0xf7
 8002234:	f7fe fba2 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002238:	2020      	movs	r0, #32
 800223a:	f7fe fbc3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800223e:	20ea      	movs	r0, #234	@ 0xea
 8002240:	f7fe fb9c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fbbd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800224a:	2000      	movs	r0, #0
 800224c:	f7fe fbba 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8002250:	20c0      	movs	r0, #192	@ 0xc0
 8002252:	f7fe fb93 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8002256:	201b      	movs	r0, #27
 8002258:	f7fe fbb4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800225c:	20c1      	movs	r0, #193	@ 0xc1
 800225e:	f7fe fb8d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8002262:	2001      	movs	r0, #1
 8002264:	f7fe fbae 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8002268:	20c5      	movs	r0, #197	@ 0xc5
 800226a:	f7fe fb87 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800226e:	2030      	movs	r0, #48	@ 0x30
 8002270:	f7fe fba8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8002274:	2030      	movs	r0, #48	@ 0x30
 8002276:	f7fe fba5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800227a:	20c7      	movs	r0, #199	@ 0xc7
 800227c:	f7fe fb7e 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002280:	20b7      	movs	r0, #183	@ 0xb7
 8002282:	f7fe fb9f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8002286:	2036      	movs	r0, #54	@ 0x36
 8002288:	f7fe fb78 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800228c:	2048      	movs	r0, #72	@ 0x48
 800228e:	f7fe fb99 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8002292:	203a      	movs	r0, #58	@ 0x3a
 8002294:	f7fe fb72 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002298:	2055      	movs	r0, #85	@ 0x55
 800229a:	f7fe fb93 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800229e:	20b1      	movs	r0, #177	@ 0xb1
 80022a0:	f7fe fb6c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f7fe fb8d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80022aa:	201a      	movs	r0, #26
 80022ac:	f7fe fb8a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80022b0:	20b6      	movs	r0, #182	@ 0xb6
 80022b2:	f7fe fb63 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80022b6:	200a      	movs	r0, #10
 80022b8:	f7fe fb84 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80022bc:	20a2      	movs	r0, #162	@ 0xa2
 80022be:	f7fe fb81 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80022c2:	20f2      	movs	r0, #242	@ 0xf2
 80022c4:	f7fe fb5a 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022c8:	2000      	movs	r0, #0
 80022ca:	f7fe fb7b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80022ce:	2026      	movs	r0, #38	@ 0x26
 80022d0:	f7fe fb54 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f7fe fb75 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80022da:	20e0      	movs	r0, #224	@ 0xe0
 80022dc:	f7fe fb4e 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80022e0:	200f      	movs	r0, #15
 80022e2:	f7fe fb6f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80022e6:	202a      	movs	r0, #42	@ 0x2a
 80022e8:	f7fe fb6c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80022ec:	2028      	movs	r0, #40	@ 0x28
 80022ee:	f7fe fb69 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80022f2:	2008      	movs	r0, #8
 80022f4:	f7fe fb66 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80022f8:	200e      	movs	r0, #14
 80022fa:	f7fe fb63 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80022fe:	2008      	movs	r0, #8
 8002300:	f7fe fb60 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002304:	2054      	movs	r0, #84	@ 0x54
 8002306:	f7fe fb5d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 800230a:	20a9      	movs	r0, #169	@ 0xa9
 800230c:	f7fe fb5a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002310:	2043      	movs	r0, #67	@ 0x43
 8002312:	f7fe fb57 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8002316:	200a      	movs	r0, #10
 8002318:	f7fe fb54 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800231c:	200f      	movs	r0, #15
 800231e:	f7fe fb51 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002322:	2000      	movs	r0, #0
 8002324:	f7fe fb4e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002328:	2000      	movs	r0, #0
 800232a:	f7fe fb4b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800232e:	2000      	movs	r0, #0
 8002330:	f7fe fb48 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002334:	2000      	movs	r0, #0
 8002336:	f7fe fb45 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800233a:	20e1      	movs	r0, #225	@ 0xe1
 800233c:	f7fe fb1e 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002340:	2000      	movs	r0, #0
 8002342:	f7fe fb3f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8002346:	2015      	movs	r0, #21
 8002348:	f7fe fb3c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800234c:	2017      	movs	r0, #23
 800234e:	f7fe fb39 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8002352:	2007      	movs	r0, #7
 8002354:	f7fe fb36 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002358:	2011      	movs	r0, #17
 800235a:	f7fe fb33 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800235e:	2006      	movs	r0, #6
 8002360:	f7fe fb30 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8002364:	202b      	movs	r0, #43	@ 0x2b
 8002366:	f7fe fb2d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800236a:	2056      	movs	r0, #86	@ 0x56
 800236c:	f7fe fb2a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002370:	203c      	movs	r0, #60	@ 0x3c
 8002372:	f7fe fb27 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002376:	2005      	movs	r0, #5
 8002378:	f7fe fb24 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800237c:	2010      	movs	r0, #16
 800237e:	f7fe fb21 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002382:	200f      	movs	r0, #15
 8002384:	f7fe fb1e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002388:	203f      	movs	r0, #63	@ 0x3f
 800238a:	f7fe fb1b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800238e:	203f      	movs	r0, #63	@ 0x3f
 8002390:	f7fe fb18 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8002394:	200f      	movs	r0, #15
 8002396:	f7fe fb15 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800239a:	202b      	movs	r0, #43	@ 0x2b
 800239c:	f7fe faee 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7fe fb0f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7fe fb0c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe fb09 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80023b2:	203f      	movs	r0, #63	@ 0x3f
 80023b4:	f7fe fb06 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80023b8:	202a      	movs	r0, #42	@ 0x2a
 80023ba:	f7fe fadf 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe fb00 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7fe fafd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe fafa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80023d0:	20ef      	movs	r0, #239	@ 0xef
 80023d2:	f7fe faf7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80023d6:	2011      	movs	r0, #17
 80023d8:	f7fe fad0 	bl	800097c <LCD_WR_REG>
		HAL_Delay(120);
 80023dc:	2078      	movs	r0, #120	@ 0x78
 80023de:	f004 fc87 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80023e2:	2029      	movs	r0, #41	@ 0x29
 80023e4:	f7fe faca 	bl	800097c <LCD_WR_REG>
 80023e8:	f003 bcd8 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80023ec:	4b58      	ldr	r3, [pc, #352]	@ (8002550 <LCD_Init+0x5e8>)
 80023ee:	889b      	ldrh	r3, [r3, #4]
 80023f0:	f646 0204 	movw	r2, #26628	@ 0x6804
 80023f4:	4293      	cmp	r3, r2
 80023f6:	f040 80ad 	bne.w	8002554 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80023fa:	2011      	movs	r0, #17
 80023fc:	f7fe fabe 	bl	800097c <LCD_WR_REG>
		HAL_Delay(20);
 8002400:	2014      	movs	r0, #20
 8002402:	f004 fc75 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002406:	20d0      	movs	r0, #208	@ 0xd0
 8002408:	f7fe fab8 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800240c:	2007      	movs	r0, #7
 800240e:	f7fe fad9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002412:	2042      	movs	r0, #66	@ 0x42
 8002414:	f7fe fad6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002418:	201d      	movs	r0, #29
 800241a:	f7fe fad3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800241e:	20d1      	movs	r0, #209	@ 0xd1
 8002420:	f7fe faac 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002424:	2000      	movs	r0, #0
 8002426:	f7fe facd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800242a:	201a      	movs	r0, #26
 800242c:	f7fe faca 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002430:	2009      	movs	r0, #9
 8002432:	f7fe fac7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002436:	20d2      	movs	r0, #210	@ 0xd2
 8002438:	f7fe faa0 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800243c:	2001      	movs	r0, #1
 800243e:	f7fe fac1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002442:	2022      	movs	r0, #34	@ 0x22
 8002444:	f7fe fabe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002448:	20c0      	movs	r0, #192	@ 0xc0
 800244a:	f7fe fa97 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800244e:	2010      	movs	r0, #16
 8002450:	f7fe fab8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8002454:	203b      	movs	r0, #59	@ 0x3b
 8002456:	f7fe fab5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800245a:	2000      	movs	r0, #0
 800245c:	f7fe fab2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002460:	2002      	movs	r0, #2
 8002462:	f7fe faaf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8002466:	2011      	movs	r0, #17
 8002468:	f7fe faac 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 800246c:	20c5      	movs	r0, #197	@ 0xc5
 800246e:	f7fe fa85 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8002472:	2003      	movs	r0, #3
 8002474:	f7fe faa6 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002478:	20c8      	movs	r0, #200	@ 0xc8
 800247a:	f7fe fa7f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7fe faa0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002484:	2025      	movs	r0, #37	@ 0x25
 8002486:	f7fe fa9d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 800248a:	2021      	movs	r0, #33	@ 0x21
 800248c:	f7fe fa9a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002490:	2005      	movs	r0, #5
 8002492:	f7fe fa97 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe fa94 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 800249c:	200a      	movs	r0, #10
 800249e:	f7fe fa91 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80024a2:	2065      	movs	r0, #101	@ 0x65
 80024a4:	f7fe fa8e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80024a8:	2025      	movs	r0, #37	@ 0x25
 80024aa:	f7fe fa8b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80024ae:	2077      	movs	r0, #119	@ 0x77
 80024b0:	f7fe fa88 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80024b4:	2050      	movs	r0, #80	@ 0x50
 80024b6:	f7fe fa85 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80024ba:	200f      	movs	r0, #15
 80024bc:	f7fe fa82 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7fe fa7f 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80024c6:	20f8      	movs	r0, #248	@ 0xf8
 80024c8:	f7fe fa58 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7fe fa79 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80024d2:	20fe      	movs	r0, #254	@ 0xfe
 80024d4:	f7fe fa52 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7fe fa73 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80024de:	2002      	movs	r0, #2
 80024e0:	f7fe fa70 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80024e4:	2020      	movs	r0, #32
 80024e6:	f7fe fa49 	bl	800097c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80024ea:	2036      	movs	r0, #54	@ 0x36
 80024ec:	f7fe fa46 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80024f0:	2008      	movs	r0, #8
 80024f2:	f7fe fa67 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80024f6:	203a      	movs	r0, #58	@ 0x3a
 80024f8:	f7fe fa40 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80024fc:	2055      	movs	r0, #85	@ 0x55
 80024fe:	f7fe fa61 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002502:	202b      	movs	r0, #43	@ 0x2b
 8002504:	f7fe fa3a 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002508:	2000      	movs	r0, #0
 800250a:	f7fe fa5b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe fa58 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002514:	2001      	movs	r0, #1
 8002516:	f7fe fa55 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800251a:	203f      	movs	r0, #63	@ 0x3f
 800251c:	f7fe fa52 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002520:	202a      	movs	r0, #42	@ 0x2a
 8002522:	f7fe fa2b 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002526:	2000      	movs	r0, #0
 8002528:	f7fe fa4c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800252c:	2000      	movs	r0, #0
 800252e:	f7fe fa49 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002532:	2001      	movs	r0, #1
 8002534:	f7fe fa46 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002538:	20df      	movs	r0, #223	@ 0xdf
 800253a:	f7fe fa43 	bl	80009c4 <LCD_WR_DATAX>
		HAL_Delay(120);
 800253e:	2078      	movs	r0, #120	@ 0x78
 8002540:	f004 fbd6 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002544:	2029      	movs	r0, #41	@ 0x29
 8002546:	f7fe fa19 	bl	800097c <LCD_WR_REG>
 800254a:	f003 bc27 	b.w	8005d9c <LCD_Init+0x3e34>
 800254e:	bf00      	nop
 8002550:	20000084 	.word	0x20000084
	} else if (lcddev.id == 0x5310) {
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <LCD_Init+0x5fc>)
 8002556:	889b      	ldrh	r3, [r3, #4]
 8002558:	f245 3210 	movw	r2, #21264	@ 0x5310
 800255c:	4293      	cmp	r3, r2
 800255e:	f040 877c 	bne.w	800345a <LCD_Init+0x14f2>
 8002562:	e001      	b.n	8002568 <LCD_Init+0x600>
 8002564:	20000084 	.word	0x20000084
		LCD_WR_REG(0xED);
 8002568:	20ed      	movs	r0, #237	@ 0xed
 800256a:	f7fe fa07 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe fa28 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8002574:	20fe      	movs	r0, #254	@ 0xfe
 8002576:	f7fe fa25 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 800257a:	20ee      	movs	r0, #238	@ 0xee
 800257c:	f7fe f9fe 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002580:	20de      	movs	r0, #222	@ 0xde
 8002582:	f7fe fa1f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002586:	2021      	movs	r0, #33	@ 0x21
 8002588:	f7fe fa1c 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 800258c:	20f1      	movs	r0, #241	@ 0xf1
 800258e:	f7fe f9f5 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002592:	2001      	movs	r0, #1
 8002594:	f7fe fa16 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002598:	20df      	movs	r0, #223	@ 0xdf
 800259a:	f7fe f9ef 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 800259e:	2010      	movs	r0, #16
 80025a0:	f7fe fa10 	bl	80009c4 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80025a4:	20c4      	movs	r0, #196	@ 0xc4
 80025a6:	f7fe f9e9 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80025aa:	208f      	movs	r0, #143	@ 0x8f
 80025ac:	f7fe fa0a 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80025b0:	20c6      	movs	r0, #198	@ 0xc6
 80025b2:	f7fe f9e3 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fa04 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025bc:	20e2      	movs	r0, #226	@ 0xe2
 80025be:	f7fe fa01 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025c2:	20e2      	movs	r0, #226	@ 0xe2
 80025c4:	f7fe f9fe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80025c8:	20e2      	movs	r0, #226	@ 0xe2
 80025ca:	f7fe f9fb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80025ce:	20bf      	movs	r0, #191	@ 0xbf
 80025d0:	f7fe f9d4 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80025d4:	20aa      	movs	r0, #170	@ 0xaa
 80025d6:	f7fe f9f5 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80025da:	20b0      	movs	r0, #176	@ 0xb0
 80025dc:	f7fe f9ce 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80025e0:	200d      	movs	r0, #13
 80025e2:	f7fe f9ef 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7fe f9ec 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80025ec:	200d      	movs	r0, #13
 80025ee:	f7fe f9e9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe f9e6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80025f8:	2011      	movs	r0, #17
 80025fa:	f7fe f9e3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe f9e0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002604:	2019      	movs	r0, #25
 8002606:	f7fe f9dd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260a:	2000      	movs	r0, #0
 800260c:	f7fe f9da 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002610:	2021      	movs	r0, #33	@ 0x21
 8002612:	f7fe f9d7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe f9d4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800261c:	202d      	movs	r0, #45	@ 0x2d
 800261e:	f7fe f9d1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002622:	2000      	movs	r0, #0
 8002624:	f7fe f9ce 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002628:	203d      	movs	r0, #61	@ 0x3d
 800262a:	f7fe f9cb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe f9c8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002634:	205d      	movs	r0, #93	@ 0x5d
 8002636:	f7fe f9c5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe f9c2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002640:	205d      	movs	r0, #93	@ 0x5d
 8002642:	f7fe f9bf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe f9bc 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800264c:	20b1      	movs	r0, #177	@ 0xb1
 800264e:	f7fe f995 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8002652:	2080      	movs	r0, #128	@ 0x80
 8002654:	f7fe f9b6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002658:	2000      	movs	r0, #0
 800265a:	f7fe f9b3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800265e:	208b      	movs	r0, #139	@ 0x8b
 8002660:	f7fe f9b0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002664:	2000      	movs	r0, #0
 8002666:	f7fe f9ad 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 800266a:	2096      	movs	r0, #150	@ 0x96
 800266c:	f7fe f9aa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe f9a7 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8002676:	20b2      	movs	r0, #178	@ 0xb2
 8002678:	f7fe f980 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe f9a1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe f99e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002688:	2002      	movs	r0, #2
 800268a:	f7fe f99b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe f998 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002694:	2003      	movs	r0, #3
 8002696:	f7fe f995 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f7fe f992 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80026a0:	20b3      	movs	r0, #179	@ 0xb3
 80026a2:	f7fe f96b 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe f98c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe f989 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe f986 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe f983 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe f980 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe f97d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7fe f97a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f7fe f977 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fe f974 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe f971 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe f96e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe f96b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7fe f968 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f4:	2000      	movs	r0, #0
 80026f6:	f7fe f965 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7fe f962 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f7fe f95f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe f95c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f7fe f959 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe f956 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe f953 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe f950 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe f94d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe f94a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe f947 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002736:	20b4      	movs	r0, #180	@ 0xb4
 8002738:	f7fe f920 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800273c:	208b      	movs	r0, #139	@ 0x8b
 800273e:	f7fe f941 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002742:	2000      	movs	r0, #0
 8002744:	f7fe f93e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002748:	2096      	movs	r0, #150	@ 0x96
 800274a:	f7fe f93b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800274e:	2000      	movs	r0, #0
 8002750:	f7fe f938 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8002754:	20a1      	movs	r0, #161	@ 0xa1
 8002756:	f7fe f935 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275a:	2000      	movs	r0, #0
 800275c:	f7fe f932 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8002760:	20b5      	movs	r0, #181	@ 0xb5
 8002762:	f7fe f90b 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8002766:	2002      	movs	r0, #2
 8002768:	f7fe f92c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe f929 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8002772:	2003      	movs	r0, #3
 8002774:	f7fe f926 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7fe f923 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800277e:	2004      	movs	r0, #4
 8002780:	f7fe f920 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002784:	2000      	movs	r0, #0
 8002786:	f7fe f91d 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 800278a:	20b6      	movs	r0, #182	@ 0xb6
 800278c:	f7fe f8f6 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe f917 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe f914 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 800279c:	20b7      	movs	r0, #183	@ 0xb7
 800279e:	f7fe f8ed 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7fe f90e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7fe f90b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80027ae:	203f      	movs	r0, #63	@ 0x3f
 80027b0:	f7fe f908 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe f905 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80027ba:	205e      	movs	r0, #94	@ 0x5e
 80027bc:	f7fe f902 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe f8ff 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80027c6:	2064      	movs	r0, #100	@ 0x64
 80027c8:	f7fe f8fc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7fe f8f9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80027d2:	208c      	movs	r0, #140	@ 0x8c
 80027d4:	f7fe f8f6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe f8f3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80027de:	20ac      	movs	r0, #172	@ 0xac
 80027e0:	f7fe f8f0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7fe f8ed 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80027ea:	20dc      	movs	r0, #220	@ 0xdc
 80027ec:	f7fe f8ea 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7fe f8e7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80027f6:	2070      	movs	r0, #112	@ 0x70
 80027f8:	f7fe f8e4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe f8e1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002802:	2090      	movs	r0, #144	@ 0x90
 8002804:	f7fe f8de 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe f8db 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800280e:	20eb      	movs	r0, #235	@ 0xeb
 8002810:	f7fe f8d8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002814:	2000      	movs	r0, #0
 8002816:	f7fe f8d5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800281a:	20dc      	movs	r0, #220	@ 0xdc
 800281c:	f7fe f8d2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002820:	2000      	movs	r0, #0
 8002822:	f7fe f8cf 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002826:	20b8      	movs	r0, #184	@ 0xb8
 8002828:	f7fe f8a8 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800282c:	2000      	movs	r0, #0
 800282e:	f7fe f8c9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002832:	2000      	movs	r0, #0
 8002834:	f7fe f8c6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f7fe f8c3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f8c0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe f8bd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800284a:	2000      	movs	r0, #0
 800284c:	f7fe f8ba 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f7fe f8b7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f8b4 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 800285c:	20ba      	movs	r0, #186	@ 0xba
 800285e:	f7fe f88d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002862:	2024      	movs	r0, #36	@ 0x24
 8002864:	f7fe f8ae 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f7fe f8ab 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f8a8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f7fe f8a5 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 800287a:	20c1      	movs	r0, #193	@ 0xc1
 800287c:	f7fe f87e 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002880:	2020      	movs	r0, #32
 8002882:	f7fe f89f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f89c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800288c:	2054      	movs	r0, #84	@ 0x54
 800288e:	f7fe f899 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe f896 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002898:	20ff      	movs	r0, #255	@ 0xff
 800289a:	f7fe f893 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe f890 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80028a4:	20c2      	movs	r0, #194	@ 0xc2
 80028a6:	f7fe f869 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80028aa:	200a      	movs	r0, #10
 80028ac:	f7fe f88a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe f887 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80028b6:	2004      	movs	r0, #4
 80028b8:	f7fe f884 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7fe f881 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80028c2:	20c3      	movs	r0, #195	@ 0xc3
 80028c4:	f7fe f85a 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80028c8:	203c      	movs	r0, #60	@ 0x3c
 80028ca:	f7fe f87b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f878 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80028d4:	203a      	movs	r0, #58	@ 0x3a
 80028d6:	f7fe f875 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7fe f872 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80028e0:	2039      	movs	r0, #57	@ 0x39
 80028e2:	f7fe f86f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e6:	2000      	movs	r0, #0
 80028e8:	f7fe f86c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80028ec:	2037      	movs	r0, #55	@ 0x37
 80028ee:	f7fe f869 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7fe f866 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80028f8:	203c      	movs	r0, #60	@ 0x3c
 80028fa:	f7fe f863 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028fe:	2000      	movs	r0, #0
 8002900:	f7fe f860 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002904:	2036      	movs	r0, #54	@ 0x36
 8002906:	f7fe f85d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe f85a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002910:	2032      	movs	r0, #50	@ 0x32
 8002912:	f7fe f857 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f854 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800291c:	202f      	movs	r0, #47	@ 0x2f
 800291e:	f7fe f851 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f84e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002928:	202c      	movs	r0, #44	@ 0x2c
 800292a:	f7fe f84b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f848 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002934:	2029      	movs	r0, #41	@ 0x29
 8002936:	f7fe f845 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f842 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002940:	2026      	movs	r0, #38	@ 0x26
 8002942:	f7fe f83f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f83c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800294c:	2024      	movs	r0, #36	@ 0x24
 800294e:	f7fe f839 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f836 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002958:	2024      	movs	r0, #36	@ 0x24
 800295a:	f7fe f833 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f830 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002964:	2023      	movs	r0, #35	@ 0x23
 8002966:	f7fe f82d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f82a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002970:	203c      	movs	r0, #60	@ 0x3c
 8002972:	f7fe f827 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f824 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800297c:	2036      	movs	r0, #54	@ 0x36
 800297e:	f7fe f821 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f81e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002988:	2032      	movs	r0, #50	@ 0x32
 800298a:	f7fe f81b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe f818 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002994:	202f      	movs	r0, #47	@ 0x2f
 8002996:	f7fe f815 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe f812 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80029a0:	202c      	movs	r0, #44	@ 0x2c
 80029a2:	f7fe f80f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fe f80c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80029ac:	2029      	movs	r0, #41	@ 0x29
 80029ae:	f7fe f809 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fe f806 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80029b8:	2026      	movs	r0, #38	@ 0x26
 80029ba:	f7fe f803 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe f800 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029c4:	2024      	movs	r0, #36	@ 0x24
 80029c6:	f7fd fffd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fd fffa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80029d0:	2024      	movs	r0, #36	@ 0x24
 80029d2:	f7fd fff7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fd fff4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80029dc:	2023      	movs	r0, #35	@ 0x23
 80029de:	f7fd fff1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fd ffee 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80029e8:	20c4      	movs	r0, #196	@ 0xc4
 80029ea:	f7fd ffc7 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80029ee:	2062      	movs	r0, #98	@ 0x62
 80029f0:	f7fd ffe8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fd ffe5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80029fa:	2005      	movs	r0, #5
 80029fc:	f7fd ffe2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fd ffdf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002a06:	2084      	movs	r0, #132	@ 0x84
 8002a08:	f7fd ffdc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fd ffd9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002a12:	20f0      	movs	r0, #240	@ 0xf0
 8002a14:	f7fd ffd6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fd ffd3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a1e:	2018      	movs	r0, #24
 8002a20:	f7fd ffd0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7fd ffcd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002a2a:	20a4      	movs	r0, #164	@ 0xa4
 8002a2c:	f7fd ffca 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fd ffc7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002a36:	2018      	movs	r0, #24
 8002a38:	f7fd ffc4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fd ffc1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002a42:	2050      	movs	r0, #80	@ 0x50
 8002a44:	f7fd ffbe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fd ffbb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002a4e:	200c      	movs	r0, #12
 8002a50:	f7fd ffb8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fd ffb5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002a5a:	2017      	movs	r0, #23
 8002a5c:	f7fd ffb2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fd ffaf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002a66:	2095      	movs	r0, #149	@ 0x95
 8002a68:	f7fd ffac 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fd ffa9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a72:	20f3      	movs	r0, #243	@ 0xf3
 8002a74:	f7fd ffa6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fd ffa3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002a7e:	20e6      	movs	r0, #230	@ 0xe6
 8002a80:	f7fd ffa0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fd ff9d 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002a8a:	20c5      	movs	r0, #197	@ 0xc5
 8002a8c:	f7fd ff76 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002a90:	2032      	movs	r0, #50	@ 0x32
 8002a92:	f7fd ff97 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fd ff94 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002a9c:	2044      	movs	r0, #68	@ 0x44
 8002a9e:	f7fd ff91 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f7fd ff8e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002aa8:	2065      	movs	r0, #101	@ 0x65
 8002aaa:	f7fd ff8b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7fd ff88 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002ab4:	2076      	movs	r0, #118	@ 0x76
 8002ab6:	f7fd ff85 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fd ff82 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ac0:	2088      	movs	r0, #136	@ 0x88
 8002ac2:	f7fd ff7f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fd ff7c 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002acc:	20c6      	movs	r0, #198	@ 0xc6
 8002ace:	f7fd ff55 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002ad2:	2020      	movs	r0, #32
 8002ad4:	f7fd ff76 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fd ff73 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002ade:	2017      	movs	r0, #23
 8002ae0:	f7fd ff70 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7fd ff6d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f7fd ff6a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fd ff67 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002af6:	20c7      	movs	r0, #199	@ 0xc7
 8002af8:	f7fd ff40 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fd ff61 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fd ff5e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7fd ff5b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fd ff58 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002b14:	20c8      	movs	r0, #200	@ 0xc8
 8002b16:	f7fd ff31 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fd ff52 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b20:	2000      	movs	r0, #0
 8002b22:	f7fd ff4f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fd ff4c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fd ff49 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002b32:	20c9      	movs	r0, #201	@ 0xc9
 8002b34:	f7fd ff22 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fd ff43 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fd ff40 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fd ff3d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	f7fd ff3a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7fd ff37 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fd ff34 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7fd ff31 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fd ff2e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fd ff2b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fd ff28 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f7fd ff25 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fd ff22 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fd ff1f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fd ff1c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fd ff19 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fd ff16 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002b98:	20e0      	movs	r0, #224	@ 0xe0
 8002b9a:	f7fd feef 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002b9e:	2016      	movs	r0, #22
 8002ba0:	f7fd ff10 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7fd ff0d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002baa:	201c      	movs	r0, #28
 8002bac:	f7fd ff0a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7fd ff07 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002bb6:	2021      	movs	r0, #33	@ 0x21
 8002bb8:	f7fd ff04 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7fd ff01 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002bc2:	2036      	movs	r0, #54	@ 0x36
 8002bc4:	f7fd fefe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7fd fefb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002bce:	2046      	movs	r0, #70	@ 0x46
 8002bd0:	f7fd fef8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7fd fef5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002bda:	2052      	movs	r0, #82	@ 0x52
 8002bdc:	f7fd fef2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7fd feef 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002be6:	2064      	movs	r0, #100	@ 0x64
 8002be8:	f7fd feec 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bec:	2000      	movs	r0, #0
 8002bee:	f7fd fee9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002bf2:	207a      	movs	r0, #122	@ 0x7a
 8002bf4:	f7fd fee6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fd fee3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002bfe:	208b      	movs	r0, #139	@ 0x8b
 8002c00:	f7fd fee0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fd fedd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002c0a:	2099      	movs	r0, #153	@ 0x99
 8002c0c:	f7fd feda 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f7fd fed7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002c16:	20a8      	movs	r0, #168	@ 0xa8
 8002c18:	f7fd fed4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd fed1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002c22:	20b9      	movs	r0, #185	@ 0xb9
 8002c24:	f7fd fece 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7fd fecb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c2e:	20c4      	movs	r0, #196	@ 0xc4
 8002c30:	f7fd fec8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd fec5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002c3a:	20ca      	movs	r0, #202	@ 0xca
 8002c3c:	f7fd fec2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7fd febf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002c46:	20d2      	movs	r0, #210	@ 0xd2
 8002c48:	f7fd febc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fd feb9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002c52:	20d9      	movs	r0, #217	@ 0xd9
 8002c54:	f7fd feb6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fd feb3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002c5e:	20e0      	movs	r0, #224	@ 0xe0
 8002c60:	f7fd feb0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fd fead 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c6a:	20f3      	movs	r0, #243	@ 0xf3
 8002c6c:	f7fd feaa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fd fea7 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002c76:	20e1      	movs	r0, #225	@ 0xe1
 8002c78:	f7fd fe80 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002c7c:	2016      	movs	r0, #22
 8002c7e:	f7fd fea1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c82:	2000      	movs	r0, #0
 8002c84:	f7fd fe9e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002c88:	201c      	movs	r0, #28
 8002c8a:	f7fd fe9b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f7fd fe98 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002c94:	2022      	movs	r0, #34	@ 0x22
 8002c96:	f7fd fe95 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fd fe92 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002ca0:	2036      	movs	r0, #54	@ 0x36
 8002ca2:	f7fd fe8f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fd fe8c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002cac:	2045      	movs	r0, #69	@ 0x45
 8002cae:	f7fd fe89 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7fd fe86 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002cb8:	2052      	movs	r0, #82	@ 0x52
 8002cba:	f7fd fe83 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7fd fe80 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002cc4:	2064      	movs	r0, #100	@ 0x64
 8002cc6:	f7fd fe7d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f7fd fe7a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002cd0:	207a      	movs	r0, #122	@ 0x7a
 8002cd2:	f7fd fe77 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd fe74 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002cdc:	208b      	movs	r0, #139	@ 0x8b
 8002cde:	f7fd fe71 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f7fd fe6e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002ce8:	2099      	movs	r0, #153	@ 0x99
 8002cea:	f7fd fe6b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7fd fe68 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002cf4:	20a8      	movs	r0, #168	@ 0xa8
 8002cf6:	f7fd fe65 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7fd fe62 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002d00:	20b9      	movs	r0, #185	@ 0xb9
 8002d02:	f7fd fe5f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fd fe5c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002d0c:	20c4      	movs	r0, #196	@ 0xc4
 8002d0e:	f7fd fe59 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fd fe56 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002d18:	20ca      	movs	r0, #202	@ 0xca
 8002d1a:	f7fd fe53 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd fe50 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002d24:	20d2      	movs	r0, #210	@ 0xd2
 8002d26:	f7fd fe4d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd fe4a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002d30:	20d8      	movs	r0, #216	@ 0xd8
 8002d32:	f7fd fe47 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd fe44 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002d3c:	20e0      	movs	r0, #224	@ 0xe0
 8002d3e:	f7fd fe41 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd fe3e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d48:	20f3      	movs	r0, #243	@ 0xf3
 8002d4a:	f7fd fe3b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd fe38 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002d54:	20e2      	movs	r0, #226	@ 0xe2
 8002d56:	f7fd fe11 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002d5a:	2005      	movs	r0, #5
 8002d5c:	f7fd fe32 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd fe2f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002d66:	200b      	movs	r0, #11
 8002d68:	f7fd fe2c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd fe29 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002d72:	201b      	movs	r0, #27
 8002d74:	f7fd fe26 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd fe23 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d7e:	2034      	movs	r0, #52	@ 0x34
 8002d80:	f7fd fe20 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd fe1d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d8a:	2044      	movs	r0, #68	@ 0x44
 8002d8c:	f7fd fe1a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd fe17 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8002d96:	204f      	movs	r0, #79	@ 0x4f
 8002d98:	f7fd fe14 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd fe11 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8002da2:	2061      	movs	r0, #97	@ 0x61
 8002da4:	f7fd fe0e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd fe0b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8002dae:	2079      	movs	r0, #121	@ 0x79
 8002db0:	f7fd fe08 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd fe05 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002dba:	2088      	movs	r0, #136	@ 0x88
 8002dbc:	f7fd fe02 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd fdff 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002dc6:	2097      	movs	r0, #151	@ 0x97
 8002dc8:	f7fd fdfc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd fdf9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002dd2:	20a6      	movs	r0, #166	@ 0xa6
 8002dd4:	f7fd fdf6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd fdf3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002dde:	20b7      	movs	r0, #183	@ 0xb7
 8002de0:	f7fd fdf0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd fded 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002dea:	20c2      	movs	r0, #194	@ 0xc2
 8002dec:	f7fd fdea 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fde7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002df6:	20c7      	movs	r0, #199	@ 0xc7
 8002df8:	f7fd fde4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fde1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002e02:	20d1      	movs	r0, #209	@ 0xd1
 8002e04:	f7fd fdde 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd fddb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002e0e:	20d6      	movs	r0, #214	@ 0xd6
 8002e10:	f7fd fdd8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fdd5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002e1a:	20dd      	movs	r0, #221	@ 0xdd
 8002e1c:	f7fd fdd2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fd fdcf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002e26:	20f3      	movs	r0, #243	@ 0xf3
 8002e28:	f7fd fdcc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fdc9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002e32:	20e3      	movs	r0, #227	@ 0xe3
 8002e34:	f7fd fda2 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002e38:	2005      	movs	r0, #5
 8002e3a:	f7fd fdc3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e3e:	2000      	movs	r0, #0
 8002e40:	f7fd fdc0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002e44:	200a      	movs	r0, #10
 8002e46:	f7fd fdbd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fd fdba 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e50:	201c      	movs	r0, #28
 8002e52:	f7fd fdb7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f7fd fdb4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002e5c:	2033      	movs	r0, #51	@ 0x33
 8002e5e:	f7fd fdb1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7fd fdae 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e68:	2044      	movs	r0, #68	@ 0x44
 8002e6a:	f7fd fdab 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7fd fda8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002e74:	2050      	movs	r0, #80	@ 0x50
 8002e76:	f7fd fda5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7fd fda2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002e80:	2062      	movs	r0, #98	@ 0x62
 8002e82:	f7fd fd9f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fd fd9c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002e8c:	2078      	movs	r0, #120	@ 0x78
 8002e8e:	f7fd fd99 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7fd fd96 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002e98:	2088      	movs	r0, #136	@ 0x88
 8002e9a:	f7fd fd93 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f7fd fd90 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002ea4:	2097      	movs	r0, #151	@ 0x97
 8002ea6:	f7fd fd8d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fd fd8a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002eb0:	20a6      	movs	r0, #166	@ 0xa6
 8002eb2:	f7fd fd87 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7fd fd84 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002ebc:	20b7      	movs	r0, #183	@ 0xb7
 8002ebe:	f7fd fd81 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7fd fd7e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002ec8:	20c2      	movs	r0, #194	@ 0xc2
 8002eca:	f7fd fd7b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fd fd78 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002ed4:	20c7      	movs	r0, #199	@ 0xc7
 8002ed6:	f7fd fd75 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7fd fd72 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002ee0:	20d1      	movs	r0, #209	@ 0xd1
 8002ee2:	f7fd fd6f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7fd fd6c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002eec:	20d5      	movs	r0, #213	@ 0xd5
 8002eee:	f7fd fd69 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fd fd66 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002ef8:	20dd      	movs	r0, #221	@ 0xdd
 8002efa:	f7fd fd63 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fd60 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002f04:	20f3      	movs	r0, #243	@ 0xf3
 8002f06:	f7fd fd5d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fd5a 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002f10:	20e4      	movs	r0, #228	@ 0xe4
 8002f12:	f7fd fd33 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7fd fd54 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7fd fd51 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f7fd fd4e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fd fd4b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002f2e:	2002      	movs	r0, #2
 8002f30:	f7fd fd48 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fd fd45 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002f3a:	202a      	movs	r0, #42	@ 0x2a
 8002f3c:	f7fd fd42 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7fd fd3f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002f46:	203c      	movs	r0, #60	@ 0x3c
 8002f48:	f7fd fd3c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fd fd39 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002f52:	204b      	movs	r0, #75	@ 0x4b
 8002f54:	f7fd fd36 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f7fd fd33 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002f5e:	205d      	movs	r0, #93	@ 0x5d
 8002f60:	f7fd fd30 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f7fd fd2d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002f6a:	2074      	movs	r0, #116	@ 0x74
 8002f6c:	f7fd fd2a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f70:	2000      	movs	r0, #0
 8002f72:	f7fd fd27 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002f76:	2084      	movs	r0, #132	@ 0x84
 8002f78:	f7fd fd24 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fd fd21 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002f82:	2093      	movs	r0, #147	@ 0x93
 8002f84:	f7fd fd1e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fd fd1b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002f8e:	20a2      	movs	r0, #162	@ 0xa2
 8002f90:	f7fd fd18 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f7fd fd15 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002f9a:	20b3      	movs	r0, #179	@ 0xb3
 8002f9c:	f7fd fd12 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fd fd0f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002fa6:	20be      	movs	r0, #190	@ 0xbe
 8002fa8:	f7fd fd0c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fac:	2000      	movs	r0, #0
 8002fae:	f7fd fd09 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002fb2:	20c4      	movs	r0, #196	@ 0xc4
 8002fb4:	f7fd fd06 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7fd fd03 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002fbe:	20cd      	movs	r0, #205	@ 0xcd
 8002fc0:	f7fd fd00 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f7fd fcfd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002fca:	20d3      	movs	r0, #211	@ 0xd3
 8002fcc:	f7fd fcfa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7fd fcf7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002fd6:	20dd      	movs	r0, #221	@ 0xdd
 8002fd8:	f7fd fcf4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f7fd fcf1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fe2:	20f3      	movs	r0, #243	@ 0xf3
 8002fe4:	f7fd fcee 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fceb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002fee:	20e5      	movs	r0, #229	@ 0xe5
 8002ff0:	f7fd fcc4 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fce5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fd fce2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fcdf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003006:	2000      	movs	r0, #0
 8003008:	f7fd fcdc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 800300c:	2002      	movs	r0, #2
 800300e:	f7fd fcd9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003012:	2000      	movs	r0, #0
 8003014:	f7fd fcd6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003018:	2029      	movs	r0, #41	@ 0x29
 800301a:	f7fd fcd3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301e:	2000      	movs	r0, #0
 8003020:	f7fd fcd0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003024:	203c      	movs	r0, #60	@ 0x3c
 8003026:	f7fd fccd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800302a:	2000      	movs	r0, #0
 800302c:	f7fd fcca 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8003030:	204b      	movs	r0, #75	@ 0x4b
 8003032:	f7fd fcc7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003036:	2000      	movs	r0, #0
 8003038:	f7fd fcc4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800303c:	205d      	movs	r0, #93	@ 0x5d
 800303e:	f7fd fcc1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003042:	2000      	movs	r0, #0
 8003044:	f7fd fcbe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8003048:	2074      	movs	r0, #116	@ 0x74
 800304a:	f7fd fcbb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304e:	2000      	movs	r0, #0
 8003050:	f7fd fcb8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003054:	2084      	movs	r0, #132	@ 0x84
 8003056:	f7fd fcb5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd fcb2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8003060:	2093      	movs	r0, #147	@ 0x93
 8003062:	f7fd fcaf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fd fcac 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800306c:	20a2      	movs	r0, #162	@ 0xa2
 800306e:	f7fd fca9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fd fca6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003078:	20b3      	movs	r0, #179	@ 0xb3
 800307a:	f7fd fca3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fd fca0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8003084:	20be      	movs	r0, #190	@ 0xbe
 8003086:	f7fd fc9d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fd fc9a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003090:	20c4      	movs	r0, #196	@ 0xc4
 8003092:	f7fd fc97 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fd fc94 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800309c:	20cd      	movs	r0, #205	@ 0xcd
 800309e:	f7fd fc91 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd fc8e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80030a8:	20d3      	movs	r0, #211	@ 0xd3
 80030aa:	f7fd fc8b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fd fc88 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80030b4:	20dc      	movs	r0, #220	@ 0xdc
 80030b6:	f7fd fc85 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fd fc82 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030c0:	20f3      	movs	r0, #243	@ 0xf3
 80030c2:	f7fd fc7f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fc7c 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80030cc:	20e6      	movs	r0, #230	@ 0xe6
 80030ce:	f7fd fc55 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80030d2:	2011      	movs	r0, #17
 80030d4:	f7fd fc76 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d8:	2000      	movs	r0, #0
 80030da:	f7fd fc73 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80030de:	2034      	movs	r0, #52	@ 0x34
 80030e0:	f7fd fc70 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7fd fc6d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80030ea:	2056      	movs	r0, #86	@ 0x56
 80030ec:	f7fd fc6a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fd fc67 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80030f6:	2076      	movs	r0, #118	@ 0x76
 80030f8:	f7fd fc64 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030fc:	2000      	movs	r0, #0
 80030fe:	f7fd fc61 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003102:	2077      	movs	r0, #119	@ 0x77
 8003104:	f7fd fc5e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003108:	2000      	movs	r0, #0
 800310a:	f7fd fc5b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800310e:	2066      	movs	r0, #102	@ 0x66
 8003110:	f7fd fc58 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003114:	2000      	movs	r0, #0
 8003116:	f7fd fc55 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800311a:	2088      	movs	r0, #136	@ 0x88
 800311c:	f7fd fc52 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003120:	2000      	movs	r0, #0
 8003122:	f7fd fc4f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003126:	2099      	movs	r0, #153	@ 0x99
 8003128:	f7fd fc4c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f7fd fc49 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003132:	20bb      	movs	r0, #187	@ 0xbb
 8003134:	f7fd fc46 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003138:	2000      	movs	r0, #0
 800313a:	f7fd fc43 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800313e:	2099      	movs	r0, #153	@ 0x99
 8003140:	f7fd fc40 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fd fc3d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800314a:	2066      	movs	r0, #102	@ 0x66
 800314c:	f7fd fc3a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fd fc37 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003156:	2055      	movs	r0, #85	@ 0x55
 8003158:	f7fd fc34 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fd fc31 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003162:	2055      	movs	r0, #85	@ 0x55
 8003164:	f7fd fc2e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd fc2b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800316e:	2045      	movs	r0, #69	@ 0x45
 8003170:	f7fd fc28 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fd fc25 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800317a:	2043      	movs	r0, #67	@ 0x43
 800317c:	f7fd fc22 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fd fc1f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003186:	2044      	movs	r0, #68	@ 0x44
 8003188:	f7fd fc1c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fd fc19 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8003192:	20e7      	movs	r0, #231	@ 0xe7
 8003194:	f7fd fbf2 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003198:	2032      	movs	r0, #50	@ 0x32
 800319a:	f7fd fc13 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800319e:	2000      	movs	r0, #0
 80031a0:	f7fd fc10 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80031a4:	2055      	movs	r0, #85	@ 0x55
 80031a6:	f7fd fc0d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7fd fc0a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80031b0:	2076      	movs	r0, #118	@ 0x76
 80031b2:	f7fd fc07 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fd fc04 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80031bc:	2066      	movs	r0, #102	@ 0x66
 80031be:	f7fd fc01 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7fd fbfe 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031c8:	2067      	movs	r0, #103	@ 0x67
 80031ca:	f7fd fbfb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7fd fbf8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80031d4:	2067      	movs	r0, #103	@ 0x67
 80031d6:	f7fd fbf5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031da:	2000      	movs	r0, #0
 80031dc:	f7fd fbf2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80031e0:	2087      	movs	r0, #135	@ 0x87
 80031e2:	f7fd fbef 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7fd fbec 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80031ec:	2099      	movs	r0, #153	@ 0x99
 80031ee:	f7fd fbe9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f2:	2000      	movs	r0, #0
 80031f4:	f7fd fbe6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80031f8:	20bb      	movs	r0, #187	@ 0xbb
 80031fa:	f7fd fbe3 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031fe:	2000      	movs	r0, #0
 8003200:	f7fd fbe0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003204:	2099      	movs	r0, #153	@ 0x99
 8003206:	f7fd fbdd 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f7fd fbda 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003210:	2077      	movs	r0, #119	@ 0x77
 8003212:	f7fd fbd7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fd fbd4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800321c:	2044      	movs	r0, #68	@ 0x44
 800321e:	f7fd fbd1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fd fbce 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003228:	2056      	movs	r0, #86	@ 0x56
 800322a:	f7fd fbcb 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800322e:	2000      	movs	r0, #0
 8003230:	f7fd fbc8 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003234:	2023      	movs	r0, #35	@ 0x23
 8003236:	f7fd fbc5 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fbc2 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003240:	2033      	movs	r0, #51	@ 0x33
 8003242:	f7fd fbbf 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7fd fbbc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800324c:	2045      	movs	r0, #69	@ 0x45
 800324e:	f7fd fbb9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fbb6 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8003258:	20e8      	movs	r0, #232	@ 0xe8
 800325a:	f7fd fb8f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800325e:	2000      	movs	r0, #0
 8003260:	f7fd fbb0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7fd fbad 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800326a:	2099      	movs	r0, #153	@ 0x99
 800326c:	f7fd fbaa 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd fba7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003276:	2087      	movs	r0, #135	@ 0x87
 8003278:	f7fd fba4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd fba1 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003282:	2088      	movs	r0, #136	@ 0x88
 8003284:	f7fd fb9e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fd fb9b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800328e:	2077      	movs	r0, #119	@ 0x77
 8003290:	f7fd fb98 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003294:	2000      	movs	r0, #0
 8003296:	f7fd fb95 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800329a:	2066      	movs	r0, #102	@ 0x66
 800329c:	f7fd fb92 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fd fb8f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80032a6:	2088      	movs	r0, #136	@ 0x88
 80032a8:	f7fd fb8c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd fb89 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80032b2:	20aa      	movs	r0, #170	@ 0xaa
 80032b4:	f7fd fb86 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fd fb83 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80032be:	20bb      	movs	r0, #187	@ 0xbb
 80032c0:	f7fd fb80 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fd fb7d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80032ca:	2099      	movs	r0, #153	@ 0x99
 80032cc:	f7fd fb7a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d0:	2000      	movs	r0, #0
 80032d2:	f7fd fb77 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80032d6:	2066      	movs	r0, #102	@ 0x66
 80032d8:	f7fd fb74 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fd fb71 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032e2:	2055      	movs	r0, #85	@ 0x55
 80032e4:	f7fd fb6e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fd fb6b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80032ee:	2055      	movs	r0, #85	@ 0x55
 80032f0:	f7fd fb68 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fd fb65 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80032fa:	2044      	movs	r0, #68	@ 0x44
 80032fc:	f7fd fb62 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003300:	2000      	movs	r0, #0
 8003302:	f7fd fb5f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003306:	2044      	movs	r0, #68	@ 0x44
 8003308:	f7fd fb5c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800330c:	2000      	movs	r0, #0
 800330e:	f7fd fb59 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003312:	2055      	movs	r0, #85	@ 0x55
 8003314:	f7fd fb56 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003318:	2000      	movs	r0, #0
 800331a:	f7fd fb53 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 800331e:	20e9      	movs	r0, #233	@ 0xe9
 8003320:	f7fd fb2c 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003324:	20aa      	movs	r0, #170	@ 0xaa
 8003326:	f7fd fb4d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800332a:	2000      	movs	r0, #0
 800332c:	f7fd fb4a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fd fb47 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003336:	2000      	movs	r0, #0
 8003338:	f7fd fb44 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800333c:	2000      	movs	r0, #0
 800333e:	f7fd fb1d 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003342:	20aa      	movs	r0, #170	@ 0xaa
 8003344:	f7fd fb3e 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8003348:	20cf      	movs	r0, #207	@ 0xcf
 800334a:	f7fd fb17 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800334e:	2000      	movs	r0, #0
 8003350:	f7fd fb38 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd fb35 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800335a:	2000      	movs	r0, #0
 800335c:	f7fd fb32 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fb2f 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7fd fb2c 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fb29 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003372:	2000      	movs	r0, #0
 8003374:	f7fd fb26 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fb23 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800337e:	2000      	movs	r0, #0
 8003380:	f7fd fb20 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fb1d 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800338a:	2000      	movs	r0, #0
 800338c:	f7fd fb1a 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fb17 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003396:	2000      	movs	r0, #0
 8003398:	f7fd fb14 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fb11 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a2:	2000      	movs	r0, #0
 80033a4:	f7fd fb0e 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fd fb0b 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fd fb08 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80033b4:	20f0      	movs	r0, #240	@ 0xf0
 80033b6:	f7fd fae1 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fd fb02 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80033c0:	2050      	movs	r0, #80	@ 0x50
 80033c2:	f7fd faff 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fd fafc 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fd faf9 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fd faf6 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80033d8:	20f3      	movs	r0, #243	@ 0xf3
 80033da:	f7fd facf 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fd faf0 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80033e4:	20f9      	movs	r0, #249	@ 0xf9
 80033e6:	f7fd fac9 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80033ea:	2006      	movs	r0, #6
 80033ec:	f7fd faea 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80033f0:	2010      	movs	r0, #16
 80033f2:	f7fd fae7 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80033f6:	2029      	movs	r0, #41	@ 0x29
 80033f8:	f7fd fae4 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7fd fae1 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003402:	203a      	movs	r0, #58	@ 0x3a
 8003404:	f7fd faba 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003408:	2055      	movs	r0, #85	@ 0x55
 800340a:	f7fd fadb 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800340e:	2011      	movs	r0, #17
 8003410:	f7fd fab4 	bl	800097c <LCD_WR_REG>
		HAL_Delay(100);
 8003414:	2064      	movs	r0, #100	@ 0x64
 8003416:	f003 fc6b 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0x29);
 800341a:	2029      	movs	r0, #41	@ 0x29
 800341c:	f7fd faae 	bl	800097c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003420:	2035      	movs	r0, #53	@ 0x35
 8003422:	f7fd faab 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd facc 	bl	80009c4 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800342c:	2051      	movs	r0, #81	@ 0x51
 800342e:	f7fd faa5 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003432:	20ff      	movs	r0, #255	@ 0xff
 8003434:	f7fd fac6 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003438:	2053      	movs	r0, #83	@ 0x53
 800343a:	f7fd fa9f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800343e:	202c      	movs	r0, #44	@ 0x2c
 8003440:	f7fd fac0 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003444:	2055      	movs	r0, #85	@ 0x55
 8003446:	f7fd fa99 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800344a:	2082      	movs	r0, #130	@ 0x82
 800344c:	f7fd faba 	bl	80009c4 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8003450:	202c      	movs	r0, #44	@ 0x2c
 8003452:	f7fd fa93 	bl	800097c <LCD_WR_REG>
 8003456:	f002 bca1 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <LCD_Init+0x1504>)
 800345c:	889b      	ldrh	r3, [r3, #4]
 800345e:	f245 5210 	movw	r2, #21776	@ 0x5510
 8003462:	4293      	cmp	r3, r2
 8003464:	f040 8782 	bne.w	800436c <LCD_Init+0x2404>
 8003468:	e002      	b.n	8003470 <LCD_Init+0x1508>
 800346a:	bf00      	nop
 800346c:	20000084 	.word	0x20000084
		LCD_WriteReg(0xF000, 0x55);
 8003470:	2155      	movs	r1, #85	@ 0x55
 8003472:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8003476:	f7fd fb0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800347a:	21aa      	movs	r1, #170	@ 0xaa
 800347c:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8003480:	f7fd fb08 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003484:	2152      	movs	r1, #82	@ 0x52
 8003486:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800348a:	f7fd fb03 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 800348e:	2108      	movs	r1, #8
 8003490:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8003494:	f7fd fafe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003498:	2101      	movs	r1, #1
 800349a:	f24f 0004 	movw	r0, #61444	@ 0xf004
 800349e:	f7fd faf9 	bl	8000a94 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80034a2:	210d      	movs	r1, #13
 80034a4:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 80034a8:	f7fd faf4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80034ac:	210d      	movs	r1, #13
 80034ae:	f24b 0001 	movw	r0, #45057	@ 0xb001
 80034b2:	f7fd faef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80034b6:	210d      	movs	r1, #13
 80034b8:	f24b 0002 	movw	r0, #45058	@ 0xb002
 80034bc:	f7fd faea 	bl	8000a94 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80034c0:	2134      	movs	r1, #52	@ 0x34
 80034c2:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 80034c6:	f7fd fae5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80034ca:	2134      	movs	r1, #52	@ 0x34
 80034cc:	f24b 6001 	movw	r0, #46593	@ 0xb601
 80034d0:	f7fd fae0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80034d4:	2134      	movs	r1, #52	@ 0x34
 80034d6:	f24b 6002 	movw	r0, #46594	@ 0xb602
 80034da:	f7fd fadb 	bl	8000a94 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80034de:	210d      	movs	r1, #13
 80034e0:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 80034e4:	f7fd fad6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80034e8:	210d      	movs	r1, #13
 80034ea:	f24b 1001 	movw	r0, #45313	@ 0xb101
 80034ee:	f7fd fad1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80034f2:	210d      	movs	r1, #13
 80034f4:	f24b 1002 	movw	r0, #45314	@ 0xb102
 80034f8:	f7fd facc 	bl	8000a94 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80034fc:	2134      	movs	r1, #52	@ 0x34
 80034fe:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8003502:	f7fd fac7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003506:	2134      	movs	r1, #52	@ 0x34
 8003508:	f24b 7001 	movw	r0, #46849	@ 0xb701
 800350c:	f7fd fac2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003510:	2134      	movs	r1, #52	@ 0x34
 8003512:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8003516:	f7fd fabd 	bl	8000a94 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800351a:	2100      	movs	r1, #0
 800351c:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8003520:	f7fd fab8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003524:	2100      	movs	r1, #0
 8003526:	f24b 2001 	movw	r0, #45569	@ 0xb201
 800352a:	f7fd fab3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800352e:	2100      	movs	r1, #0
 8003530:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8003534:	f7fd faae 	bl	8000a94 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003538:	2124      	movs	r1, #36	@ 0x24
 800353a:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 800353e:	f7fd faa9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003542:	2124      	movs	r1, #36	@ 0x24
 8003544:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8003548:	f7fd faa4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800354c:	2124      	movs	r1, #36	@ 0x24
 800354e:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8003552:	f7fd fa9f 	bl	8000a94 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8003556:	2101      	movs	r1, #1
 8003558:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 800355c:	f7fd fa9a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8003560:	210f      	movs	r1, #15
 8003562:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8003566:	f7fd fa95 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 800356a:	210f      	movs	r1, #15
 800356c:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8003570:	f7fd fa90 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8003574:	210f      	movs	r1, #15
 8003576:	f24b 3002 	movw	r0, #45826	@ 0xb302
 800357a:	f7fd fa8b 	bl	8000a94 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 800357e:	2134      	movs	r1, #52	@ 0x34
 8003580:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8003584:	f7fd fa86 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003588:	2134      	movs	r1, #52	@ 0x34
 800358a:	f64b 1001 	movw	r0, #47361	@ 0xb901
 800358e:	f7fd fa81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8003592:	2134      	movs	r1, #52	@ 0x34
 8003594:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8003598:	f7fd fa7c 	bl	8000a94 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 800359c:	2108      	movs	r1, #8
 800359e:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 80035a2:	f7fd fa77 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80035a6:	2108      	movs	r1, #8
 80035a8:	f24b 5001 	movw	r0, #46337	@ 0xb501
 80035ac:	f7fd fa72 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80035b0:	2108      	movs	r1, #8
 80035b2:	f24b 5002 	movw	r0, #46338	@ 0xb502
 80035b6:	f7fd fa6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80035ba:	2103      	movs	r1, #3
 80035bc:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 80035c0:	f7fd fa68 	bl	8000a94 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80035c4:	2124      	movs	r1, #36	@ 0x24
 80035c6:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 80035ca:	f7fd fa63 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80035ce:	2124      	movs	r1, #36	@ 0x24
 80035d0:	f64b 2001 	movw	r0, #47617	@ 0xba01
 80035d4:	f7fd fa5e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80035d8:	2124      	movs	r1, #36	@ 0x24
 80035da:	f64b 2002 	movw	r0, #47618	@ 0xba02
 80035de:	f7fd fa59 	bl	8000a94 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80035e2:	2100      	movs	r1, #0
 80035e4:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80035e8:	f7fd fa54 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80035ec:	2178      	movs	r1, #120	@ 0x78
 80035ee:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80035f2:	f7fd fa4f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80035f6:	2100      	movs	r1, #0
 80035f8:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 80035fc:	f7fd fa4a 	bl	8000a94 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003600:	2100      	movs	r1, #0
 8003602:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8003606:	f7fd fa45 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800360a:	2178      	movs	r1, #120	@ 0x78
 800360c:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 8003610:	f7fd fa40 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003614:	2100      	movs	r1, #0
 8003616:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 800361a:	f7fd fa3b 	bl	8000a94 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800361e:	2100      	movs	r1, #0
 8003620:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8003624:	f7fd fa36 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003628:	2164      	movs	r1, #100	@ 0x64
 800362a:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800362e:	f7fd fa31 	bl	8000a94 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003632:	2100      	movs	r1, #0
 8003634:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8003638:	f7fd fa2c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800363c:	2133      	movs	r1, #51	@ 0x33
 800363e:	f24d 1001 	movw	r0, #53505	@ 0xd101
 8003642:	f7fd fa27 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003646:	2100      	movs	r1, #0
 8003648:	f24d 1002 	movw	r0, #53506	@ 0xd102
 800364c:	f7fd fa22 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8003650:	2134      	movs	r1, #52	@ 0x34
 8003652:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8003656:	f7fd fa1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 800365a:	2100      	movs	r1, #0
 800365c:	f24d 1004 	movw	r0, #53508	@ 0xd104
 8003660:	f7fd fa18 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8003664:	213a      	movs	r1, #58	@ 0x3a
 8003666:	f24d 1005 	movw	r0, #53509	@ 0xd105
 800366a:	f7fd fa13 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 800366e:	2100      	movs	r1, #0
 8003670:	f24d 1006 	movw	r0, #53510	@ 0xd106
 8003674:	f7fd fa0e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003678:	214a      	movs	r1, #74	@ 0x4a
 800367a:	f24d 1007 	movw	r0, #53511	@ 0xd107
 800367e:	f7fd fa09 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8003682:	2100      	movs	r1, #0
 8003684:	f24d 1008 	movw	r0, #53512	@ 0xd108
 8003688:	f7fd fa04 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 800368c:	215c      	movs	r1, #92	@ 0x5c
 800368e:	f24d 1009 	movw	r0, #53513	@ 0xd109
 8003692:	f7fd f9ff 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8003696:	2100      	movs	r1, #0
 8003698:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 800369c:	f7fd f9fa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80036a0:	2181      	movs	r1, #129	@ 0x81
 80036a2:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 80036a6:	f7fd f9f5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80036aa:	2100      	movs	r1, #0
 80036ac:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 80036b0:	f7fd f9f0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80036b4:	21a6      	movs	r1, #166	@ 0xa6
 80036b6:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 80036ba:	f7fd f9eb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80036be:	2100      	movs	r1, #0
 80036c0:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 80036c4:	f7fd f9e6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80036c8:	21e5      	movs	r1, #229	@ 0xe5
 80036ca:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 80036ce:	f7fd f9e1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80036d2:	2101      	movs	r1, #1
 80036d4:	f24d 1010 	movw	r0, #53520	@ 0xd110
 80036d8:	f7fd f9dc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80036dc:	2113      	movs	r1, #19
 80036de:	f24d 1011 	movw	r0, #53521	@ 0xd111
 80036e2:	f7fd f9d7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80036e6:	2101      	movs	r1, #1
 80036e8:	f24d 1012 	movw	r0, #53522	@ 0xd112
 80036ec:	f7fd f9d2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80036f0:	2154      	movs	r1, #84	@ 0x54
 80036f2:	f24d 1013 	movw	r0, #53523	@ 0xd113
 80036f6:	f7fd f9cd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80036fa:	2101      	movs	r1, #1
 80036fc:	f24d 1014 	movw	r0, #53524	@ 0xd114
 8003700:	f7fd f9c8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003704:	2182      	movs	r1, #130	@ 0x82
 8003706:	f24d 1015 	movw	r0, #53525	@ 0xd115
 800370a:	f7fd f9c3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800370e:	2101      	movs	r1, #1
 8003710:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8003714:	f7fd f9be 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003718:	21ca      	movs	r1, #202	@ 0xca
 800371a:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800371e:	f7fd f9b9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003722:	2102      	movs	r1, #2
 8003724:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8003728:	f7fd f9b4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800372c:	2100      	movs	r1, #0
 800372e:	f24d 1019 	movw	r0, #53529	@ 0xd119
 8003732:	f7fd f9af 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003736:	2102      	movs	r1, #2
 8003738:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 800373c:	f7fd f9aa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003740:	2101      	movs	r1, #1
 8003742:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8003746:	f7fd f9a5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800374a:	2102      	movs	r1, #2
 800374c:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 8003750:	f7fd f9a0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8003754:	2134      	movs	r1, #52	@ 0x34
 8003756:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 800375a:	f7fd f99b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 800375e:	2102      	movs	r1, #2
 8003760:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 8003764:	f7fd f996 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8003768:	2167      	movs	r1, #103	@ 0x67
 800376a:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 800376e:	f7fd f991 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8003772:	2102      	movs	r1, #2
 8003774:	f24d 1020 	movw	r0, #53536	@ 0xd120
 8003778:	f7fd f98c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 800377c:	2184      	movs	r1, #132	@ 0x84
 800377e:	f24d 1021 	movw	r0, #53537	@ 0xd121
 8003782:	f7fd f987 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003786:	2102      	movs	r1, #2
 8003788:	f24d 1022 	movw	r0, #53538	@ 0xd122
 800378c:	f7fd f982 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003790:	21a4      	movs	r1, #164	@ 0xa4
 8003792:	f24d 1023 	movw	r0, #53539	@ 0xd123
 8003796:	f7fd f97d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 800379a:	2102      	movs	r1, #2
 800379c:	f24d 1024 	movw	r0, #53540	@ 0xd124
 80037a0:	f7fd f978 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80037a4:	21b7      	movs	r1, #183	@ 0xb7
 80037a6:	f24d 1025 	movw	r0, #53541	@ 0xd125
 80037aa:	f7fd f973 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80037ae:	2102      	movs	r1, #2
 80037b0:	f24d 1026 	movw	r0, #53542	@ 0xd126
 80037b4:	f7fd f96e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80037b8:	21cf      	movs	r1, #207	@ 0xcf
 80037ba:	f24d 1027 	movw	r0, #53543	@ 0xd127
 80037be:	f7fd f969 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80037c2:	2102      	movs	r1, #2
 80037c4:	f24d 1028 	movw	r0, #53544	@ 0xd128
 80037c8:	f7fd f964 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80037cc:	21de      	movs	r1, #222	@ 0xde
 80037ce:	f24d 1029 	movw	r0, #53545	@ 0xd129
 80037d2:	f7fd f95f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80037d6:	2102      	movs	r1, #2
 80037d8:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 80037dc:	f7fd f95a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80037e0:	21f2      	movs	r1, #242	@ 0xf2
 80037e2:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 80037e6:	f7fd f955 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80037ea:	2102      	movs	r1, #2
 80037ec:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 80037f0:	f7fd f950 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80037f4:	21fe      	movs	r1, #254	@ 0xfe
 80037f6:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 80037fa:	f7fd f94b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80037fe:	2103      	movs	r1, #3
 8003800:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8003804:	f7fd f946 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003808:	2110      	movs	r1, #16
 800380a:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 800380e:	f7fd f941 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003812:	2103      	movs	r1, #3
 8003814:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8003818:	f7fd f93c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800381c:	2133      	movs	r1, #51	@ 0x33
 800381e:	f24d 1031 	movw	r0, #53553	@ 0xd131
 8003822:	f7fd f937 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003826:	2103      	movs	r1, #3
 8003828:	f24d 1032 	movw	r0, #53554	@ 0xd132
 800382c:	f7fd f932 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003830:	216d      	movs	r1, #109	@ 0x6d
 8003832:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8003836:	f7fd f92d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800383a:	2100      	movs	r1, #0
 800383c:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 8003840:	f7fd f928 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003844:	2133      	movs	r1, #51	@ 0x33
 8003846:	f24d 2001 	movw	r0, #53761	@ 0xd201
 800384a:	f7fd f923 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800384e:	2100      	movs	r1, #0
 8003850:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8003854:	f7fd f91e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003858:	2134      	movs	r1, #52	@ 0x34
 800385a:	f24d 2003 	movw	r0, #53763	@ 0xd203
 800385e:	f7fd f919 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003862:	2100      	movs	r1, #0
 8003864:	f24d 2004 	movw	r0, #53764	@ 0xd204
 8003868:	f7fd f914 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 800386c:	213a      	movs	r1, #58	@ 0x3a
 800386e:	f24d 2005 	movw	r0, #53765	@ 0xd205
 8003872:	f7fd f90f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003876:	2100      	movs	r1, #0
 8003878:	f24d 2006 	movw	r0, #53766	@ 0xd206
 800387c:	f7fd f90a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003880:	214a      	movs	r1, #74	@ 0x4a
 8003882:	f24d 2007 	movw	r0, #53767	@ 0xd207
 8003886:	f7fd f905 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 800388a:	2100      	movs	r1, #0
 800388c:	f24d 2008 	movw	r0, #53768	@ 0xd208
 8003890:	f7fd f900 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003894:	215c      	movs	r1, #92	@ 0x5c
 8003896:	f24d 2009 	movw	r0, #53769	@ 0xd209
 800389a:	f7fd f8fb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 800389e:	2100      	movs	r1, #0
 80038a0:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 80038a4:	f7fd f8f6 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80038a8:	2181      	movs	r1, #129	@ 0x81
 80038aa:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 80038ae:	f7fd f8f1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80038b2:	2100      	movs	r1, #0
 80038b4:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 80038b8:	f7fd f8ec 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80038bc:	21a6      	movs	r1, #166	@ 0xa6
 80038be:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 80038c2:	f7fd f8e7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80038c6:	2100      	movs	r1, #0
 80038c8:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 80038cc:	f7fd f8e2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80038d0:	21e5      	movs	r1, #229	@ 0xe5
 80038d2:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 80038d6:	f7fd f8dd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80038da:	2101      	movs	r1, #1
 80038dc:	f24d 2010 	movw	r0, #53776	@ 0xd210
 80038e0:	f7fd f8d8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80038e4:	2113      	movs	r1, #19
 80038e6:	f24d 2011 	movw	r0, #53777	@ 0xd211
 80038ea:	f7fd f8d3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80038ee:	2101      	movs	r1, #1
 80038f0:	f24d 2012 	movw	r0, #53778	@ 0xd212
 80038f4:	f7fd f8ce 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80038f8:	2154      	movs	r1, #84	@ 0x54
 80038fa:	f24d 2013 	movw	r0, #53779	@ 0xd213
 80038fe:	f7fd f8c9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003902:	2101      	movs	r1, #1
 8003904:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8003908:	f7fd f8c4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800390c:	2182      	movs	r1, #130	@ 0x82
 800390e:	f24d 2015 	movw	r0, #53781	@ 0xd215
 8003912:	f7fd f8bf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003916:	2101      	movs	r1, #1
 8003918:	f24d 2016 	movw	r0, #53782	@ 0xd216
 800391c:	f7fd f8ba 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003920:	21ca      	movs	r1, #202	@ 0xca
 8003922:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8003926:	f7fd f8b5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800392a:	2102      	movs	r1, #2
 800392c:	f24d 2018 	movw	r0, #53784	@ 0xd218
 8003930:	f7fd f8b0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003934:	2100      	movs	r1, #0
 8003936:	f24d 2019 	movw	r0, #53785	@ 0xd219
 800393a:	f7fd f8ab 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800393e:	2102      	movs	r1, #2
 8003940:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8003944:	f7fd f8a6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003948:	2101      	movs	r1, #1
 800394a:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 800394e:	f7fd f8a1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003952:	2102      	movs	r1, #2
 8003954:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8003958:	f7fd f89c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 800395c:	2134      	movs	r1, #52	@ 0x34
 800395e:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 8003962:	f7fd f897 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003966:	2102      	movs	r1, #2
 8003968:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 800396c:	f7fd f892 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003970:	2167      	movs	r1, #103	@ 0x67
 8003972:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 8003976:	f7fd f88d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 800397a:	2102      	movs	r1, #2
 800397c:	f24d 2020 	movw	r0, #53792	@ 0xd220
 8003980:	f7fd f888 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003984:	2184      	movs	r1, #132	@ 0x84
 8003986:	f24d 2021 	movw	r0, #53793	@ 0xd221
 800398a:	f7fd f883 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 800398e:	2102      	movs	r1, #2
 8003990:	f24d 2022 	movw	r0, #53794	@ 0xd222
 8003994:	f7fd f87e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003998:	21a4      	movs	r1, #164	@ 0xa4
 800399a:	f24d 2023 	movw	r0, #53795	@ 0xd223
 800399e:	f7fd f879 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80039a2:	2102      	movs	r1, #2
 80039a4:	f24d 2024 	movw	r0, #53796	@ 0xd224
 80039a8:	f7fd f874 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80039ac:	21b7      	movs	r1, #183	@ 0xb7
 80039ae:	f24d 2025 	movw	r0, #53797	@ 0xd225
 80039b2:	f7fd f86f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80039b6:	2102      	movs	r1, #2
 80039b8:	f24d 2026 	movw	r0, #53798	@ 0xd226
 80039bc:	f7fd f86a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80039c0:	21cf      	movs	r1, #207	@ 0xcf
 80039c2:	f24d 2027 	movw	r0, #53799	@ 0xd227
 80039c6:	f7fd f865 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80039ca:	2102      	movs	r1, #2
 80039cc:	f24d 2028 	movw	r0, #53800	@ 0xd228
 80039d0:	f7fd f860 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80039d4:	21de      	movs	r1, #222	@ 0xde
 80039d6:	f24d 2029 	movw	r0, #53801	@ 0xd229
 80039da:	f7fd f85b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80039de:	2102      	movs	r1, #2
 80039e0:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 80039e4:	f7fd f856 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80039e8:	21f2      	movs	r1, #242	@ 0xf2
 80039ea:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 80039ee:	f7fd f851 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80039f2:	2102      	movs	r1, #2
 80039f4:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 80039f8:	f7fd f84c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80039fc:	21fe      	movs	r1, #254	@ 0xfe
 80039fe:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 8003a02:	f7fd f847 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003a06:	2103      	movs	r1, #3
 8003a08:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8003a0c:	f7fd f842 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003a10:	2110      	movs	r1, #16
 8003a12:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8003a16:	f7fd f83d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	f24d 2030 	movw	r0, #53808	@ 0xd230
 8003a20:	f7fd f838 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003a24:	2133      	movs	r1, #51	@ 0x33
 8003a26:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8003a2a:	f7fd f833 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003a2e:	2103      	movs	r1, #3
 8003a30:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8003a34:	f7fd f82e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003a38:	216d      	movs	r1, #109	@ 0x6d
 8003a3a:	f24d 2033 	movw	r0, #53811	@ 0xd233
 8003a3e:	f7fd f829 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003a42:	2100      	movs	r1, #0
 8003a44:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8003a48:	f7fd f824 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003a4c:	2133      	movs	r1, #51	@ 0x33
 8003a4e:	f24d 3001 	movw	r0, #54017	@ 0xd301
 8003a52:	f7fd f81f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003a56:	2100      	movs	r1, #0
 8003a58:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8003a5c:	f7fd f81a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003a60:	2134      	movs	r1, #52	@ 0x34
 8003a62:	f24d 3003 	movw	r0, #54019	@ 0xd303
 8003a66:	f7fd f815 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	f24d 3004 	movw	r0, #54020	@ 0xd304
 8003a70:	f7fd f810 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003a74:	213a      	movs	r1, #58	@ 0x3a
 8003a76:	f24d 3005 	movw	r0, #54021	@ 0xd305
 8003a7a:	f7fd f80b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003a7e:	2100      	movs	r1, #0
 8003a80:	f24d 3006 	movw	r0, #54022	@ 0xd306
 8003a84:	f7fd f806 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003a88:	214a      	movs	r1, #74	@ 0x4a
 8003a8a:	f24d 3007 	movw	r0, #54023	@ 0xd307
 8003a8e:	f7fd f801 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003a92:	2100      	movs	r1, #0
 8003a94:	f24d 3008 	movw	r0, #54024	@ 0xd308
 8003a98:	f7fc fffc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003a9c:	215c      	movs	r1, #92	@ 0x5c
 8003a9e:	f24d 3009 	movw	r0, #54025	@ 0xd309
 8003aa2:	f7fc fff7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 8003aac:	f7fc fff2 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003ab0:	2181      	movs	r1, #129	@ 0x81
 8003ab2:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 8003ab6:	f7fc ffed 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003aba:	2100      	movs	r1, #0
 8003abc:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 8003ac0:	f7fc ffe8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003ac4:	21a6      	movs	r1, #166	@ 0xa6
 8003ac6:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8003aca:	f7fc ffe3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003ace:	2100      	movs	r1, #0
 8003ad0:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8003ad4:	f7fc ffde 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003ad8:	21e5      	movs	r1, #229	@ 0xe5
 8003ada:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 8003ade:	f7fc ffd9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8003ae8:	f7fc ffd4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003aec:	2113      	movs	r1, #19
 8003aee:	f24d 3011 	movw	r0, #54033	@ 0xd311
 8003af2:	f7fc ffcf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003af6:	2101      	movs	r1, #1
 8003af8:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8003afc:	f7fc ffca 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003b00:	2154      	movs	r1, #84	@ 0x54
 8003b02:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8003b06:	f7fc ffc5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	f24d 3014 	movw	r0, #54036	@ 0xd314
 8003b10:	f7fc ffc0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003b14:	2182      	movs	r1, #130	@ 0x82
 8003b16:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8003b1a:	f7fc ffbb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003b1e:	2101      	movs	r1, #1
 8003b20:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8003b24:	f7fc ffb6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003b28:	21ca      	movs	r1, #202	@ 0xca
 8003b2a:	f24d 3017 	movw	r0, #54039	@ 0xd317
 8003b2e:	f7fc ffb1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003b32:	2102      	movs	r1, #2
 8003b34:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8003b38:	f7fc ffac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	f24d 3019 	movw	r0, #54041	@ 0xd319
 8003b42:	f7fc ffa7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003b46:	2102      	movs	r1, #2
 8003b48:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8003b4c:	f7fc ffa2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003b50:	2101      	movs	r1, #1
 8003b52:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8003b56:	f7fc ff9d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 8003b60:	f7fc ff98 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003b64:	2134      	movs	r1, #52	@ 0x34
 8003b66:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 8003b6a:	f7fc ff93 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003b6e:	2102      	movs	r1, #2
 8003b70:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 8003b74:	f7fc ff8e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003b78:	2167      	movs	r1, #103	@ 0x67
 8003b7a:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 8003b7e:	f7fc ff89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003b82:	2102      	movs	r1, #2
 8003b84:	f24d 3020 	movw	r0, #54048	@ 0xd320
 8003b88:	f7fc ff84 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003b8c:	2184      	movs	r1, #132	@ 0x84
 8003b8e:	f24d 3021 	movw	r0, #54049	@ 0xd321
 8003b92:	f7fc ff7f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003b96:	2102      	movs	r1, #2
 8003b98:	f24d 3022 	movw	r0, #54050	@ 0xd322
 8003b9c:	f7fc ff7a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003ba0:	21a4      	movs	r1, #164	@ 0xa4
 8003ba2:	f24d 3023 	movw	r0, #54051	@ 0xd323
 8003ba6:	f7fc ff75 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003baa:	2102      	movs	r1, #2
 8003bac:	f24d 3024 	movw	r0, #54052	@ 0xd324
 8003bb0:	f7fc ff70 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003bb4:	21b7      	movs	r1, #183	@ 0xb7
 8003bb6:	f24d 3025 	movw	r0, #54053	@ 0xd325
 8003bba:	f7fc ff6b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003bbe:	2102      	movs	r1, #2
 8003bc0:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8003bc4:	f7fc ff66 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003bc8:	21cf      	movs	r1, #207	@ 0xcf
 8003bca:	f24d 3027 	movw	r0, #54055	@ 0xd327
 8003bce:	f7fc ff61 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003bd2:	2102      	movs	r1, #2
 8003bd4:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8003bd8:	f7fc ff5c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003bdc:	21de      	movs	r1, #222	@ 0xde
 8003bde:	f24d 3029 	movw	r0, #54057	@ 0xd329
 8003be2:	f7fc ff57 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003be6:	2102      	movs	r1, #2
 8003be8:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8003bec:	f7fc ff52 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003bf0:	21f2      	movs	r1, #242	@ 0xf2
 8003bf2:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8003bf6:	f7fc ff4d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 8003c00:	f7fc ff48 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003c04:	21fe      	movs	r1, #254	@ 0xfe
 8003c06:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8003c0a:	f7fc ff43 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003c0e:	2103      	movs	r1, #3
 8003c10:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8003c14:	f7fc ff3e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003c18:	2110      	movs	r1, #16
 8003c1a:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 8003c1e:	f7fc ff39 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003c22:	2103      	movs	r1, #3
 8003c24:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8003c28:	f7fc ff34 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003c2c:	2133      	movs	r1, #51	@ 0x33
 8003c2e:	f24d 3031 	movw	r0, #54065	@ 0xd331
 8003c32:	f7fc ff2f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003c36:	2103      	movs	r1, #3
 8003c38:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8003c3c:	f7fc ff2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003c40:	216d      	movs	r1, #109	@ 0x6d
 8003c42:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8003c46:	f7fc ff25 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 8003c50:	f7fc ff20 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003c54:	2133      	movs	r1, #51	@ 0x33
 8003c56:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8003c5a:	f7fc ff1b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f24d 4002 	movw	r0, #54274	@ 0xd402
 8003c64:	f7fc ff16 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003c68:	2134      	movs	r1, #52	@ 0x34
 8003c6a:	f24d 4003 	movw	r0, #54275	@ 0xd403
 8003c6e:	f7fc ff11 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003c72:	2100      	movs	r1, #0
 8003c74:	f24d 4004 	movw	r0, #54276	@ 0xd404
 8003c78:	f7fc ff0c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003c7c:	213a      	movs	r1, #58	@ 0x3a
 8003c7e:	f24d 4005 	movw	r0, #54277	@ 0xd405
 8003c82:	f7fc ff07 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003c86:	2100      	movs	r1, #0
 8003c88:	f24d 4006 	movw	r0, #54278	@ 0xd406
 8003c8c:	f7fc ff02 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003c90:	214a      	movs	r1, #74	@ 0x4a
 8003c92:	f24d 4007 	movw	r0, #54279	@ 0xd407
 8003c96:	f7fc fefd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	f24d 4008 	movw	r0, #54280	@ 0xd408
 8003ca0:	f7fc fef8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003ca4:	215c      	movs	r1, #92	@ 0x5c
 8003ca6:	f24d 4009 	movw	r0, #54281	@ 0xd409
 8003caa:	f7fc fef3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003cae:	2100      	movs	r1, #0
 8003cb0:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 8003cb4:	f7fc feee 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003cb8:	2181      	movs	r1, #129	@ 0x81
 8003cba:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 8003cbe:	f7fc fee9 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8003cc8:	f7fc fee4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003ccc:	21a6      	movs	r1, #166	@ 0xa6
 8003cce:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 8003cd2:	f7fc fedf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8003cdc:	f7fc feda 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003ce0:	21e5      	movs	r1, #229	@ 0xe5
 8003ce2:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8003ce6:	f7fc fed5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003cea:	2101      	movs	r1, #1
 8003cec:	f24d 4010 	movw	r0, #54288	@ 0xd410
 8003cf0:	f7fc fed0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003cf4:	2113      	movs	r1, #19
 8003cf6:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8003cfa:	f7fc fecb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003cfe:	2101      	movs	r1, #1
 8003d00:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8003d04:	f7fc fec6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003d08:	2154      	movs	r1, #84	@ 0x54
 8003d0a:	f24d 4013 	movw	r0, #54291	@ 0xd413
 8003d0e:	f7fc fec1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003d12:	2101      	movs	r1, #1
 8003d14:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8003d18:	f7fc febc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003d1c:	2182      	movs	r1, #130	@ 0x82
 8003d1e:	f24d 4015 	movw	r0, #54293	@ 0xd415
 8003d22:	f7fc feb7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003d26:	2101      	movs	r1, #1
 8003d28:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8003d2c:	f7fc feb2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003d30:	21ca      	movs	r1, #202	@ 0xca
 8003d32:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8003d36:	f7fc fead 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	f24d 4018 	movw	r0, #54296	@ 0xd418
 8003d40:	f7fc fea8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003d44:	2100      	movs	r1, #0
 8003d46:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8003d4a:	f7fc fea3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003d4e:	2102      	movs	r1, #2
 8003d50:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8003d54:	f7fc fe9e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003d58:	2101      	movs	r1, #1
 8003d5a:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 8003d5e:	f7fc fe99 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003d62:	2102      	movs	r1, #2
 8003d64:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 8003d68:	f7fc fe94 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003d6c:	2134      	movs	r1, #52	@ 0x34
 8003d6e:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 8003d72:	f7fc fe8f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003d76:	2102      	movs	r1, #2
 8003d78:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 8003d7c:	f7fc fe8a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8003d80:	2167      	movs	r1, #103	@ 0x67
 8003d82:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 8003d86:	f7fc fe85 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	f24d 4020 	movw	r0, #54304	@ 0xd420
 8003d90:	f7fc fe80 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8003d94:	2184      	movs	r1, #132	@ 0x84
 8003d96:	f24d 4021 	movw	r0, #54305	@ 0xd421
 8003d9a:	f7fc fe7b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8003d9e:	2102      	movs	r1, #2
 8003da0:	f24d 4022 	movw	r0, #54306	@ 0xd422
 8003da4:	f7fc fe76 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8003da8:	21a4      	movs	r1, #164	@ 0xa4
 8003daa:	f24d 4023 	movw	r0, #54307	@ 0xd423
 8003dae:	f7fc fe71 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003db2:	2102      	movs	r1, #2
 8003db4:	f24d 4024 	movw	r0, #54308	@ 0xd424
 8003db8:	f7fc fe6c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003dbc:	21b7      	movs	r1, #183	@ 0xb7
 8003dbe:	f24d 4025 	movw	r0, #54309	@ 0xd425
 8003dc2:	f7fc fe67 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8003dcc:	f7fc fe62 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003dd0:	21cf      	movs	r1, #207	@ 0xcf
 8003dd2:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8003dd6:	f7fc fe5d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003dda:	2102      	movs	r1, #2
 8003ddc:	f24d 4028 	movw	r0, #54312	@ 0xd428
 8003de0:	f7fc fe58 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003de4:	21de      	movs	r1, #222	@ 0xde
 8003de6:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8003dea:	f7fc fe53 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003dee:	2102      	movs	r1, #2
 8003df0:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8003df4:	f7fc fe4e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003df8:	21f2      	movs	r1, #242	@ 0xf2
 8003dfa:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 8003dfe:	f7fc fe49 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003e02:	2102      	movs	r1, #2
 8003e04:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8003e08:	f7fc fe44 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003e0c:	21fe      	movs	r1, #254	@ 0xfe
 8003e0e:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 8003e12:	f7fc fe3f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003e16:	2103      	movs	r1, #3
 8003e18:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8003e1c:	f7fc fe3a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003e20:	2110      	movs	r1, #16
 8003e22:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8003e26:	f7fc fe35 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	f24d 4030 	movw	r0, #54320	@ 0xd430
 8003e30:	f7fc fe30 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003e34:	2133      	movs	r1, #51	@ 0x33
 8003e36:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8003e3a:	f7fc fe2b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003e3e:	2103      	movs	r1, #3
 8003e40:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8003e44:	f7fc fe26 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003e48:	216d      	movs	r1, #109	@ 0x6d
 8003e4a:	f24d 4033 	movw	r0, #54323	@ 0xd433
 8003e4e:	f7fc fe21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003e52:	2100      	movs	r1, #0
 8003e54:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8003e58:	f7fc fe1c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003e5c:	2133      	movs	r1, #51	@ 0x33
 8003e5e:	f24d 5001 	movw	r0, #54529	@ 0xd501
 8003e62:	f7fc fe17 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003e66:	2100      	movs	r1, #0
 8003e68:	f24d 5002 	movw	r0, #54530	@ 0xd502
 8003e6c:	f7fc fe12 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003e70:	2134      	movs	r1, #52	@ 0x34
 8003e72:	f24d 5003 	movw	r0, #54531	@ 0xd503
 8003e76:	f7fc fe0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f24d 5004 	movw	r0, #54532	@ 0xd504
 8003e80:	f7fc fe08 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003e84:	213a      	movs	r1, #58	@ 0x3a
 8003e86:	f24d 5005 	movw	r0, #54533	@ 0xd505
 8003e8a:	f7fc fe03 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f24d 5006 	movw	r0, #54534	@ 0xd506
 8003e94:	f7fc fdfe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003e98:	214a      	movs	r1, #74	@ 0x4a
 8003e9a:	f24d 5007 	movw	r0, #54535	@ 0xd507
 8003e9e:	f7fc fdf9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f24d 5008 	movw	r0, #54536	@ 0xd508
 8003ea8:	f7fc fdf4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003eac:	215c      	movs	r1, #92	@ 0x5c
 8003eae:	f24d 5009 	movw	r0, #54537	@ 0xd509
 8003eb2:	f7fc fdef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 8003ebc:	f7fc fdea 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003ec0:	2181      	movs	r1, #129	@ 0x81
 8003ec2:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8003ec6:	f7fc fde5 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 8003ed0:	f7fc fde0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003ed4:	21a6      	movs	r1, #166	@ 0xa6
 8003ed6:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8003eda:	f7fc fddb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003ede:	2100      	movs	r1, #0
 8003ee0:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8003ee4:	f7fc fdd6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003ee8:	21e5      	movs	r1, #229	@ 0xe5
 8003eea:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 8003eee:	f7fc fdd1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8003ef8:	f7fc fdcc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003efc:	2113      	movs	r1, #19
 8003efe:	f24d 5011 	movw	r0, #54545	@ 0xd511
 8003f02:	f7fc fdc7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003f06:	2101      	movs	r1, #1
 8003f08:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8003f0c:	f7fc fdc2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003f10:	2154      	movs	r1, #84	@ 0x54
 8003f12:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8003f16:	f7fc fdbd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	f24d 5014 	movw	r0, #54548	@ 0xd514
 8003f20:	f7fc fdb8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003f24:	2182      	movs	r1, #130	@ 0x82
 8003f26:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8003f2a:	f7fc fdb3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003f2e:	2101      	movs	r1, #1
 8003f30:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8003f34:	f7fc fdae 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003f38:	21ca      	movs	r1, #202	@ 0xca
 8003f3a:	f24d 5017 	movw	r0, #54551	@ 0xd517
 8003f3e:	f7fc fda9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003f42:	2102      	movs	r1, #2
 8003f44:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8003f48:	f7fc fda4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f24d 5019 	movw	r0, #54553	@ 0xd519
 8003f52:	f7fc fd9f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003f56:	2102      	movs	r1, #2
 8003f58:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8003f5c:	f7fc fd9a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003f60:	2101      	movs	r1, #1
 8003f62:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 8003f66:	f7fc fd95 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 8003f70:	f7fc fd90 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003f74:	2134      	movs	r1, #52	@ 0x34
 8003f76:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 8003f7a:	f7fc fd8b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003f7e:	2102      	movs	r1, #2
 8003f80:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 8003f84:	f7fc fd86 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003f88:	2167      	movs	r1, #103	@ 0x67
 8003f8a:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 8003f8e:	f7fc fd81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003f92:	2102      	movs	r1, #2
 8003f94:	f24d 5020 	movw	r0, #54560	@ 0xd520
 8003f98:	f7fc fd7c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003f9c:	2184      	movs	r1, #132	@ 0x84
 8003f9e:	f24d 5021 	movw	r0, #54561	@ 0xd521
 8003fa2:	f7fc fd77 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	f24d 5022 	movw	r0, #54562	@ 0xd522
 8003fac:	f7fc fd72 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003fb0:	21a4      	movs	r1, #164	@ 0xa4
 8003fb2:	f24d 5023 	movw	r0, #54563	@ 0xd523
 8003fb6:	f7fc fd6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003fba:	2102      	movs	r1, #2
 8003fbc:	f24d 5024 	movw	r0, #54564	@ 0xd524
 8003fc0:	f7fc fd68 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003fc4:	21b7      	movs	r1, #183	@ 0xb7
 8003fc6:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8003fca:	f7fc fd63 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003fce:	2102      	movs	r1, #2
 8003fd0:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8003fd4:	f7fc fd5e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003fd8:	21cf      	movs	r1, #207	@ 0xcf
 8003fda:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8003fde:	f7fc fd59 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8003fe8:	f7fc fd54 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003fec:	21de      	movs	r1, #222	@ 0xde
 8003fee:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8003ff2:	f7fc fd4f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8003ffc:	f7fc fd4a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004000:	21f2      	movs	r1, #242	@ 0xf2
 8004002:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8004006:	f7fc fd45 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 800400a:	2102      	movs	r1, #2
 800400c:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8004010:	f7fc fd40 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8004014:	21fe      	movs	r1, #254	@ 0xfe
 8004016:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 800401a:	f7fc fd3b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 800401e:	2103      	movs	r1, #3
 8004020:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8004024:	f7fc fd36 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8004028:	2110      	movs	r1, #16
 800402a:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 800402e:	f7fc fd31 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8004032:	2103      	movs	r1, #3
 8004034:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8004038:	f7fc fd2c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800403c:	2133      	movs	r1, #51	@ 0x33
 800403e:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8004042:	f7fc fd27 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8004046:	2103      	movs	r1, #3
 8004048:	f24d 5032 	movw	r0, #54578	@ 0xd532
 800404c:	f7fc fd22 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8004050:	216d      	movs	r1, #109	@ 0x6d
 8004052:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8004056:	f7fc fd1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800405a:	2100      	movs	r1, #0
 800405c:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8004060:	f7fc fd18 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8004064:	2133      	movs	r1, #51	@ 0x33
 8004066:	f24d 6001 	movw	r0, #54785	@ 0xd601
 800406a:	f7fc fd13 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800406e:	2100      	movs	r1, #0
 8004070:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8004074:	f7fc fd0e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004078:	2134      	movs	r1, #52	@ 0x34
 800407a:	f24d 6003 	movw	r0, #54787	@ 0xd603
 800407e:	f7fc fd09 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8004082:	2100      	movs	r1, #0
 8004084:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8004088:	f7fc fd04 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800408c:	213a      	movs	r1, #58	@ 0x3a
 800408e:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8004092:	f7fc fcff 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8004096:	2100      	movs	r1, #0
 8004098:	f24d 6006 	movw	r0, #54790	@ 0xd606
 800409c:	f7fc fcfa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80040a0:	214a      	movs	r1, #74	@ 0x4a
 80040a2:	f24d 6007 	movw	r0, #54791	@ 0xd607
 80040a6:	f7fc fcf5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80040aa:	2100      	movs	r1, #0
 80040ac:	f24d 6008 	movw	r0, #54792	@ 0xd608
 80040b0:	f7fc fcf0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80040b4:	215c      	movs	r1, #92	@ 0x5c
 80040b6:	f24d 6009 	movw	r0, #54793	@ 0xd609
 80040ba:	f7fc fceb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80040be:	2100      	movs	r1, #0
 80040c0:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 80040c4:	f7fc fce6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80040c8:	2181      	movs	r1, #129	@ 0x81
 80040ca:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 80040ce:	f7fc fce1 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80040d2:	2100      	movs	r1, #0
 80040d4:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 80040d8:	f7fc fcdc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80040dc:	21a6      	movs	r1, #166	@ 0xa6
 80040de:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 80040e2:	f7fc fcd7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80040e6:	2100      	movs	r1, #0
 80040e8:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 80040ec:	f7fc fcd2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80040f0:	21e5      	movs	r1, #229	@ 0xe5
 80040f2:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 80040f6:	f7fc fccd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80040fa:	2101      	movs	r1, #1
 80040fc:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8004100:	f7fc fcc8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8004104:	2113      	movs	r1, #19
 8004106:	f24d 6011 	movw	r0, #54801	@ 0xd611
 800410a:	f7fc fcc3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 800410e:	2101      	movs	r1, #1
 8004110:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8004114:	f7fc fcbe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8004118:	2154      	movs	r1, #84	@ 0x54
 800411a:	f24d 6013 	movw	r0, #54803	@ 0xd613
 800411e:	f7fc fcb9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8004122:	2101      	movs	r1, #1
 8004124:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8004128:	f7fc fcb4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 800412c:	2182      	movs	r1, #130	@ 0x82
 800412e:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8004132:	f7fc fcaf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8004136:	2101      	movs	r1, #1
 8004138:	f24d 6016 	movw	r0, #54806	@ 0xd616
 800413c:	f7fc fcaa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8004140:	21ca      	movs	r1, #202	@ 0xca
 8004142:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8004146:	f7fc fca5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800414a:	2102      	movs	r1, #2
 800414c:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8004150:	f7fc fca0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8004154:	2100      	movs	r1, #0
 8004156:	f24d 6019 	movw	r0, #54809	@ 0xd619
 800415a:	f7fc fc9b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800415e:	2102      	movs	r1, #2
 8004160:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8004164:	f7fc fc96 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8004168:	2101      	movs	r1, #1
 800416a:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 800416e:	f7fc fc91 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8004172:	2102      	movs	r1, #2
 8004174:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8004178:	f7fc fc8c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800417c:	2134      	movs	r1, #52	@ 0x34
 800417e:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8004182:	f7fc fc87 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8004186:	2102      	movs	r1, #2
 8004188:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 800418c:	f7fc fc82 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004190:	2167      	movs	r1, #103	@ 0x67
 8004192:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8004196:	f7fc fc7d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800419a:	2102      	movs	r1, #2
 800419c:	f24d 6020 	movw	r0, #54816	@ 0xd620
 80041a0:	f7fc fc78 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80041a4:	2184      	movs	r1, #132	@ 0x84
 80041a6:	f24d 6021 	movw	r0, #54817	@ 0xd621
 80041aa:	f7fc fc73 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80041ae:	2102      	movs	r1, #2
 80041b0:	f24d 6022 	movw	r0, #54818	@ 0xd622
 80041b4:	f7fc fc6e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80041b8:	21a4      	movs	r1, #164	@ 0xa4
 80041ba:	f24d 6023 	movw	r0, #54819	@ 0xd623
 80041be:	f7fc fc69 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80041c2:	2102      	movs	r1, #2
 80041c4:	f24d 6024 	movw	r0, #54820	@ 0xd624
 80041c8:	f7fc fc64 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80041cc:	21b7      	movs	r1, #183	@ 0xb7
 80041ce:	f24d 6025 	movw	r0, #54821	@ 0xd625
 80041d2:	f7fc fc5f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80041d6:	2102      	movs	r1, #2
 80041d8:	f24d 6026 	movw	r0, #54822	@ 0xd626
 80041dc:	f7fc fc5a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80041e0:	21cf      	movs	r1, #207	@ 0xcf
 80041e2:	f24d 6027 	movw	r0, #54823	@ 0xd627
 80041e6:	f7fc fc55 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80041ea:	2102      	movs	r1, #2
 80041ec:	f24d 6028 	movw	r0, #54824	@ 0xd628
 80041f0:	f7fc fc50 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80041f4:	21de      	movs	r1, #222	@ 0xde
 80041f6:	f24d 6029 	movw	r0, #54825	@ 0xd629
 80041fa:	f7fc fc4b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80041fe:	2102      	movs	r1, #2
 8004200:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8004204:	f7fc fc46 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004208:	21f2      	movs	r1, #242	@ 0xf2
 800420a:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 800420e:	f7fc fc41 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8004212:	2102      	movs	r1, #2
 8004214:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8004218:	f7fc fc3c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 800421c:	21fe      	movs	r1, #254	@ 0xfe
 800421e:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8004222:	f7fc fc37 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8004226:	2103      	movs	r1, #3
 8004228:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 800422c:	f7fc fc32 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8004230:	2110      	movs	r1, #16
 8004232:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8004236:	f7fc fc2d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800423a:	2103      	movs	r1, #3
 800423c:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8004240:	f7fc fc28 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8004244:	2133      	movs	r1, #51	@ 0x33
 8004246:	f24d 6031 	movw	r0, #54833	@ 0xd631
 800424a:	f7fc fc23 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800424e:	2103      	movs	r1, #3
 8004250:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8004254:	f7fc fc1e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8004258:	216d      	movs	r1, #109	@ 0x6d
 800425a:	f24d 6033 	movw	r0, #54835	@ 0xd633
 800425e:	f7fc fc19 	bl	8000a94 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8004262:	2155      	movs	r1, #85	@ 0x55
 8004264:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8004268:	f7fc fc14 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800426c:	21aa      	movs	r1, #170	@ 0xaa
 800426e:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8004272:	f7fc fc0f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004276:	2152      	movs	r1, #82	@ 0x52
 8004278:	f24f 0002 	movw	r0, #61442	@ 0xf002
 800427c:	f7fc fc0a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004280:	2108      	movs	r1, #8
 8004282:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8004286:	f7fc fc05 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800428a:	2100      	movs	r1, #0
 800428c:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8004290:	f7fc fc00 	bl	8000a94 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004294:	21cc      	movs	r1, #204	@ 0xcc
 8004296:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 800429a:	f7fc fbfb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800429e:	2100      	movs	r1, #0
 80042a0:	f24b 1001 	movw	r0, #45313	@ 0xb101
 80042a4:	f7fc fbf6 	bl	8000a94 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80042a8:	2105      	movs	r1, #5
 80042aa:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 80042ae:	f7fc fbf1 	bl	8000a94 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80042b2:	2170      	movs	r1, #112	@ 0x70
 80042b4:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 80042b8:	f7fc fbec 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80042bc:	2170      	movs	r1, #112	@ 0x70
 80042be:	f24b 7001 	movw	r0, #46849	@ 0xb701
 80042c2:	f7fc fbe7 	bl	8000a94 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80042c6:	2101      	movs	r1, #1
 80042c8:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 80042cc:	f7fc fbe2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80042d0:	2103      	movs	r1, #3
 80042d2:	f64b 0001 	movw	r0, #47105	@ 0xb801
 80042d6:	f7fc fbdd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80042da:	2103      	movs	r1, #3
 80042dc:	f64b 0002 	movw	r0, #47106	@ 0xb802
 80042e0:	f7fc fbd8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80042e4:	2103      	movs	r1, #3
 80042e6:	f64b 0003 	movw	r0, #47107	@ 0xb803
 80042ea:	f7fc fbd3 	bl	8000a94 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80042ee:	2102      	movs	r1, #2
 80042f0:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 80042f4:	f7fc fbce 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80042f8:	2100      	movs	r1, #0
 80042fa:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 80042fe:	f7fc fbc9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004302:	2100      	movs	r1, #0
 8004304:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8004308:	f7fc fbc4 	bl	8000a94 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 800430c:	21d0      	movs	r1, #208	@ 0xd0
 800430e:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8004312:	f7fc fbbf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8004316:	2102      	movs	r1, #2
 8004318:	f64c 1001 	movw	r0, #51457	@ 0xc901
 800431c:	f7fc fbba 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8004320:	2150      	movs	r1, #80	@ 0x50
 8004322:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8004326:	f7fc fbb5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 800432a:	2150      	movs	r1, #80	@ 0x50
 800432c:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8004330:	f7fc fbb0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8004334:	2150      	movs	r1, #80	@ 0x50
 8004336:	f64c 1004 	movw	r0, #51460	@ 0xc904
 800433a:	f7fc fbab 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800433e:	2100      	movs	r1, #0
 8004340:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8004344:	f7fc fba6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8004348:	2155      	movs	r1, #85	@ 0x55
 800434a:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 800434e:	f7fc fba1 	bl	8000a94 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004352:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 8004356:	f7fc fb11 	bl	800097c <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800435a:	2001      	movs	r0, #1
 800435c:	f002 fcc8 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8004360:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 8004364:	f7fc fb0a 	bl	800097c <LCD_WR_REG>
 8004368:	f001 bd18 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800436c:	4bec      	ldr	r3, [pc, #944]	@ (8004720 <LCD_Init+0x27b8>)
 800436e:	889b      	ldrh	r3, [r3, #4]
 8004370:	f249 3225 	movw	r2, #37669	@ 0x9325
 8004374:	4293      	cmp	r3, r2
 8004376:	f040 80d7 	bne.w	8004528 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800437a:	f647 01f0 	movw	r1, #30960	@ 0x78f0
 800437e:	20e5      	movs	r0, #229	@ 0xe5
 8004380:	f7fc fb88 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8004384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004388:	2001      	movs	r0, #1
 800438a:	f7fc fb83 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800438e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004392:	2002      	movs	r0, #2
 8004394:	f7fc fb7e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004398:	f241 0130 	movw	r1, #4144	@ 0x1030
 800439c:	2003      	movs	r0, #3
 800439e:	f7fc fb79 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80043a2:	2100      	movs	r1, #0
 80043a4:	2004      	movs	r0, #4
 80043a6:	f7fc fb75 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80043aa:	f240 2102 	movw	r1, #514	@ 0x202
 80043ae:	2008      	movs	r0, #8
 80043b0:	f7fc fb70 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80043b4:	2100      	movs	r1, #0
 80043b6:	2009      	movs	r0, #9
 80043b8:	f7fc fb6c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80043bc:	2100      	movs	r1, #0
 80043be:	200a      	movs	r0, #10
 80043c0:	f7fc fb68 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80043c4:	2100      	movs	r1, #0
 80043c6:	200c      	movs	r0, #12
 80043c8:	f7fc fb64 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80043cc:	2100      	movs	r1, #0
 80043ce:	200d      	movs	r0, #13
 80043d0:	f7fc fb60 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80043d4:	2100      	movs	r1, #0
 80043d6:	200f      	movs	r0, #15
 80043d8:	f7fc fb5c 	bl	8000a94 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80043dc:	2100      	movs	r1, #0
 80043de:	2010      	movs	r0, #16
 80043e0:	f7fc fb58 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80043e4:	2107      	movs	r1, #7
 80043e6:	2011      	movs	r0, #17
 80043e8:	f7fc fb54 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80043ec:	2100      	movs	r1, #0
 80043ee:	2012      	movs	r0, #18
 80043f0:	f7fc fb50 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80043f4:	2100      	movs	r1, #0
 80043f6:	2013      	movs	r0, #19
 80043f8:	f7fc fb4c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80043fc:	2100      	movs	r1, #0
 80043fe:	2007      	movs	r0, #7
 8004400:	f7fc fb48 	bl	8000a94 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004404:	f241 6190 	movw	r1, #5776	@ 0x1690
 8004408:	2010      	movs	r0, #16
 800440a:	f7fc fb43 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800440e:	f240 2127 	movw	r1, #551	@ 0x227
 8004412:	2011      	movs	r0, #17
 8004414:	f7fc fb3e 	bl	8000a94 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004418:	219d      	movs	r1, #157	@ 0x9d
 800441a:	2012      	movs	r0, #18
 800441c:	f7fc fb3a 	bl	8000a94 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004420:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 8004424:	2013      	movs	r0, #19
 8004426:	f7fc fb35 	bl	8000a94 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800442a:	2125      	movs	r1, #37	@ 0x25
 800442c:	2029      	movs	r0, #41	@ 0x29
 800442e:	f7fc fb31 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004432:	210d      	movs	r1, #13
 8004434:	202b      	movs	r0, #43	@ 0x2b
 8004436:	f7fc fb2d 	bl	8000a94 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800443a:	2107      	movs	r1, #7
 800443c:	2030      	movs	r0, #48	@ 0x30
 800443e:	f7fc fb29 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004442:	f240 3103 	movw	r1, #771	@ 0x303
 8004446:	2031      	movs	r0, #49	@ 0x31
 8004448:	f7fc fb24 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800444c:	2103      	movs	r1, #3
 800444e:	2032      	movs	r0, #50	@ 0x32
 8004450:	f7fc fb20 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8004454:	f240 2106 	movw	r1, #518	@ 0x206
 8004458:	2035      	movs	r0, #53	@ 0x35
 800445a:	f7fc fb1b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 800445e:	2108      	movs	r1, #8
 8004460:	2036      	movs	r0, #54	@ 0x36
 8004462:	f7fc fb17 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8004466:	f240 4106 	movw	r1, #1030	@ 0x406
 800446a:	2037      	movs	r0, #55	@ 0x37
 800446c:	f7fc fb12 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8004470:	f44f 7141 	mov.w	r1, #772	@ 0x304
 8004474:	2038      	movs	r0, #56	@ 0x38
 8004476:	f7fc fb0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 800447a:	2107      	movs	r1, #7
 800447c:	2039      	movs	r0, #57	@ 0x39
 800447e:	f7fc fb09 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8004482:	f240 6102 	movw	r1, #1538	@ 0x602
 8004486:	203c      	movs	r0, #60	@ 0x3c
 8004488:	f7fc fb04 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 800448c:	2108      	movs	r1, #8
 800448e:	203d      	movs	r0, #61	@ 0x3d
 8004490:	f7fc fb00 	bl	8000a94 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8004494:	2100      	movs	r1, #0
 8004496:	2050      	movs	r0, #80	@ 0x50
 8004498:	f7fc fafc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800449c:	21ef      	movs	r1, #239	@ 0xef
 800449e:	2051      	movs	r0, #81	@ 0x51
 80044a0:	f7fc faf8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80044a4:	2100      	movs	r1, #0
 80044a6:	2052      	movs	r0, #82	@ 0x52
 80044a8:	f7fc faf4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80044ac:	f240 113f 	movw	r1, #319	@ 0x13f
 80044b0:	2053      	movs	r0, #83	@ 0x53
 80044b2:	f7fc faef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80044b6:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 80044ba:	2060      	movs	r0, #96	@ 0x60
 80044bc:	f7fc faea 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80044c0:	2101      	movs	r1, #1
 80044c2:	2061      	movs	r0, #97	@ 0x61
 80044c4:	f7fc fae6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80044c8:	2100      	movs	r1, #0
 80044ca:	206a      	movs	r0, #106	@ 0x6a
 80044cc:	f7fc fae2 	bl	8000a94 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80044d0:	2100      	movs	r1, #0
 80044d2:	2080      	movs	r0, #128	@ 0x80
 80044d4:	f7fc fade 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80044d8:	2100      	movs	r1, #0
 80044da:	2081      	movs	r0, #129	@ 0x81
 80044dc:	f7fc fada 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80044e0:	2100      	movs	r1, #0
 80044e2:	2082      	movs	r0, #130	@ 0x82
 80044e4:	f7fc fad6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80044e8:	2100      	movs	r1, #0
 80044ea:	2083      	movs	r0, #131	@ 0x83
 80044ec:	f7fc fad2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80044f0:	2100      	movs	r1, #0
 80044f2:	2084      	movs	r0, #132	@ 0x84
 80044f4:	f7fc face 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80044f8:	2100      	movs	r1, #0
 80044fa:	2085      	movs	r0, #133	@ 0x85
 80044fc:	f7fc faca 	bl	8000a94 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004500:	2110      	movs	r1, #16
 8004502:	2090      	movs	r0, #144	@ 0x90
 8004504:	f7fc fac6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004508:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800450c:	2092      	movs	r0, #146	@ 0x92
 800450e:	f7fc fac1 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004512:	f240 1133 	movw	r1, #307	@ 0x133
 8004516:	2007      	movs	r0, #7
 8004518:	f7fc fabc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800451c:	2122      	movs	r1, #34	@ 0x22
 800451e:	2000      	movs	r0, #0
 8004520:	f7fc fab8 	bl	8000a94 <LCD_WriteReg>
 8004524:	f001 bc3a 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004528:	4b7d      	ldr	r3, [pc, #500]	@ (8004720 <LCD_Init+0x27b8>)
 800452a:	889b      	ldrh	r3, [r3, #4]
 800452c:	f249 3228 	movw	r2, #37672	@ 0x9328
 8004530:	4293      	cmp	r3, r2
 8004532:	f040 80f7 	bne.w	8004724 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004536:	f241 018f 	movw	r1, #4239	@ 0x108f
 800453a:	20ec      	movs	r0, #236	@ 0xec
 800453c:	f7fc faaa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004540:	f241 2134 	movw	r1, #4660	@ 0x1234
 8004544:	20ef      	movs	r0, #239	@ 0xef
 8004546:	f7fc faa5 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800454a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800454e:	2001      	movs	r0, #1
 8004550:	f7fc faa0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8004554:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004558:	2002      	movs	r0, #2
 800455a:	f7fc fa9b 	bl	8000a94 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 800455e:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004562:	2003      	movs	r0, #3
 8004564:	f7fc fa96 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004568:	2100      	movs	r1, #0
 800456a:	2004      	movs	r0, #4
 800456c:	f7fc fa92 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004570:	f240 2102 	movw	r1, #514	@ 0x202
 8004574:	2008      	movs	r0, #8
 8004576:	f7fc fa8d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800457a:	2100      	movs	r1, #0
 800457c:	2009      	movs	r0, #9
 800457e:	f7fc fa89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8004582:	2100      	movs	r1, #0
 8004584:	200a      	movs	r0, #10
 8004586:	f7fc fa85 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 800458a:	2101      	movs	r1, #1
 800458c:	200c      	movs	r0, #12
 800458e:	f7fc fa81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8004592:	2100      	movs	r1, #0
 8004594:	200d      	movs	r0, #13
 8004596:	f7fc fa7d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 800459a:	2100      	movs	r1, #0
 800459c:	200f      	movs	r0, #15
 800459e:	f7fc fa79 	bl	8000a94 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80045a2:	2100      	movs	r1, #0
 80045a4:	2010      	movs	r0, #16
 80045a6:	f7fc fa75 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80045aa:	2107      	movs	r1, #7
 80045ac:	2011      	movs	r0, #17
 80045ae:	f7fc fa71 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80045b2:	2100      	movs	r1, #0
 80045b4:	2012      	movs	r0, #18
 80045b6:	f7fc fa6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80045ba:	2100      	movs	r1, #0
 80045bc:	2013      	movs	r0, #19
 80045be:	f7fc fa69 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80045c2:	2101      	movs	r1, #1
 80045c4:	2007      	movs	r0, #7
 80045c6:	f7fc fa65 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80045ca:	2032      	movs	r0, #50	@ 0x32
 80045cc:	f002 fb90 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80045d0:	f241 4190 	movw	r1, #5264	@ 0x1490
 80045d4:	2010      	movs	r0, #16
 80045d6:	f7fc fa5d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80045da:	f240 2127 	movw	r1, #551	@ 0x227
 80045de:	2011      	movs	r0, #17
 80045e0:	f7fc fa58 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80045e4:	2032      	movs	r0, #50	@ 0x32
 80045e6:	f002 fb83 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80045ea:	218a      	movs	r1, #138	@ 0x8a
 80045ec:	2012      	movs	r0, #18
 80045ee:	f7fc fa51 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80045f2:	2032      	movs	r0, #50	@ 0x32
 80045f4:	f002 fb7c 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80045f8:	f44f 51d0 	mov.w	r1, #6656	@ 0x1a00
 80045fc:	2013      	movs	r0, #19
 80045fe:	f7fc fa49 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004602:	2106      	movs	r1, #6
 8004604:	2029      	movs	r0, #41	@ 0x29
 8004606:	f7fc fa45 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800460a:	210d      	movs	r1, #13
 800460c:	202b      	movs	r0, #43	@ 0x2b
 800460e:	f7fc fa41 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004612:	2032      	movs	r0, #50	@ 0x32
 8004614:	f002 fb6c 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004618:	2100      	movs	r1, #0
 800461a:	2020      	movs	r0, #32
 800461c:	f7fc fa3a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004620:	2100      	movs	r1, #0
 8004622:	2021      	movs	r0, #33	@ 0x21
 8004624:	f7fc fa36 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004628:	2032      	movs	r0, #50	@ 0x32
 800462a:	f002 fb61 	bl	8006cf0 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800462e:	2100      	movs	r1, #0
 8004630:	2030      	movs	r0, #48	@ 0x30
 8004632:	f7fc fa2f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004636:	f240 6104 	movw	r1, #1540	@ 0x604
 800463a:	2031      	movs	r0, #49	@ 0x31
 800463c:	f7fc fa2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004640:	f240 3105 	movw	r1, #773	@ 0x305
 8004644:	2032      	movs	r0, #50	@ 0x32
 8004646:	f7fc fa25 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800464a:	2100      	movs	r1, #0
 800464c:	2035      	movs	r0, #53	@ 0x35
 800464e:	f7fc fa21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8004652:	f640 4109 	movw	r1, #3081	@ 0xc09
 8004656:	2036      	movs	r0, #54	@ 0x36
 8004658:	f7fc fa1c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 800465c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8004660:	2037      	movs	r0, #55	@ 0x37
 8004662:	f7fc fa17 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8004666:	f240 3101 	movw	r1, #769	@ 0x301
 800466a:	2038      	movs	r0, #56	@ 0x38
 800466c:	f7fc fa12 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004670:	f240 7107 	movw	r1, #1799	@ 0x707
 8004674:	2039      	movs	r0, #57	@ 0x39
 8004676:	f7fc fa0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 800467a:	2100      	movs	r1, #0
 800467c:	203c      	movs	r0, #60	@ 0x3c
 800467e:	f7fc fa09 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8004682:	f640 210a 	movw	r1, #2570	@ 0xa0a
 8004686:	203d      	movs	r0, #61	@ 0x3d
 8004688:	f7fc fa04 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 800468c:	2032      	movs	r0, #50	@ 0x32
 800468e:	f002 fb2f 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8004692:	2100      	movs	r1, #0
 8004694:	2050      	movs	r0, #80	@ 0x50
 8004696:	f7fc f9fd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 800469a:	21ef      	movs	r1, #239	@ 0xef
 800469c:	2051      	movs	r0, #81	@ 0x51
 800469e:	f7fc f9f9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80046a2:	2100      	movs	r1, #0
 80046a4:	2052      	movs	r0, #82	@ 0x52
 80046a6:	f7fc f9f5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80046aa:	f240 113f 	movw	r1, #319	@ 0x13f
 80046ae:	2053      	movs	r0, #83	@ 0x53
 80046b0:	f7fc f9f0 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80046b4:	f44f 4127 	mov.w	r1, #42752	@ 0xa700
 80046b8:	2060      	movs	r0, #96	@ 0x60
 80046ba:	f7fc f9eb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80046be:	2101      	movs	r1, #1
 80046c0:	2061      	movs	r0, #97	@ 0x61
 80046c2:	f7fc f9e7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80046c6:	2100      	movs	r1, #0
 80046c8:	206a      	movs	r0, #106	@ 0x6a
 80046ca:	f7fc f9e3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80046ce:	2100      	movs	r1, #0
 80046d0:	2080      	movs	r0, #128	@ 0x80
 80046d2:	f7fc f9df 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80046d6:	2100      	movs	r1, #0
 80046d8:	2081      	movs	r0, #129	@ 0x81
 80046da:	f7fc f9db 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80046de:	2100      	movs	r1, #0
 80046e0:	2082      	movs	r0, #130	@ 0x82
 80046e2:	f7fc f9d7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80046e6:	2100      	movs	r1, #0
 80046e8:	2083      	movs	r0, #131	@ 0x83
 80046ea:	f7fc f9d3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80046ee:	2100      	movs	r1, #0
 80046f0:	2084      	movs	r0, #132	@ 0x84
 80046f2:	f7fc f9cf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80046f6:	2100      	movs	r1, #0
 80046f8:	2085      	movs	r0, #133	@ 0x85
 80046fa:	f7fc f9cb 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80046fe:	2110      	movs	r1, #16
 8004700:	2090      	movs	r0, #144	@ 0x90
 8004702:	f7fc f9c7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004706:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800470a:	2092      	movs	r0, #146	@ 0x92
 800470c:	f7fc f9c2 	bl	8000a94 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004710:	f240 1133 	movw	r1, #307	@ 0x133
 8004714:	2007      	movs	r0, #7
 8004716:	f7fc f9bd 	bl	8000a94 <LCD_WriteReg>
 800471a:	f001 bb3f 	b.w	8005d9c <LCD_Init+0x3e34>
 800471e:	bf00      	nop
 8004720:	20000084 	.word	0x20000084
	} else if (lcddev.id == 0x9320) //测试OK.
 8004724:	4bce      	ldr	r3, [pc, #824]	@ (8004a60 <LCD_Init+0x2af8>)
 8004726:	889b      	ldrh	r3, [r3, #4]
 8004728:	f249 3220 	movw	r2, #37664	@ 0x9320
 800472c:	4293      	cmp	r3, r2
 800472e:	f040 80ad 	bne.w	800488c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004732:	2100      	movs	r1, #0
 8004734:	2000      	movs	r0, #0
 8004736:	f7fc f9ad 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800473a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800473e:	2001      	movs	r0, #1
 8004740:	f7fc f9a8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004744:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004748:	2002      	movs	r0, #2
 800474a:	f7fc f9a3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800474e:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004752:	2003      	movs	r0, #3
 8004754:	f7fc f99e 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8004758:	2100      	movs	r1, #0
 800475a:	2004      	movs	r0, #4
 800475c:	f7fc f99a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8004760:	f240 2102 	movw	r1, #514	@ 0x202
 8004764:	2008      	movs	r0, #8
 8004766:	f7fc f995 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 800476a:	2100      	movs	r1, #0
 800476c:	2009      	movs	r0, #9
 800476e:	f7fc f991 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8004772:	2100      	movs	r1, #0
 8004774:	200a      	movs	r0, #10
 8004776:	f7fc f98d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 800477a:	2101      	movs	r1, #1
 800477c:	200c      	movs	r0, #12
 800477e:	f7fc f989 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004782:	2100      	movs	r1, #0
 8004784:	200d      	movs	r0, #13
 8004786:	f7fc f985 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 800478a:	2100      	movs	r1, #0
 800478c:	200f      	movs	r0, #15
 800478e:	f7fc f981 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004792:	2032      	movs	r0, #50	@ 0x32
 8004794:	f002 faac 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004798:	f240 1101 	movw	r1, #257	@ 0x101
 800479c:	2007      	movs	r0, #7
 800479e:	f7fc f979 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 80047a2:	2032      	movs	r0, #50	@ 0x32
 80047a4:	f002 faa4 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80047a8:	f44f 5186 	mov.w	r1, #4288	@ 0x10c0
 80047ac:	2010      	movs	r0, #16
 80047ae:	f7fc f971 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80047b2:	2107      	movs	r1, #7
 80047b4:	2011      	movs	r0, #17
 80047b6:	f7fc f96d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80047ba:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80047be:	2012      	movs	r0, #18
 80047c0:	f7fc f968 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80047c4:	f44f 6130 	mov.w	r1, #2816	@ 0xb00
 80047c8:	2013      	movs	r0, #19
 80047ca:	f7fc f963 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80047ce:	2100      	movs	r1, #0
 80047d0:	2029      	movs	r0, #41	@ 0x29
 80047d2:	f7fc f95f 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80047d6:	f244 0110 	movw	r1, #16400	@ 0x4010
 80047da:	202b      	movs	r0, #43	@ 0x2b
 80047dc:	f7fc f95a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80047e0:	2100      	movs	r1, #0
 80047e2:	2050      	movs	r0, #80	@ 0x50
 80047e4:	f7fc f956 	bl	8000a94 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80047e8:	21ef      	movs	r1, #239	@ 0xef
 80047ea:	2051      	movs	r0, #81	@ 0x51
 80047ec:	f7fc f952 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80047f0:	2100      	movs	r1, #0
 80047f2:	2052      	movs	r0, #82	@ 0x52
 80047f4:	f7fc f94e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80047f8:	f240 113f 	movw	r1, #319	@ 0x13f
 80047fc:	2053      	movs	r0, #83	@ 0x53
 80047fe:	f7fc f949 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004802:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004806:	2060      	movs	r0, #96	@ 0x60
 8004808:	f7fc f944 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800480c:	2101      	movs	r1, #1
 800480e:	2061      	movs	r0, #97	@ 0x61
 8004810:	f7fc f940 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004814:	2100      	movs	r1, #0
 8004816:	206a      	movs	r0, #106	@ 0x6a
 8004818:	f7fc f93c 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800481c:	2100      	movs	r1, #0
 800481e:	2080      	movs	r0, #128	@ 0x80
 8004820:	f7fc f938 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004824:	2100      	movs	r1, #0
 8004826:	2081      	movs	r0, #129	@ 0x81
 8004828:	f7fc f934 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800482c:	2100      	movs	r1, #0
 800482e:	2082      	movs	r0, #130	@ 0x82
 8004830:	f7fc f930 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004834:	2100      	movs	r1, #0
 8004836:	2083      	movs	r0, #131	@ 0x83
 8004838:	f7fc f92c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800483c:	2100      	movs	r1, #0
 800483e:	2084      	movs	r0, #132	@ 0x84
 8004840:	f7fc f928 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004844:	2100      	movs	r1, #0
 8004846:	2085      	movs	r0, #133	@ 0x85
 8004848:	f7fc f924 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800484c:	2110      	movs	r1, #16
 800484e:	2090      	movs	r0, #144	@ 0x90
 8004850:	f7fc f920 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004854:	2100      	movs	r1, #0
 8004856:	2092      	movs	r0, #146	@ 0x92
 8004858:	f7fc f91c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 800485c:	2101      	movs	r1, #1
 800485e:	2093      	movs	r0, #147	@ 0x93
 8004860:	f7fc f918 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004864:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004868:	2095      	movs	r0, #149	@ 0x95
 800486a:	f7fc f913 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 800486e:	2100      	movs	r1, #0
 8004870:	2097      	movs	r0, #151	@ 0x97
 8004872:	f7fc f90f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004876:	2100      	movs	r1, #0
 8004878:	2098      	movs	r0, #152	@ 0x98
 800487a:	f7fc f90b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 800487e:	f240 1173 	movw	r1, #371	@ 0x173
 8004882:	2007      	movs	r0, #7
 8004884:	f7fc f906 	bl	8000a94 <LCD_WriteReg>
 8004888:	f001 ba88 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 800488c:	4b74      	ldr	r3, [pc, #464]	@ (8004a60 <LCD_Init+0x2af8>)
 800488e:	889b      	ldrh	r3, [r3, #4]
 8004890:	f249 3231 	movw	r2, #37681	@ 0x9331
 8004894:	4293      	cmp	r3, r2
 8004896:	f040 80e5 	bne.w	8004a64 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 800489a:	f241 0114 	movw	r1, #4116	@ 0x1014
 800489e:	20e7      	movs	r0, #231	@ 0xe7
 80048a0:	f7fc f8f8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80048a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048a8:	2001      	movs	r0, #1
 80048aa:	f7fc f8f3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80048ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80048b2:	2002      	movs	r0, #2
 80048b4:	f7fc f8ee 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80048b8:	f241 0138 	movw	r1, #4152	@ 0x1038
 80048bc:	2003      	movs	r0, #3
 80048be:	f7fc f8e9 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80048c2:	f240 2102 	movw	r1, #514	@ 0x202
 80048c6:	2008      	movs	r0, #8
 80048c8:	f7fc f8e4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80048cc:	2100      	movs	r1, #0
 80048ce:	2009      	movs	r0, #9
 80048d0:	f7fc f8e0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80048d4:	2100      	movs	r1, #0
 80048d6:	200a      	movs	r0, #10
 80048d8:	f7fc f8dc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80048dc:	2100      	movs	r1, #0
 80048de:	200c      	movs	r0, #12
 80048e0:	f7fc f8d8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80048e4:	2100      	movs	r1, #0
 80048e6:	200d      	movs	r0, #13
 80048e8:	f7fc f8d4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80048ec:	2100      	movs	r1, #0
 80048ee:	200f      	movs	r0, #15
 80048f0:	f7fc f8d0 	bl	8000a94 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80048f4:	2100      	movs	r1, #0
 80048f6:	2010      	movs	r0, #16
 80048f8:	f7fc f8cc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80048fc:	2107      	movs	r1, #7
 80048fe:	2011      	movs	r0, #17
 8004900:	f7fc f8c8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004904:	2100      	movs	r1, #0
 8004906:	2012      	movs	r0, #18
 8004908:	f7fc f8c4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800490c:	2100      	movs	r1, #0
 800490e:	2013      	movs	r0, #19
 8004910:	f7fc f8c0 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004914:	20c8      	movs	r0, #200	@ 0xc8
 8004916:	f002 f9eb 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800491a:	f241 6190 	movw	r1, #5776	@ 0x1690
 800491e:	2010      	movs	r0, #16
 8004920:	f7fc f8b8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004924:	f240 2127 	movw	r1, #551	@ 0x227
 8004928:	2011      	movs	r0, #17
 800492a:	f7fc f8b3 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800492e:	2032      	movs	r0, #50	@ 0x32
 8004930:	f002 f9de 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004934:	210c      	movs	r1, #12
 8004936:	2012      	movs	r0, #18
 8004938:	f7fc f8ac 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800493c:	2032      	movs	r0, #50	@ 0x32
 800493e:	f002 f9d7 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004942:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004946:	2013      	movs	r0, #19
 8004948:	f7fc f8a4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800494c:	2111      	movs	r1, #17
 800494e:	2029      	movs	r0, #41	@ 0x29
 8004950:	f7fc f8a0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004954:	210b      	movs	r1, #11
 8004956:	202b      	movs	r0, #43	@ 0x2b
 8004958:	f7fc f89c 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800495c:	2032      	movs	r0, #50	@ 0x32
 800495e:	f002 f9c7 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004962:	2100      	movs	r1, #0
 8004964:	2020      	movs	r0, #32
 8004966:	f7fc f895 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 800496a:	f240 113f 	movw	r1, #319	@ 0x13f
 800496e:	2021      	movs	r0, #33	@ 0x21
 8004970:	f7fc f890 	bl	8000a94 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004974:	2100      	movs	r1, #0
 8004976:	2030      	movs	r0, #48	@ 0x30
 8004978:	f7fc f88c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 800497c:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004980:	2031      	movs	r0, #49	@ 0x31
 8004982:	f7fc f887 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004986:	2100      	movs	r1, #0
 8004988:	2032      	movs	r0, #50	@ 0x32
 800498a:	f7fc f883 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800498e:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8004992:	2035      	movs	r0, #53	@ 0x35
 8004994:	f7fc f87e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004998:	f241 610a 	movw	r1, #5642	@ 0x160a
 800499c:	2036      	movs	r0, #54	@ 0x36
 800499e:	f7fc f879 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80049a2:	f240 7107 	movw	r1, #1799	@ 0x707
 80049a6:	2037      	movs	r0, #55	@ 0x37
 80049a8:	f7fc f874 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80049ac:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80049b0:	2038      	movs	r0, #56	@ 0x38
 80049b2:	f7fc f86f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80049b6:	f240 7107 	movw	r1, #1799	@ 0x707
 80049ba:	2039      	movs	r0, #57	@ 0x39
 80049bc:	f7fc f86a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80049c0:	f240 4102 	movw	r1, #1026	@ 0x402
 80049c4:	203c      	movs	r0, #60	@ 0x3c
 80049c6:	f7fc f865 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80049ca:	f640 410f 	movw	r1, #3087	@ 0xc0f
 80049ce:	203d      	movs	r0, #61	@ 0x3d
 80049d0:	f7fc f860 	bl	8000a94 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80049d4:	2100      	movs	r1, #0
 80049d6:	2050      	movs	r0, #80	@ 0x50
 80049d8:	f7fc f85c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80049dc:	21ef      	movs	r1, #239	@ 0xef
 80049de:	2051      	movs	r0, #81	@ 0x51
 80049e0:	f7fc f858 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80049e4:	2100      	movs	r1, #0
 80049e6:	2052      	movs	r0, #82	@ 0x52
 80049e8:	f7fc f854 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80049ec:	f240 113f 	movw	r1, #319	@ 0x13f
 80049f0:	2053      	movs	r0, #83	@ 0x53
 80049f2:	f7fc f84f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80049f6:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80049fa:	2060      	movs	r0, #96	@ 0x60
 80049fc:	f7fc f84a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004a00:	2101      	movs	r1, #1
 8004a02:	2061      	movs	r0, #97	@ 0x61
 8004a04:	f7fc f846 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004a08:	2100      	movs	r1, #0
 8004a0a:	206a      	movs	r0, #106	@ 0x6a
 8004a0c:	f7fc f842 	bl	8000a94 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004a10:	2100      	movs	r1, #0
 8004a12:	2080      	movs	r0, #128	@ 0x80
 8004a14:	f7fc f83e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2081      	movs	r0, #129	@ 0x81
 8004a1c:	f7fc f83a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004a20:	2100      	movs	r1, #0
 8004a22:	2082      	movs	r0, #130	@ 0x82
 8004a24:	f7fc f836 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2083      	movs	r0, #131	@ 0x83
 8004a2c:	f7fc f832 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004a30:	2100      	movs	r1, #0
 8004a32:	2084      	movs	r0, #132	@ 0x84
 8004a34:	f7fc f82e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	2085      	movs	r0, #133	@ 0x85
 8004a3c:	f7fc f82a 	bl	8000a94 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004a40:	2110      	movs	r1, #16
 8004a42:	2090      	movs	r0, #144	@ 0x90
 8004a44:	f7fc f826 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004a48:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a4c:	2092      	movs	r0, #146	@ 0x92
 8004a4e:	f7fc f821 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004a52:	f240 1133 	movw	r1, #307	@ 0x133
 8004a56:	2007      	movs	r0, #7
 8004a58:	f7fc f81c 	bl	8000a94 <LCD_WriteReg>
 8004a5c:	f001 b99e 	b.w	8005d9c <LCD_Init+0x3e34>
 8004a60:	20000084 	.word	0x20000084
	} else if (lcddev.id == 0x5408) {
 8004a64:	4be2      	ldr	r3, [pc, #904]	@ (8004df0 <LCD_Init+0x2e88>)
 8004a66:	889b      	ldrh	r3, [r3, #4]
 8004a68:	f245 4208 	movw	r2, #21512	@ 0x5408
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	f040 80a3 	bne.w	8004bb8 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004a72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a76:	2001      	movs	r0, #1
 8004a78:	f7fc f80c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004a7c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004a80:	2002      	movs	r0, #2
 8004a82:	f7fc f807 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004a86:	f241 0130 	movw	r1, #4144	@ 0x1030
 8004a8a:	2003      	movs	r0, #3
 8004a8c:	f7fc f802 	bl	8000a94 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004a90:	2100      	movs	r1, #0
 8004a92:	2004      	movs	r0, #4
 8004a94:	f7fb fffe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004a98:	f240 2107 	movw	r1, #519	@ 0x207
 8004a9c:	2008      	movs	r0, #8
 8004a9e:	f7fb fff9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	2009      	movs	r0, #9
 8004aa6:	f7fb fff5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004aaa:	2100      	movs	r1, #0
 8004aac:	200a      	movs	r0, #10
 8004aae:	f7fb fff1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	200c      	movs	r0, #12
 8004ab6:	f7fb ffed 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004aba:	2100      	movs	r1, #0
 8004abc:	200d      	movs	r0, #13
 8004abe:	f7fb ffe9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	200f      	movs	r0, #15
 8004ac6:	f7fb ffe5 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004aca:	2014      	movs	r0, #20
 8004acc:	f002 f910 	bl	8006cf0 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004ad0:	f241 61b0 	movw	r1, #5808	@ 0x16b0
 8004ad4:	2010      	movs	r0, #16
 8004ad6:	f7fb ffdd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004ada:	2101      	movs	r1, #1
 8004adc:	2011      	movs	r0, #17
 8004ade:	f7fb ffd9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	2017      	movs	r0, #23
 8004ae6:	f7fb ffd5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004aea:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8004aee:	2012      	movs	r0, #18
 8004af0:	f7fb ffd0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004af4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004af8:	2013      	movs	r0, #19
 8004afa:	f7fb ffcb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004afe:	2109      	movs	r1, #9
 8004b00:	2029      	movs	r0, #41	@ 0x29
 8004b02:	f7fb ffc7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004b06:	2109      	movs	r1, #9
 8004b08:	202a      	movs	r0, #42	@ 0x2a
 8004b0a:	f7fb ffc3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	20a4      	movs	r0, #164	@ 0xa4
 8004b12:	f7fb ffbf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004b16:	2100      	movs	r1, #0
 8004b18:	2050      	movs	r0, #80	@ 0x50
 8004b1a:	f7fb ffbb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004b1e:	21ef      	movs	r1, #239	@ 0xef
 8004b20:	2051      	movs	r0, #81	@ 0x51
 8004b22:	f7fb ffb7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004b26:	2100      	movs	r1, #0
 8004b28:	2052      	movs	r0, #82	@ 0x52
 8004b2a:	f7fb ffb3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004b2e:	f240 113f 	movw	r1, #319	@ 0x13f
 8004b32:	2053      	movs	r0, #83	@ 0x53
 8004b34:	f7fb ffae 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004b38:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004b3c:	2060      	movs	r0, #96	@ 0x60
 8004b3e:	f7fb ffa9 	bl	8000a94 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004b42:	2101      	movs	r1, #1
 8004b44:	2061      	movs	r0, #97	@ 0x61
 8004b46:	f7fb ffa5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	206a      	movs	r0, #106	@ 0x6a
 8004b4e:	f7fb ffa1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004b52:	2100      	movs	r1, #0
 8004b54:	2080      	movs	r0, #128	@ 0x80
 8004b56:	f7fb ff9d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	2081      	movs	r0, #129	@ 0x81
 8004b5e:	f7fb ff99 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004b62:	2100      	movs	r1, #0
 8004b64:	2082      	movs	r0, #130	@ 0x82
 8004b66:	f7fb ff95 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	2083      	movs	r0, #131	@ 0x83
 8004b6e:	f7fb ff91 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004b72:	2100      	movs	r1, #0
 8004b74:	2084      	movs	r0, #132	@ 0x84
 8004b76:	f7fb ff8d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	2085      	movs	r0, #133	@ 0x85
 8004b7e:	f7fb ff89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004b82:	2113      	movs	r1, #19
 8004b84:	2090      	movs	r0, #144	@ 0x90
 8004b86:	f7fb ff85 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2092      	movs	r0, #146	@ 0x92
 8004b8e:	f7fb ff81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004b92:	2103      	movs	r1, #3
 8004b94:	2093      	movs	r0, #147	@ 0x93
 8004b96:	f7fb ff7d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004b9a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8004b9e:	2095      	movs	r0, #149	@ 0x95
 8004ba0:	f7fb ff78 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004ba4:	f240 1173 	movw	r1, #371	@ 0x173
 8004ba8:	2007      	movs	r0, #7
 8004baa:	f7fb ff73 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004bae:	2032      	movs	r0, #50	@ 0x32
 8004bb0:	f002 f89e 	bl	8006cf0 <HAL_Delay>
 8004bb4:	f001 b8f2 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004bb8:	4b8d      	ldr	r3, [pc, #564]	@ (8004df0 <LCD_Init+0x2e88>)
 8004bba:	889b      	ldrh	r3, [r3, #4]
 8004bbc:	f241 5205 	movw	r2, #5381	@ 0x1505
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	f040 8117 	bne.w	8004df4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2007      	movs	r0, #7
 8004bca:	f7fb ff63 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004bce:	2032      	movs	r0, #50	@ 0x32
 8004bd0:	f002 f88e 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004bd4:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8004bd8:	2012      	movs	r0, #18
 8004bda:	f7fb ff5b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004bde:	2101      	movs	r1, #1
 8004be0:	20a4      	movs	r0, #164	@ 0xa4
 8004be2:	f7fb ff57 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004be6:	210f      	movs	r1, #15
 8004be8:	2008      	movs	r0, #8
 8004bea:	f7fb ff53 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004bee:	2108      	movs	r1, #8
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	f7fb ff4f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004bf6:	2108      	movs	r1, #8
 8004bf8:	200d      	movs	r0, #13
 8004bfa:	f7fb ff4b 	bl	8000a94 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004bfe:	f240 7107 	movw	r1, #1799	@ 0x707
 8004c02:	2030      	movs	r0, #48	@ 0x30
 8004c04:	f7fb ff46 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004c08:	2107      	movs	r1, #7
 8004c0a:	2031      	movs	r0, #49	@ 0x31
 8004c0c:	f7fb ff42 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004c10:	f240 6103 	movw	r1, #1539	@ 0x603
 8004c14:	2032      	movs	r0, #50	@ 0x32
 8004c16:	f7fb ff3d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004c1a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004c1e:	2033      	movs	r0, #51	@ 0x33
 8004c20:	f7fb ff38 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004c24:	f240 2102 	movw	r1, #514	@ 0x202
 8004c28:	2034      	movs	r0, #52	@ 0x34
 8004c2a:	f7fb ff33 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004c2e:	2102      	movs	r1, #2
 8004c30:	2035      	movs	r0, #53	@ 0x35
 8004c32:	f7fb ff2f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004c36:	f641 710f 	movw	r1, #7951	@ 0x1f0f
 8004c3a:	2036      	movs	r0, #54	@ 0x36
 8004c3c:	f7fb ff2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004c40:	f240 7107 	movw	r1, #1799	@ 0x707
 8004c44:	2037      	movs	r0, #55	@ 0x37
 8004c46:	f7fb ff25 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	2038      	movs	r0, #56	@ 0x38
 8004c4e:	f7fb ff21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004c52:	2100      	movs	r1, #0
 8004c54:	2039      	movs	r0, #57	@ 0x39
 8004c56:	f7fb ff1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004c5a:	f240 7107 	movw	r1, #1799	@ 0x707
 8004c5e:	203a      	movs	r0, #58	@ 0x3a
 8004c60:	f7fb ff18 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004c64:	2100      	movs	r1, #0
 8004c66:	203b      	movs	r0, #59	@ 0x3b
 8004c68:	f7fb ff14 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004c6c:	2107      	movs	r1, #7
 8004c6e:	203c      	movs	r0, #60	@ 0x3c
 8004c70:	f7fb ff10 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004c74:	2100      	movs	r1, #0
 8004c76:	203d      	movs	r0, #61	@ 0x3d
 8004c78:	f7fb ff0c 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004c7c:	2032      	movs	r0, #50	@ 0x32
 8004c7e:	f002 f837 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004c82:	2101      	movs	r1, #1
 8004c84:	2007      	movs	r0, #7
 8004c86:	f7fb ff05 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	2017      	movs	r0, #23
 8004c8e:	f7fb ff01 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(50);
 8004c92:	2032      	movs	r0, #50	@ 0x32
 8004c94:	f002 f82c 	bl	8006cf0 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004c98:	f44f 51bd 	mov.w	r1, #6048	@ 0x17a0
 8004c9c:	2010      	movs	r0, #16
 8004c9e:	f7fb fef9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004ca2:	f240 2117 	movw	r1, #535	@ 0x217
 8004ca6:	2011      	movs	r0, #17
 8004ca8:	f7fb fef4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004cac:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8004cb0:	2012      	movs	r0, #18
 8004cb2:	f7fb feef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004cb6:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8004cba:	2013      	movs	r0, #19
 8004cbc:	f7fb feea 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	202a      	movs	r0, #42	@ 0x2a
 8004cc4:	f7fb fee6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004cc8:	210a      	movs	r1, #10
 8004cca:	2029      	movs	r0, #41	@ 0x29
 8004ccc:	f7fb fee2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004cd0:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8004cd4:	2012      	movs	r0, #18
 8004cd6:	f7fb fedd 	bl	8000a94 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004cda:	2100      	movs	r1, #0
 8004cdc:	2050      	movs	r0, #80	@ 0x50
 8004cde:	f7fb fed9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004ce2:	21ef      	movs	r1, #239	@ 0xef
 8004ce4:	2051      	movs	r0, #81	@ 0x51
 8004ce6:	f7fb fed5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004cea:	2100      	movs	r1, #0
 8004cec:	2052      	movs	r0, #82	@ 0x52
 8004cee:	f7fb fed1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004cf2:	f240 113f 	movw	r1, #319	@ 0x13f
 8004cf6:	2053      	movs	r0, #83	@ 0x53
 8004cf8:	f7fb fecc 	bl	8000a94 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004cfc:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004d00:	2060      	movs	r0, #96	@ 0x60
 8004d02:	f7fb fec7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004d06:	2101      	movs	r1, #1
 8004d08:	2061      	movs	r0, #97	@ 0x61
 8004d0a:	f7fb fec3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	206a      	movs	r0, #106	@ 0x6a
 8004d12:	f7fb febf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004d16:	2100      	movs	r1, #0
 8004d18:	2080      	movs	r0, #128	@ 0x80
 8004d1a:	f7fb febb 	bl	8000a94 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2081      	movs	r0, #129	@ 0x81
 8004d22:	f7fb feb7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004d26:	2100      	movs	r1, #0
 8004d28:	2082      	movs	r0, #130	@ 0x82
 8004d2a:	f7fb feb3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2083      	movs	r0, #131	@ 0x83
 8004d32:	f7fb feaf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004d36:	2100      	movs	r1, #0
 8004d38:	2084      	movs	r0, #132	@ 0x84
 8004d3a:	f7fb feab 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	2085      	movs	r0, #133	@ 0x85
 8004d42:	f7fb fea7 	bl	8000a94 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004d46:	2113      	movs	r1, #19
 8004d48:	2090      	movs	r0, #144	@ 0x90
 8004d4a:	f7fb fea3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004d4e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004d52:	2092      	movs	r0, #146	@ 0x92
 8004d54:	f7fb fe9e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004d58:	2105      	movs	r1, #5
 8004d5a:	2093      	movs	r0, #147	@ 0x93
 8004d5c:	f7fb fe9a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004d60:	2100      	movs	r1, #0
 8004d62:	2095      	movs	r0, #149	@ 0x95
 8004d64:	f7fb fe96 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004d68:	2100      	movs	r1, #0
 8004d6a:	2097      	movs	r0, #151	@ 0x97
 8004d6c:	f7fb fe92 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004d70:	2100      	movs	r1, #0
 8004d72:	2098      	movs	r0, #152	@ 0x98
 8004d74:	f7fb fe8e 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8004d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d7c:	2001      	movs	r0, #1
 8004d7e:	f7fb fe89 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004d82:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004d86:	2002      	movs	r0, #2
 8004d88:	f7fb fe84 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004d8c:	f241 0138 	movw	r1, #4152	@ 0x1038
 8004d90:	2003      	movs	r0, #3
 8004d92:	f7fb fe7f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8004d96:	2100      	movs	r1, #0
 8004d98:	2004      	movs	r0, #4
 8004d9a:	f7fb fe7b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	200c      	movs	r0, #12
 8004da2:	f7fb fe77 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004da6:	2100      	movs	r1, #0
 8004da8:	200f      	movs	r0, #15
 8004daa:	f7fb fe73 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8004dae:	2100      	movs	r1, #0
 8004db0:	2020      	movs	r0, #32
 8004db2:	f7fb fe6f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004db6:	2100      	movs	r1, #0
 8004db8:	2021      	movs	r0, #33	@ 0x21
 8004dba:	f7fb fe6b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004dbe:	2121      	movs	r1, #33	@ 0x21
 8004dc0:	2007      	movs	r0, #7
 8004dc2:	f7fb fe67 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004dc6:	2014      	movs	r0, #20
 8004dc8:	f001 ff92 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004dcc:	2161      	movs	r1, #97	@ 0x61
 8004dce:	2007      	movs	r0, #7
 8004dd0:	f7fb fe60 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004dd4:	2014      	movs	r0, #20
 8004dd6:	f001 ff8b 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004dda:	f240 1173 	movw	r1, #371	@ 0x173
 8004dde:	2007      	movs	r0, #7
 8004de0:	f7fb fe58 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004de4:	2014      	movs	r0, #20
 8004de6:	f001 ff83 	bl	8006cf0 <HAL_Delay>
 8004dea:	f000 bfd7 	b.w	8005d9c <LCD_Init+0x3e34>
 8004dee:	bf00      	nop
 8004df0:	20000084 	.word	0x20000084
	} else if (lcddev.id == 0xB505) {
 8004df4:	4bf0      	ldr	r3, [pc, #960]	@ (80051b8 <LCD_Init+0x3250>)
 8004df6:	889b      	ldrh	r3, [r3, #4]
 8004df8:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	f040 8103 	bne.w	8005008 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004e02:	2100      	movs	r1, #0
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7fb fe45 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f7fb fe41 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e12:	2100      	movs	r1, #0
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fb fe3d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7fb fe39 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004e22:	2101      	movs	r1, #1
 8004e24:	20a4      	movs	r0, #164	@ 0xa4
 8004e26:	f7fb fe35 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004e2a:	2014      	movs	r0, #20
 8004e2c:	f001 ff60 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004e30:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004e34:	2060      	movs	r0, #96	@ 0x60
 8004e36:	f7fb fe2d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004e3a:	f240 2102 	movw	r1, #514	@ 0x202
 8004e3e:	2008      	movs	r0, #8
 8004e40:	f7fb fe28 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004e44:	f44f 7105 	mov.w	r1, #532	@ 0x214
 8004e48:	2030      	movs	r0, #48	@ 0x30
 8004e4a:	f7fb fe23 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004e4e:	f243 7115 	movw	r1, #14101	@ 0x3715
 8004e52:	2031      	movs	r0, #49	@ 0x31
 8004e54:	f7fb fe1e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004e58:	f240 6104 	movw	r1, #1540	@ 0x604
 8004e5c:	2032      	movs	r0, #50	@ 0x32
 8004e5e:	f7fb fe19 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004e62:	f640 6116 	movw	r1, #3606	@ 0xe16
 8004e66:	2033      	movs	r0, #51	@ 0x33
 8004e68:	f7fb fe14 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004e6c:	f242 2111 	movw	r1, #8721	@ 0x2211
 8004e70:	2034      	movs	r0, #52	@ 0x34
 8004e72:	f7fb fe0f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004e76:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8004e7a:	2035      	movs	r0, #53	@ 0x35
 8004e7c:	f7fb fe0a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004e80:	f248 5107 	movw	r1, #34055	@ 0x8507
 8004e84:	2036      	movs	r0, #54	@ 0x36
 8004e86:	f7fb fe05 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004e8a:	f241 4107 	movw	r1, #5127	@ 0x1407
 8004e8e:	2037      	movs	r0, #55	@ 0x37
 8004e90:	f7fb fe00 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004e94:	f241 4103 	movw	r1, #5123	@ 0x1403
 8004e98:	2038      	movs	r0, #56	@ 0x38
 8004e9a:	f7fb fdfb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004e9e:	2120      	movs	r1, #32
 8004ea0:	2039      	movs	r0, #57	@ 0x39
 8004ea2:	f7fb fdf7 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004ea6:	211a      	movs	r1, #26
 8004ea8:	2090      	movs	r0, #144	@ 0x90
 8004eaa:	f7fb fdf3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2010      	movs	r0, #16
 8004eb2:	f7fb fdef 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004eb6:	2107      	movs	r1, #7
 8004eb8:	2011      	movs	r0, #17
 8004eba:	f7fb fdeb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2012      	movs	r0, #18
 8004ec2:	f7fb fde7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2013      	movs	r0, #19
 8004eca:	f7fb fde3 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004ece:	2014      	movs	r0, #20
 8004ed0:	f001 ff0e 	bl	8006cf0 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004ed4:	f44f 61e6 	mov.w	r1, #1840	@ 0x730
 8004ed8:	2010      	movs	r0, #16
 8004eda:	f7fb fddb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004ede:	f240 1137 	movw	r1, #311	@ 0x137
 8004ee2:	2011      	movs	r0, #17
 8004ee4:	f7fb fdd6 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004ee8:	2014      	movs	r0, #20
 8004eea:	f001 ff01 	bl	8006cf0 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004eee:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8004ef2:	2012      	movs	r0, #18
 8004ef4:	f7fb fdce 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004ef8:	2014      	movs	r0, #20
 8004efa:	f001 fef9 	bl	8006cf0 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004efe:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 8004f02:	2013      	movs	r0, #19
 8004f04:	f7fb fdc6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004f08:	2180      	movs	r1, #128	@ 0x80
 8004f0a:	202a      	movs	r0, #42	@ 0x2a
 8004f0c:	f7fb fdc2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004f10:	2148      	movs	r1, #72	@ 0x48
 8004f12:	2029      	movs	r0, #41	@ 0x29
 8004f14:	f7fb fdbe 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004f18:	2014      	movs	r0, #20
 8004f1a:	f001 fee9 	bl	8006cf0 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004f1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f22:	2001      	movs	r0, #1
 8004f24:	f7fb fdb6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004f28:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8004f2c:	2002      	movs	r0, #2
 8004f2e:	f7fb fdb1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004f32:	f241 0138 	movw	r1, #4152	@ 0x1038
 8004f36:	2003      	movs	r0, #3
 8004f38:	f7fb fdac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004f3c:	f240 2102 	movw	r1, #514	@ 0x202
 8004f40:	2008      	movs	r0, #8
 8004f42:	f7fb fda7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	200a      	movs	r0, #10
 8004f4a:	f7fb fda3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	200c      	movs	r0, #12
 8004f52:	f7fb fd9f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	200d      	movs	r0, #13
 8004f5a:	f7fb fd9b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004f5e:	2130      	movs	r1, #48	@ 0x30
 8004f60:	200e      	movs	r0, #14
 8004f62:	f7fb fd97 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	2050      	movs	r0, #80	@ 0x50
 8004f6a:	f7fb fd93 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004f6e:	21ef      	movs	r1, #239	@ 0xef
 8004f70:	2051      	movs	r0, #81	@ 0x51
 8004f72:	f7fb fd8f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f76:	2100      	movs	r1, #0
 8004f78:	2052      	movs	r0, #82	@ 0x52
 8004f7a:	f7fb fd8b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004f7e:	f240 113f 	movw	r1, #319	@ 0x13f
 8004f82:	2053      	movs	r0, #83	@ 0x53
 8004f84:	f7fb fd86 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004f88:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 8004f8c:	2060      	movs	r0, #96	@ 0x60
 8004f8e:	f7fb fd81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f92:	2101      	movs	r1, #1
 8004f94:	2061      	movs	r0, #97	@ 0x61
 8004f96:	f7fb fd7d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	206a      	movs	r0, #106	@ 0x6a
 8004f9e:	f7fb fd79 	bl	8000a94 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004fa2:	2111      	movs	r1, #17
 8004fa4:	2090      	movs	r0, #144	@ 0x90
 8004fa6:	f7fb fd75 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004faa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004fae:	2092      	movs	r0, #146	@ 0x92
 8004fb0:	f7fb fd70 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004fb4:	f240 4102 	movw	r1, #1026	@ 0x402
 8004fb8:	2093      	movs	r0, #147	@ 0x93
 8004fba:	f7fb fd6b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004fbe:	2102      	movs	r1, #2
 8004fc0:	2094      	movs	r0, #148	@ 0x94
 8004fc2:	f7fb fd67 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004fc6:	2014      	movs	r0, #20
 8004fc8:	f001 fe92 	bl	8006cf0 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004fcc:	2101      	movs	r1, #1
 8004fce:	2007      	movs	r0, #7
 8004fd0:	f7fb fd60 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8004fd4:	2014      	movs	r0, #20
 8004fd6:	f001 fe8b 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004fda:	2161      	movs	r1, #97	@ 0x61
 8004fdc:	2007      	movs	r0, #7
 8004fde:	f7fb fd59 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004fe2:	f240 1173 	movw	r1, #371	@ 0x173
 8004fe6:	2007      	movs	r0, #7
 8004fe8:	f7fb fd54 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004fec:	2100      	movs	r1, #0
 8004fee:	2020      	movs	r0, #32
 8004ff0:	f7fb fd50 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2021      	movs	r0, #33	@ 0x21
 8004ff8:	f7fb fd4c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004ffc:	2122      	movs	r1, #34	@ 0x22
 8004ffe:	2000      	movs	r0, #0
 8005000:	f7fb fd48 	bl	8000a94 <LCD_WriteReg>
 8005004:	f000 beca 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005008:	4b6b      	ldr	r3, [pc, #428]	@ (80051b8 <LCD_Init+0x3250>)
 800500a:	889b      	ldrh	r3, [r3, #4]
 800500c:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8005010:	4293      	cmp	r3, r2
 8005012:	f040 80d3 	bne.w	80051bc <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8005016:	2100      	movs	r1, #0
 8005018:	2000      	movs	r0, #0
 800501a:	f7fb fd3b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800501e:	2100      	movs	r1, #0
 8005020:	2000      	movs	r0, #0
 8005022:	f7fb fd37 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8005026:	2014      	movs	r0, #20
 8005028:	f001 fe62 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 800502c:	2100      	movs	r1, #0
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb fd30 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005034:	2100      	movs	r1, #0
 8005036:	2000      	movs	r0, #0
 8005038:	f7fb fd2c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800503c:	2100      	movs	r1, #0
 800503e:	2000      	movs	r0, #0
 8005040:	f7fb fd28 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005044:	2100      	movs	r1, #0
 8005046:	2000      	movs	r0, #0
 8005048:	f7fb fd24 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800504c:	2101      	movs	r1, #1
 800504e:	20a4      	movs	r0, #164	@ 0xa4
 8005050:	f7fb fd20 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8005054:	2014      	movs	r0, #20
 8005056:	f001 fe4b 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800505a:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800505e:	2060      	movs	r0, #96	@ 0x60
 8005060:	f7fb fd18 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8005064:	f640 0106 	movw	r1, #2054	@ 0x806
 8005068:	2008      	movs	r0, #8
 800506a:	f7fb fd13 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800506e:	f240 7103 	movw	r1, #1795	@ 0x703
 8005072:	2030      	movs	r0, #48	@ 0x30
 8005074:	f7fb fd0e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005078:	2101      	movs	r1, #1
 800507a:	2031      	movs	r0, #49	@ 0x31
 800507c:	f7fb fd0a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005080:	2104      	movs	r1, #4
 8005082:	2032      	movs	r0, #50	@ 0x32
 8005084:	f7fb fd06 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005088:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800508c:	2033      	movs	r0, #51	@ 0x33
 800508e:	f7fb fd01 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8005092:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8005096:	2034      	movs	r0, #52	@ 0x34
 8005098:	f7fb fcfc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 800509c:	f240 1103 	movw	r1, #259	@ 0x103
 80050a0:	2035      	movs	r0, #53	@ 0x35
 80050a2:	f7fb fcf7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80050a6:	211f      	movs	r1, #31
 80050a8:	2036      	movs	r0, #54	@ 0x36
 80050aa:	f7fb fcf3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80050ae:	f240 7103 	movw	r1, #1795	@ 0x703
 80050b2:	2037      	movs	r0, #55	@ 0x37
 80050b4:	f7fb fcee 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80050b8:	2101      	movs	r1, #1
 80050ba:	2038      	movs	r0, #56	@ 0x38
 80050bc:	f7fb fcea 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80050c0:	2104      	movs	r1, #4
 80050c2:	2039      	movs	r0, #57	@ 0x39
 80050c4:	f7fb fce6 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80050c8:	2115      	movs	r1, #21
 80050ca:	2090      	movs	r0, #144	@ 0x90
 80050cc:	f7fb fce2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80050d0:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80050d4:	2010      	movs	r0, #16
 80050d6:	f7fb fcdd 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80050da:	f240 2147 	movw	r1, #583	@ 0x247
 80050de:	2011      	movs	r0, #17
 80050e0:	f7fb fcd8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80050e4:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 80050e8:	2012      	movs	r0, #18
 80050ea:	f7fb fcd3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80050ee:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80050f2:	2013      	movs	r0, #19
 80050f4:	f7fb fcce 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(120);
 80050f8:	2078      	movs	r0, #120	@ 0x78
 80050fa:	f001 fdf9 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80050fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005102:	2001      	movs	r0, #1
 8005104:	f7fb fcc6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005108:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800510c:	2002      	movs	r0, #2
 800510e:	f7fb fcc1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005112:	f241 0130 	movw	r1, #4144	@ 0x1030
 8005116:	2003      	movs	r0, #3
 8005118:	f7fb fcbc 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800511c:	2108      	movs	r1, #8
 800511e:	200a      	movs	r0, #10
 8005120:	f7fb fcb8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005124:	2100      	movs	r1, #0
 8005126:	200c      	movs	r0, #12
 8005128:	f7fb fcb4 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800512c:	2120      	movs	r1, #32
 800512e:	200e      	movs	r0, #14
 8005130:	f7fb fcb0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005134:	2100      	movs	r1, #0
 8005136:	200f      	movs	r0, #15
 8005138:	f7fb fcac 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800513c:	2100      	movs	r1, #0
 800513e:	2020      	movs	r0, #32
 8005140:	f7fb fca8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005144:	2100      	movs	r1, #0
 8005146:	2021      	movs	r0, #33	@ 0x21
 8005148:	f7fb fca4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800514c:	213d      	movs	r1, #61	@ 0x3d
 800514e:	202a      	movs	r0, #42	@ 0x2a
 8005150:	f7fb fca0 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(20);
 8005154:	2014      	movs	r0, #20
 8005156:	f001 fdcb 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800515a:	212d      	movs	r1, #45	@ 0x2d
 800515c:	2029      	movs	r0, #41	@ 0x29
 800515e:	f7fb fc99 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005162:	2100      	movs	r1, #0
 8005164:	2050      	movs	r0, #80	@ 0x50
 8005166:	f7fb fc95 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800516a:	f24d 01ef 	movw	r1, #53487	@ 0xd0ef
 800516e:	2051      	movs	r0, #81	@ 0x51
 8005170:	f7fb fc90 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005174:	2100      	movs	r1, #0
 8005176:	2052      	movs	r0, #82	@ 0x52
 8005178:	f7fb fc8c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800517c:	f240 113f 	movw	r1, #319	@ 0x13f
 8005180:	2053      	movs	r0, #83	@ 0x53
 8005182:	f7fb fc87 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005186:	2100      	movs	r1, #0
 8005188:	2061      	movs	r0, #97	@ 0x61
 800518a:	f7fb fc83 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800518e:	2100      	movs	r1, #0
 8005190:	206a      	movs	r0, #106	@ 0x6a
 8005192:	f7fb fc7f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005196:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800519a:	2092      	movs	r0, #146	@ 0x92
 800519c:	f7fb fc7a 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80051a0:	2105      	movs	r1, #5
 80051a2:	2093      	movs	r0, #147	@ 0x93
 80051a4:	f7fb fc76 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80051a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051ac:	2007      	movs	r0, #7
 80051ae:	f7fb fc71 	bl	8000a94 <LCD_WriteReg>
 80051b2:	f000 bdf3 	b.w	8005d9c <LCD_Init+0x3e34>
 80051b6:	bf00      	nop
 80051b8:	20000084 	.word	0x20000084
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80051bc:	4bc2      	ldr	r3, [pc, #776]	@ (80054c8 <LCD_Init+0x3560>)
 80051be:	889b      	ldrh	r3, [r3, #4]
 80051c0:	f648 1289 	movw	r2, #35209	@ 0x8989
 80051c4:	4293      	cmp	r3, r2
 80051c6:	f040 80bc 	bne.w	8005342 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80051ca:	2101      	movs	r1, #1
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7fb fc61 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80051d2:	f64a 01a4 	movw	r1, #43172	@ 0xa8a4
 80051d6:	2003      	movs	r0, #3
 80051d8:	f7fb fc5c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80051dc:	2100      	movs	r1, #0
 80051de:	200c      	movs	r0, #12
 80051e0:	f7fb fc58 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80051e4:	f640 010c 	movw	r1, #2060	@ 0x80c
 80051e8:	200d      	movs	r0, #13
 80051ea:	f7fb fc53 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80051ee:	f44f 512c 	mov.w	r1, #11008	@ 0x2b00
 80051f2:	200e      	movs	r0, #14
 80051f4:	f7fb fc4e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80051f8:	21b0      	movs	r1, #176	@ 0xb0
 80051fa:	201e      	movs	r0, #30
 80051fc:	f7fb fc4a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005200:	f642 313f 	movw	r1, #11071	@ 0x2b3f
 8005204:	2001      	movs	r0, #1
 8005206:	f7fb fc45 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 800520a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800520e:	2002      	movs	r0, #2
 8005210:	f7fb fc40 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005214:	2100      	movs	r1, #0
 8005216:	2010      	movs	r0, #16
 8005218:	f7fb fc3c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 800521c:	f246 0178 	movw	r1, #24696	@ 0x6078
 8005220:	2011      	movs	r0, #17
 8005222:	f7fb fc37 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8005226:	2100      	movs	r1, #0
 8005228:	2005      	movs	r0, #5
 800522a:	f7fb fc33 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 800522e:	2100      	movs	r1, #0
 8005230:	2006      	movs	r0, #6
 8005232:	f7fb fc2f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8005236:	f64e 711c 	movw	r1, #61212	@ 0xef1c
 800523a:	2016      	movs	r0, #22
 800523c:	f7fb fc2a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8005240:	2103      	movs	r1, #3
 8005242:	2017      	movs	r0, #23
 8005244:	f7fb fc26 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8005248:	f240 2133 	movw	r1, #563	@ 0x233
 800524c:	2007      	movs	r0, #7
 800524e:	f7fb fc21 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8005252:	2100      	movs	r1, #0
 8005254:	200b      	movs	r0, #11
 8005256:	f7fb fc1d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800525a:	2100      	movs	r1, #0
 800525c:	200f      	movs	r0, #15
 800525e:	f7fb fc19 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8005262:	2100      	movs	r1, #0
 8005264:	2041      	movs	r0, #65	@ 0x41
 8005266:	f7fb fc15 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800526a:	2100      	movs	r1, #0
 800526c:	2042      	movs	r0, #66	@ 0x42
 800526e:	f7fb fc11 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8005272:	2100      	movs	r1, #0
 8005274:	2048      	movs	r0, #72	@ 0x48
 8005276:	f7fb fc0d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800527a:	f240 113f 	movw	r1, #319	@ 0x13f
 800527e:	2049      	movs	r0, #73	@ 0x49
 8005280:	f7fb fc08 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8005284:	2100      	movs	r1, #0
 8005286:	204a      	movs	r0, #74	@ 0x4a
 8005288:	f7fb fc04 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800528c:	2100      	movs	r1, #0
 800528e:	204b      	movs	r0, #75	@ 0x4b
 8005290:	f7fb fc00 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8005294:	f44f 416f 	mov.w	r1, #61184	@ 0xef00
 8005298:	2044      	movs	r0, #68	@ 0x44
 800529a:	f7fb fbfb 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800529e:	2100      	movs	r1, #0
 80052a0:	2045      	movs	r0, #69	@ 0x45
 80052a2:	f7fb fbf7 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80052a6:	f240 113f 	movw	r1, #319	@ 0x13f
 80052aa:	2046      	movs	r0, #70	@ 0x46
 80052ac:	f7fb fbf2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80052b0:	f240 7107 	movw	r1, #1799	@ 0x707
 80052b4:	2030      	movs	r0, #48	@ 0x30
 80052b6:	f7fb fbed 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80052ba:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80052be:	2031      	movs	r0, #49	@ 0x31
 80052c0:	f7fb fbe8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80052c4:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80052c8:	2032      	movs	r0, #50	@ 0x32
 80052ca:	f7fb fbe3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80052ce:	f240 5102 	movw	r1, #1282	@ 0x502
 80052d2:	2033      	movs	r0, #51	@ 0x33
 80052d4:	f7fb fbde 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80052d8:	f240 5107 	movw	r1, #1287	@ 0x507
 80052dc:	2034      	movs	r0, #52	@ 0x34
 80052de:	f7fb fbd9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80052e2:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80052e6:	2035      	movs	r0, #53	@ 0x35
 80052e8:	f7fb fbd4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80052ec:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80052f0:	2036      	movs	r0, #54	@ 0x36
 80052f2:	f7fb fbcf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80052f6:	f240 5102 	movw	r1, #1282	@ 0x502
 80052fa:	2037      	movs	r0, #55	@ 0x37
 80052fc:	f7fb fbca 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005300:	f240 3102 	movw	r1, #770	@ 0x302
 8005304:	203a      	movs	r0, #58	@ 0x3a
 8005306:	f7fb fbc5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 800530a:	f240 3102 	movw	r1, #770	@ 0x302
 800530e:	203b      	movs	r0, #59	@ 0x3b
 8005310:	f7fb fbc0 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8005314:	2100      	movs	r1, #0
 8005316:	2023      	movs	r0, #35	@ 0x23
 8005318:	f7fb fbbc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 800531c:	2100      	movs	r1, #0
 800531e:	2024      	movs	r0, #36	@ 0x24
 8005320:	f7fb fbb8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8005324:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005328:	2025      	movs	r0, #37	@ 0x25
 800532a:	f7fb fbb3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 800532e:	2100      	movs	r1, #0
 8005330:	204f      	movs	r0, #79	@ 0x4f
 8005332:	f7fb fbaf 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8005336:	2100      	movs	r1, #0
 8005338:	204e      	movs	r0, #78	@ 0x4e
 800533a:	f7fb fbab 	bl	8000a94 <LCD_WriteReg>
 800533e:	f000 bd2d 	b.w	8005d9c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8005342:	4b61      	ldr	r3, [pc, #388]	@ (80054c8 <LCD_Init+0x3560>)
 8005344:	889b      	ldrh	r3, [r3, #4]
 8005346:	f244 5231 	movw	r2, #17713	@ 0x4531
 800534a:	4293      	cmp	r3, r2
 800534c:	f040 80be 	bne.w	80054cc <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8005350:	2101      	movs	r1, #1
 8005352:	2000      	movs	r0, #0
 8005354:	f7fb fb9e 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 8005358:	200a      	movs	r0, #10
 800535a:	f001 fcc9 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800535e:	f241 6128 	movw	r1, #5672	@ 0x1628
 8005362:	2010      	movs	r0, #16
 8005364:	f7fb fb96 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8005368:	210e      	movs	r1, #14
 800536a:	2012      	movs	r0, #18
 800536c:	f7fb fb92 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8005370:	f640 2139 	movw	r1, #2617	@ 0xa39
 8005374:	2013      	movs	r0, #19
 8005376:	f7fb fb8d 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 800537a:	200a      	movs	r0, #10
 800537c:	f001 fcb8 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005380:	2140      	movs	r1, #64	@ 0x40
 8005382:	2011      	movs	r0, #17
 8005384:	f7fb fb86 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005388:	2150      	movs	r1, #80	@ 0x50
 800538a:	2015      	movs	r0, #21
 800538c:	f7fb fb82 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 8005390:	200a      	movs	r0, #10
 8005392:	f001 fcad 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8005396:	211e      	movs	r1, #30
 8005398:	2012      	movs	r0, #18
 800539a:	f7fb fb7b 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 800539e:	200a      	movs	r0, #10
 80053a0:	f001 fca6 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80053a4:	f44f 51b1 	mov.w	r1, #5664	@ 0x1620
 80053a8:	2010      	movs	r0, #16
 80053aa:	f7fb fb73 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80053ae:	f642 2139 	movw	r1, #10809	@ 0x2a39
 80053b2:	2013      	movs	r0, #19
 80053b4:	f7fb fb6e 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(10);
 80053b8:	200a      	movs	r0, #10
 80053ba:	f001 fc99 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80053be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80053c2:	2001      	movs	r0, #1
 80053c4:	f7fb fb66 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80053c8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80053cc:	2002      	movs	r0, #2
 80053ce:	f7fb fb61 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80053d2:	f241 0138 	movw	r1, #4152	@ 0x1038
 80053d6:	2003      	movs	r0, #3
 80053d8:	f7fb fb5c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80053dc:	f240 2102 	movw	r1, #514	@ 0x202
 80053e0:	2008      	movs	r0, #8
 80053e2:	f7fb fb57 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80053e6:	2108      	movs	r1, #8
 80053e8:	200a      	movs	r0, #10
 80053ea:	f7fb fb53 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80053ee:	2100      	movs	r1, #0
 80053f0:	2030      	movs	r0, #48	@ 0x30
 80053f2:	f7fb fb4f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80053f6:	f240 4102 	movw	r1, #1026	@ 0x402
 80053fa:	2031      	movs	r0, #49	@ 0x31
 80053fc:	f7fb fb4a 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005400:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005404:	2032      	movs	r0, #50	@ 0x32
 8005406:	f7fb fb45 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800540a:	f240 5103 	movw	r1, #1283	@ 0x503
 800540e:	2033      	movs	r0, #51	@ 0x33
 8005410:	f7fb fb40 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005414:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8005418:	2034      	movs	r0, #52	@ 0x34
 800541a:	f7fb fb3b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800541e:	f240 3101 	movw	r1, #769	@ 0x301
 8005422:	2035      	movs	r0, #53	@ 0x35
 8005424:	f7fb fb36 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005428:	f240 7107 	movw	r1, #1799	@ 0x707
 800542c:	2036      	movs	r0, #54	@ 0x36
 800542e:	f7fb fb31 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005432:	f240 3105 	movw	r1, #773	@ 0x305
 8005436:	2037      	movs	r0, #55	@ 0x37
 8005438:	f7fb fb2c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800543c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8005440:	2038      	movs	r0, #56	@ 0x38
 8005442:	f7fb fb27 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005446:	f640 710b 	movw	r1, #3851	@ 0xf0b
 800544a:	2039      	movs	r0, #57	@ 0x39
 800544c:	f7fb fb22 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8005450:	2102      	movs	r1, #2
 8005452:	2041      	movs	r0, #65	@ 0x41
 8005454:	f7fb fb1e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005458:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 800545c:	2060      	movs	r0, #96	@ 0x60
 800545e:	f7fb fb19 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005462:	2101      	movs	r1, #1
 8005464:	2061      	movs	r0, #97	@ 0x61
 8005466:	f7fb fb15 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 800546a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800546e:	2090      	movs	r0, #144	@ 0x90
 8005470:	f7fb fb10 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8005474:	f44f 7185 	mov.w	r1, #266	@ 0x10a
 8005478:	2092      	movs	r0, #146	@ 0x92
 800547a:	f7fb fb0b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 800547e:	2104      	movs	r1, #4
 8005480:	2093      	movs	r0, #147	@ 0x93
 8005482:	f7fb fb07 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8005486:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800548a:	20a0      	movs	r0, #160	@ 0xa0
 800548c:	f7fb fb02 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005490:	2101      	movs	r1, #1
 8005492:	2007      	movs	r0, #7
 8005494:	f7fb fafe 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005498:	2121      	movs	r1, #33	@ 0x21
 800549a:	2007      	movs	r0, #7
 800549c:	f7fb fafa 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80054a0:	2123      	movs	r1, #35	@ 0x23
 80054a2:	2007      	movs	r0, #7
 80054a4:	f7fb faf6 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80054a8:	2133      	movs	r1, #51	@ 0x33
 80054aa:	2007      	movs	r0, #7
 80054ac:	f7fb faf2 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80054b0:	f240 1133 	movw	r1, #307	@ 0x133
 80054b4:	2007      	movs	r0, #7
 80054b6:	f7fb faed 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80054ba:	2100      	movs	r1, #0
 80054bc:	20a0      	movs	r0, #160	@ 0xa0
 80054be:	f7fb fae9 	bl	8000a94 <LCD_WriteReg>
 80054c2:	f000 bc6b 	b.w	8005d9c <LCD_Init+0x3e34>
 80054c6:	bf00      	nop
 80054c8:	20000084 	.word	0x20000084
	} else if (lcddev.id == 0x4535) {
 80054cc:	4b5b      	ldr	r3, [pc, #364]	@ (800563c <LCD_Init+0x36d4>)
 80054ce:	889b      	ldrh	r3, [r3, #4]
 80054d0:	f244 5235 	movw	r2, #17717	@ 0x4535
 80054d4:	4293      	cmp	r3, r2
 80054d6:	f040 80b3 	bne.w	8005640 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80054da:	2130      	movs	r1, #48	@ 0x30
 80054dc:	2015      	movs	r0, #21
 80054de:	f7fb fad9 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80054e2:	2110      	movs	r1, #16
 80054e4:	209a      	movs	r0, #154	@ 0x9a
 80054e6:	f7fb fad5 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80054ea:	2120      	movs	r1, #32
 80054ec:	2011      	movs	r0, #17
 80054ee:	f7fb fad1 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80054f2:	f243 4128 	movw	r1, #13352	@ 0x3428
 80054f6:	2010      	movs	r0, #16
 80054f8:	f7fb facc 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80054fc:	2102      	movs	r1, #2
 80054fe:	2012      	movs	r0, #18
 8005500:	f7fb fac8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005504:	f241 0138 	movw	r1, #4152	@ 0x1038
 8005508:	2013      	movs	r0, #19
 800550a:	f7fb fac3 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(40);
 800550e:	2028      	movs	r0, #40	@ 0x28
 8005510:	f001 fbee 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005514:	2112      	movs	r1, #18
 8005516:	2012      	movs	r0, #18
 8005518:	f7fb fabc 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(40);
 800551c:	2028      	movs	r0, #40	@ 0x28
 800551e:	f001 fbe7 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005522:	f243 4120 	movw	r1, #13344	@ 0x3420
 8005526:	2010      	movs	r0, #16
 8005528:	f7fb fab4 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800552c:	f243 0138 	movw	r1, #12344	@ 0x3038
 8005530:	2013      	movs	r0, #19
 8005532:	f7fb faaf 	bl	8000a94 <LCD_WriteReg>
		HAL_Delay(70);
 8005536:	2046      	movs	r0, #70	@ 0x46
 8005538:	f001 fbda 	bl	8006cf0 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800553c:	2100      	movs	r1, #0
 800553e:	2030      	movs	r0, #48	@ 0x30
 8005540:	f7fb faa8 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005544:	f240 4102 	movw	r1, #1026	@ 0x402
 8005548:	2031      	movs	r0, #49	@ 0x31
 800554a:	f7fb faa3 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800554e:	f240 3107 	movw	r1, #775	@ 0x307
 8005552:	2032      	movs	r0, #50	@ 0x32
 8005554:	f7fb fa9e 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8005558:	f44f 7141 	mov.w	r1, #772	@ 0x304
 800555c:	2033      	movs	r0, #51	@ 0x33
 800555e:	f7fb fa99 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8005562:	2104      	movs	r1, #4
 8005564:	2034      	movs	r0, #52	@ 0x34
 8005566:	f7fb fa95 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 800556a:	f240 4101 	movw	r1, #1025	@ 0x401
 800556e:	2035      	movs	r0, #53	@ 0x35
 8005570:	f7fb fa90 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005574:	f240 7107 	movw	r1, #1799	@ 0x707
 8005578:	2036      	movs	r0, #54	@ 0x36
 800557a:	f7fb fa8b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800557e:	f240 3105 	movw	r1, #773	@ 0x305
 8005582:	2037      	movs	r0, #55	@ 0x37
 8005584:	f7fb fa86 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005588:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 800558c:	2038      	movs	r0, #56	@ 0x38
 800558e:	f7fb fa81 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8005592:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8005596:	2039      	movs	r0, #57	@ 0x39
 8005598:	f7fb fa7c 	bl	8000a94 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 800559c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055a0:	2001      	movs	r0, #1
 80055a2:	f7fb fa77 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80055a6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80055aa:	2002      	movs	r0, #2
 80055ac:	f7fb fa72 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80055b0:	f241 0130 	movw	r1, #4144	@ 0x1030
 80055b4:	2003      	movs	r0, #3
 80055b6:	f7fb fa6d 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80055ba:	f640 0108 	movw	r1, #2056	@ 0x808
 80055be:	2008      	movs	r0, #8
 80055c0:	f7fb fa68 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80055c4:	2108      	movs	r1, #8
 80055c6:	200a      	movs	r0, #10
 80055c8:	f7fb fa64 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80055cc:	f44f 511c 	mov.w	r1, #9984	@ 0x2700
 80055d0:	2060      	movs	r0, #96	@ 0x60
 80055d2:	f7fb fa5f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80055d6:	2101      	movs	r1, #1
 80055d8:	2061      	movs	r0, #97	@ 0x61
 80055da:	f7fb fa5b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80055de:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 80055e2:	2090      	movs	r0, #144	@ 0x90
 80055e4:	f7fb fa56 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80055e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055ec:	2092      	movs	r0, #146	@ 0x92
 80055ee:	f7fb fa51 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80055f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80055f6:	2093      	movs	r0, #147	@ 0x93
 80055f8:	f7fb fa4c 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80055fc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8005600:	20a0      	movs	r0, #160	@ 0xa0
 8005602:	f7fb fa47 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005606:	2110      	movs	r1, #16
 8005608:	20a3      	movs	r0, #163	@ 0xa3
 800560a:	f7fb fa43 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800560e:	2101      	movs	r1, #1
 8005610:	2007      	movs	r0, #7
 8005612:	f7fb fa3f 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005616:	2121      	movs	r1, #33	@ 0x21
 8005618:	2007      	movs	r0, #7
 800561a:	f7fb fa3b 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800561e:	2123      	movs	r1, #35	@ 0x23
 8005620:	2007      	movs	r0, #7
 8005622:	f7fb fa37 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005626:	2133      	movs	r1, #51	@ 0x33
 8005628:	2007      	movs	r0, #7
 800562a:	f7fb fa33 	bl	8000a94 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800562e:	f240 1133 	movw	r1, #307	@ 0x133
 8005632:	2007      	movs	r0, #7
 8005634:	f7fb fa2e 	bl	8000a94 <LCD_WriteReg>
 8005638:	e3b0      	b.n	8005d9c <LCD_Init+0x3e34>
 800563a:	bf00      	nop
 800563c:	20000084 	.word	0x20000084
	} else if (lcddev.id == 0X1963) {
 8005640:	4ba8      	ldr	r3, [pc, #672]	@ (80058e4 <LCD_Init+0x397c>)
 8005642:	889b      	ldrh	r3, [r3, #4]
 8005644:	f641 1263 	movw	r2, #6499	@ 0x1963
 8005648:	4293      	cmp	r3, r2
 800564a:	f040 83a7 	bne.w	8005d9c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800564e:	20e2      	movs	r0, #226	@ 0xe2
 8005650:	f7fb f994 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8005654:	4ba4      	ldr	r3, [pc, #656]	@ (80058e8 <LCD_Init+0x3980>)
 8005656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800565a:	611a      	str	r2, [r3, #16]
 800565c:	4ba2      	ldr	r3, [pc, #648]	@ (80058e8 <LCD_Init+0x3980>)
 800565e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005662:	615a      	str	r2, [r3, #20]
 8005664:	4ba1      	ldr	r3, [pc, #644]	@ (80058ec <LCD_Init+0x3984>)
 8005666:	221d      	movs	r2, #29
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	4b9f      	ldr	r3, [pc, #636]	@ (80058e8 <LCD_Init+0x3980>)
 800566c:	2280      	movs	r2, #128	@ 0x80
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	4b9d      	ldr	r3, [pc, #628]	@ (80058e8 <LCD_Init+0x3980>)
 8005672:	2280      	movs	r2, #128	@ 0x80
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	4b9c      	ldr	r3, [pc, #624]	@ (80058e8 <LCD_Init+0x3980>)
 8005678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800567c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 800567e:	4b9a      	ldr	r3, [pc, #616]	@ (80058e8 <LCD_Init+0x3980>)
 8005680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005684:	611a      	str	r2, [r3, #16]
 8005686:	4b98      	ldr	r3, [pc, #608]	@ (80058e8 <LCD_Init+0x3980>)
 8005688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800568c:	615a      	str	r2, [r3, #20]
 800568e:	4b97      	ldr	r3, [pc, #604]	@ (80058ec <LCD_Init+0x3984>)
 8005690:	2202      	movs	r2, #2
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	4b94      	ldr	r3, [pc, #592]	@ (80058e8 <LCD_Init+0x3980>)
 8005696:	2280      	movs	r2, #128	@ 0x80
 8005698:	615a      	str	r2, [r3, #20]
 800569a:	4b93      	ldr	r3, [pc, #588]	@ (80058e8 <LCD_Init+0x3980>)
 800569c:	2280      	movs	r2, #128	@ 0x80
 800569e:	611a      	str	r2, [r3, #16]
 80056a0:	4b91      	ldr	r3, [pc, #580]	@ (80058e8 <LCD_Init+0x3980>)
 80056a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80056a8:	4b8f      	ldr	r3, [pc, #572]	@ (80058e8 <LCD_Init+0x3980>)
 80056aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056ae:	611a      	str	r2, [r3, #16]
 80056b0:	4b8d      	ldr	r3, [pc, #564]	@ (80058e8 <LCD_Init+0x3980>)
 80056b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056b6:	615a      	str	r2, [r3, #20]
 80056b8:	4b8c      	ldr	r3, [pc, #560]	@ (80058ec <LCD_Init+0x3984>)
 80056ba:	2204      	movs	r2, #4
 80056bc:	60da      	str	r2, [r3, #12]
 80056be:	4b8a      	ldr	r3, [pc, #552]	@ (80058e8 <LCD_Init+0x3980>)
 80056c0:	2280      	movs	r2, #128	@ 0x80
 80056c2:	615a      	str	r2, [r3, #20]
 80056c4:	4b88      	ldr	r3, [pc, #544]	@ (80058e8 <LCD_Init+0x3980>)
 80056c6:	2280      	movs	r2, #128	@ 0x80
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	4b87      	ldr	r3, [pc, #540]	@ (80058e8 <LCD_Init+0x3980>)
 80056cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056d0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80056d2:	2001      	movs	r0, #1
 80056d4:	f001 fb0c 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80056d8:	20e0      	movs	r0, #224	@ 0xe0
 80056da:	f7fb f94f 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80056de:	4b82      	ldr	r3, [pc, #520]	@ (80058e8 <LCD_Init+0x3980>)
 80056e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056e4:	611a      	str	r2, [r3, #16]
 80056e6:	4b80      	ldr	r3, [pc, #512]	@ (80058e8 <LCD_Init+0x3980>)
 80056e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ec:	615a      	str	r2, [r3, #20]
 80056ee:	4b7f      	ldr	r3, [pc, #508]	@ (80058ec <LCD_Init+0x3984>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	4b7c      	ldr	r3, [pc, #496]	@ (80058e8 <LCD_Init+0x3980>)
 80056f6:	2280      	movs	r2, #128	@ 0x80
 80056f8:	615a      	str	r2, [r3, #20]
 80056fa:	4b7b      	ldr	r3, [pc, #492]	@ (80058e8 <LCD_Init+0x3980>)
 80056fc:	2280      	movs	r2, #128	@ 0x80
 80056fe:	611a      	str	r2, [r3, #16]
 8005700:	4b79      	ldr	r3, [pc, #484]	@ (80058e8 <LCD_Init+0x3980>)
 8005702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005706:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005708:	200a      	movs	r0, #10
 800570a:	f001 faf1 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800570e:	20e0      	movs	r0, #224	@ 0xe0
 8005710:	f7fb f934 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005714:	4b74      	ldr	r3, [pc, #464]	@ (80058e8 <LCD_Init+0x3980>)
 8005716:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800571a:	611a      	str	r2, [r3, #16]
 800571c:	4b72      	ldr	r3, [pc, #456]	@ (80058e8 <LCD_Init+0x3980>)
 800571e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005722:	615a      	str	r2, [r3, #20]
 8005724:	4b71      	ldr	r3, [pc, #452]	@ (80058ec <LCD_Init+0x3984>)
 8005726:	2203      	movs	r2, #3
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	4b6f      	ldr	r3, [pc, #444]	@ (80058e8 <LCD_Init+0x3980>)
 800572c:	2280      	movs	r2, #128	@ 0x80
 800572e:	615a      	str	r2, [r3, #20]
 8005730:	4b6d      	ldr	r3, [pc, #436]	@ (80058e8 <LCD_Init+0x3980>)
 8005732:	2280      	movs	r2, #128	@ 0x80
 8005734:	611a      	str	r2, [r3, #16]
 8005736:	4b6c      	ldr	r3, [pc, #432]	@ (80058e8 <LCD_Init+0x3980>)
 8005738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800573c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800573e:	200c      	movs	r0, #12
 8005740:	f001 fad6 	bl	8006cf0 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005744:	2001      	movs	r0, #1
 8005746:	f7fb f919 	bl	800097c <LCD_WR_REG>
		HAL_Delay(10);
 800574a:	200a      	movs	r0, #10
 800574c:	f001 fad0 	bl	8006cf0 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005750:	20e6      	movs	r0, #230	@ 0xe6
 8005752:	f7fb f913 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005756:	4b64      	ldr	r3, [pc, #400]	@ (80058e8 <LCD_Init+0x3980>)
 8005758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800575c:	611a      	str	r2, [r3, #16]
 800575e:	4b62      	ldr	r3, [pc, #392]	@ (80058e8 <LCD_Init+0x3980>)
 8005760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005764:	615a      	str	r2, [r3, #20]
 8005766:	4b61      	ldr	r3, [pc, #388]	@ (80058ec <LCD_Init+0x3984>)
 8005768:	222f      	movs	r2, #47	@ 0x2f
 800576a:	60da      	str	r2, [r3, #12]
 800576c:	4b5e      	ldr	r3, [pc, #376]	@ (80058e8 <LCD_Init+0x3980>)
 800576e:	2280      	movs	r2, #128	@ 0x80
 8005770:	615a      	str	r2, [r3, #20]
 8005772:	4b5d      	ldr	r3, [pc, #372]	@ (80058e8 <LCD_Init+0x3980>)
 8005774:	2280      	movs	r2, #128	@ 0x80
 8005776:	611a      	str	r2, [r3, #16]
 8005778:	4b5b      	ldr	r3, [pc, #364]	@ (80058e8 <LCD_Init+0x3980>)
 800577a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800577e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005780:	4b59      	ldr	r3, [pc, #356]	@ (80058e8 <LCD_Init+0x3980>)
 8005782:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	4b57      	ldr	r3, [pc, #348]	@ (80058e8 <LCD_Init+0x3980>)
 800578a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800578e:	615a      	str	r2, [r3, #20]
 8005790:	4b56      	ldr	r3, [pc, #344]	@ (80058ec <LCD_Init+0x3984>)
 8005792:	22ff      	movs	r2, #255	@ 0xff
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	4b54      	ldr	r3, [pc, #336]	@ (80058e8 <LCD_Init+0x3980>)
 8005798:	2280      	movs	r2, #128	@ 0x80
 800579a:	615a      	str	r2, [r3, #20]
 800579c:	4b52      	ldr	r3, [pc, #328]	@ (80058e8 <LCD_Init+0x3980>)
 800579e:	2280      	movs	r2, #128	@ 0x80
 80057a0:	611a      	str	r2, [r3, #16]
 80057a2:	4b51      	ldr	r3, [pc, #324]	@ (80058e8 <LCD_Init+0x3980>)
 80057a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057a8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80057aa:	4b4f      	ldr	r3, [pc, #316]	@ (80058e8 <LCD_Init+0x3980>)
 80057ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057b0:	611a      	str	r2, [r3, #16]
 80057b2:	4b4d      	ldr	r3, [pc, #308]	@ (80058e8 <LCD_Init+0x3980>)
 80057b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057b8:	615a      	str	r2, [r3, #20]
 80057ba:	4b4c      	ldr	r3, [pc, #304]	@ (80058ec <LCD_Init+0x3984>)
 80057bc:	22ff      	movs	r2, #255	@ 0xff
 80057be:	60da      	str	r2, [r3, #12]
 80057c0:	4b49      	ldr	r3, [pc, #292]	@ (80058e8 <LCD_Init+0x3980>)
 80057c2:	2280      	movs	r2, #128	@ 0x80
 80057c4:	615a      	str	r2, [r3, #20]
 80057c6:	4b48      	ldr	r3, [pc, #288]	@ (80058e8 <LCD_Init+0x3980>)
 80057c8:	2280      	movs	r2, #128	@ 0x80
 80057ca:	611a      	str	r2, [r3, #16]
 80057cc:	4b46      	ldr	r3, [pc, #280]	@ (80058e8 <LCD_Init+0x3980>)
 80057ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80057d4:	20b0      	movs	r0, #176	@ 0xb0
 80057d6:	f7fb f8d1 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80057da:	4b43      	ldr	r3, [pc, #268]	@ (80058e8 <LCD_Init+0x3980>)
 80057dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057e0:	611a      	str	r2, [r3, #16]
 80057e2:	4b41      	ldr	r3, [pc, #260]	@ (80058e8 <LCD_Init+0x3980>)
 80057e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057e8:	615a      	str	r2, [r3, #20]
 80057ea:	4b40      	ldr	r3, [pc, #256]	@ (80058ec <LCD_Init+0x3984>)
 80057ec:	2220      	movs	r2, #32
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	4b3d      	ldr	r3, [pc, #244]	@ (80058e8 <LCD_Init+0x3980>)
 80057f2:	2280      	movs	r2, #128	@ 0x80
 80057f4:	615a      	str	r2, [r3, #20]
 80057f6:	4b3c      	ldr	r3, [pc, #240]	@ (80058e8 <LCD_Init+0x3980>)
 80057f8:	2280      	movs	r2, #128	@ 0x80
 80057fa:	611a      	str	r2, [r3, #16]
 80057fc:	4b3a      	ldr	r3, [pc, #232]	@ (80058e8 <LCD_Init+0x3980>)
 80057fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005802:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005804:	4b38      	ldr	r3, [pc, #224]	@ (80058e8 <LCD_Init+0x3980>)
 8005806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800580a:	611a      	str	r2, [r3, #16]
 800580c:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <LCD_Init+0x3980>)
 800580e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005812:	615a      	str	r2, [r3, #20]
 8005814:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <LCD_Init+0x3984>)
 8005816:	2200      	movs	r2, #0
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <LCD_Init+0x3980>)
 800581c:	2280      	movs	r2, #128	@ 0x80
 800581e:	615a      	str	r2, [r3, #20]
 8005820:	4b31      	ldr	r3, [pc, #196]	@ (80058e8 <LCD_Init+0x3980>)
 8005822:	2280      	movs	r2, #128	@ 0x80
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	4b30      	ldr	r3, [pc, #192]	@ (80058e8 <LCD_Init+0x3980>)
 8005828:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800582c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800582e:	4b2e      	ldr	r3, [pc, #184]	@ (80058e8 <LCD_Init+0x3980>)
 8005830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005834:	611a      	str	r2, [r3, #16]
 8005836:	4b2c      	ldr	r3, [pc, #176]	@ (80058e8 <LCD_Init+0x3980>)
 8005838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800583c:	615a      	str	r2, [r3, #20]
 800583e:	4b2b      	ldr	r3, [pc, #172]	@ (80058ec <LCD_Init+0x3984>)
 8005840:	2203      	movs	r2, #3
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	4b28      	ldr	r3, [pc, #160]	@ (80058e8 <LCD_Init+0x3980>)
 8005846:	2280      	movs	r2, #128	@ 0x80
 8005848:	615a      	str	r2, [r3, #20]
 800584a:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <LCD_Init+0x3980>)
 800584c:	2280      	movs	r2, #128	@ 0x80
 800584e:	611a      	str	r2, [r3, #16]
 8005850:	4b25      	ldr	r3, [pc, #148]	@ (80058e8 <LCD_Init+0x3980>)
 8005852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005856:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005858:	4b23      	ldr	r3, [pc, #140]	@ (80058e8 <LCD_Init+0x3980>)
 800585a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800585e:	611a      	str	r2, [r3, #16]
 8005860:	4b21      	ldr	r3, [pc, #132]	@ (80058e8 <LCD_Init+0x3980>)
 8005862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005866:	615a      	str	r2, [r3, #20]
 8005868:	4b20      	ldr	r3, [pc, #128]	@ (80058ec <LCD_Init+0x3984>)
 800586a:	f240 321f 	movw	r2, #799	@ 0x31f
 800586e:	60da      	str	r2, [r3, #12]
 8005870:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <LCD_Init+0x3980>)
 8005872:	2280      	movs	r2, #128	@ 0x80
 8005874:	615a      	str	r2, [r3, #20]
 8005876:	4b1c      	ldr	r3, [pc, #112]	@ (80058e8 <LCD_Init+0x3980>)
 8005878:	2280      	movs	r2, #128	@ 0x80
 800587a:	611a      	str	r2, [r3, #16]
 800587c:	4b1a      	ldr	r3, [pc, #104]	@ (80058e8 <LCD_Init+0x3980>)
 800587e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005882:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005884:	4b18      	ldr	r3, [pc, #96]	@ (80058e8 <LCD_Init+0x3980>)
 8005886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800588a:	611a      	str	r2, [r3, #16]
 800588c:	4b16      	ldr	r3, [pc, #88]	@ (80058e8 <LCD_Init+0x3980>)
 800588e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005892:	615a      	str	r2, [r3, #20]
 8005894:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <LCD_Init+0x3984>)
 8005896:	2201      	movs	r2, #1
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	4b13      	ldr	r3, [pc, #76]	@ (80058e8 <LCD_Init+0x3980>)
 800589c:	2280      	movs	r2, #128	@ 0x80
 800589e:	615a      	str	r2, [r3, #20]
 80058a0:	4b11      	ldr	r3, [pc, #68]	@ (80058e8 <LCD_Init+0x3980>)
 80058a2:	2280      	movs	r2, #128	@ 0x80
 80058a4:	611a      	str	r2, [r3, #16]
 80058a6:	4b10      	ldr	r3, [pc, #64]	@ (80058e8 <LCD_Init+0x3980>)
 80058a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ac:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80058ae:	4b0e      	ldr	r3, [pc, #56]	@ (80058e8 <LCD_Init+0x3980>)
 80058b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058b4:	611a      	str	r2, [r3, #16]
 80058b6:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <LCD_Init+0x3980>)
 80058b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058bc:	615a      	str	r2, [r3, #20]
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <LCD_Init+0x3984>)
 80058c0:	f240 12df 	movw	r2, #479	@ 0x1df
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <LCD_Init+0x3980>)
 80058c8:	2280      	movs	r2, #128	@ 0x80
 80058ca:	615a      	str	r2, [r3, #20]
 80058cc:	4b06      	ldr	r3, [pc, #24]	@ (80058e8 <LCD_Init+0x3980>)
 80058ce:	2280      	movs	r2, #128	@ 0x80
 80058d0:	611a      	str	r2, [r3, #16]
 80058d2:	4b05      	ldr	r3, [pc, #20]	@ (80058e8 <LCD_Init+0x3980>)
 80058d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058d8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80058da:	4b03      	ldr	r3, [pc, #12]	@ (80058e8 <LCD_Init+0x3980>)
 80058dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058e0:	e006      	b.n	80058f0 <LCD_Init+0x3988>
 80058e2:	bf00      	nop
 80058e4:	20000084 	.word	0x20000084
 80058e8:	40011000 	.word	0x40011000
 80058ec:	40010c00 	.word	0x40010c00
 80058f0:	611a      	str	r2, [r3, #16]
 80058f2:	4ba3      	ldr	r3, [pc, #652]	@ (8005b80 <LCD_Init+0x3c18>)
 80058f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058f8:	615a      	str	r2, [r3, #20]
 80058fa:	4ba2      	ldr	r3, [pc, #648]	@ (8005b84 <LCD_Init+0x3c1c>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	60da      	str	r2, [r3, #12]
 8005900:	4b9f      	ldr	r3, [pc, #636]	@ (8005b80 <LCD_Init+0x3c18>)
 8005902:	2280      	movs	r2, #128	@ 0x80
 8005904:	615a      	str	r2, [r3, #20]
 8005906:	4b9e      	ldr	r3, [pc, #632]	@ (8005b80 <LCD_Init+0x3c18>)
 8005908:	2280      	movs	r2, #128	@ 0x80
 800590a:	611a      	str	r2, [r3, #16]
 800590c:	4b9c      	ldr	r3, [pc, #624]	@ (8005b80 <LCD_Init+0x3c18>)
 800590e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005912:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005914:	20b4      	movs	r0, #180	@ 0xb4
 8005916:	f7fb f831 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800591a:	4b99      	ldr	r3, [pc, #612]	@ (8005b80 <LCD_Init+0x3c18>)
 800591c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005920:	611a      	str	r2, [r3, #16]
 8005922:	4b97      	ldr	r3, [pc, #604]	@ (8005b80 <LCD_Init+0x3c18>)
 8005924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005928:	615a      	str	r2, [r3, #20]
 800592a:	4b96      	ldr	r3, [pc, #600]	@ (8005b84 <LCD_Init+0x3c1c>)
 800592c:	2204      	movs	r2, #4
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	4b93      	ldr	r3, [pc, #588]	@ (8005b80 <LCD_Init+0x3c18>)
 8005932:	2280      	movs	r2, #128	@ 0x80
 8005934:	615a      	str	r2, [r3, #20]
 8005936:	4b92      	ldr	r3, [pc, #584]	@ (8005b80 <LCD_Init+0x3c18>)
 8005938:	2280      	movs	r2, #128	@ 0x80
 800593a:	611a      	str	r2, [r3, #16]
 800593c:	4b90      	ldr	r3, [pc, #576]	@ (8005b80 <LCD_Init+0x3c18>)
 800593e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005942:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005944:	4b8e      	ldr	r3, [pc, #568]	@ (8005b80 <LCD_Init+0x3c18>)
 8005946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	4b8c      	ldr	r3, [pc, #560]	@ (8005b80 <LCD_Init+0x3c18>)
 800594e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005952:	615a      	str	r2, [r3, #20]
 8005954:	4b8b      	ldr	r3, [pc, #556]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005956:	f240 421f 	movw	r2, #1055	@ 0x41f
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	4b88      	ldr	r3, [pc, #544]	@ (8005b80 <LCD_Init+0x3c18>)
 800595e:	2280      	movs	r2, #128	@ 0x80
 8005960:	615a      	str	r2, [r3, #20]
 8005962:	4b87      	ldr	r3, [pc, #540]	@ (8005b80 <LCD_Init+0x3c18>)
 8005964:	2280      	movs	r2, #128	@ 0x80
 8005966:	611a      	str	r2, [r3, #16]
 8005968:	4b85      	ldr	r3, [pc, #532]	@ (8005b80 <LCD_Init+0x3c18>)
 800596a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800596e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005970:	4b83      	ldr	r3, [pc, #524]	@ (8005b80 <LCD_Init+0x3c18>)
 8005972:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005976:	611a      	str	r2, [r3, #16]
 8005978:	4b81      	ldr	r3, [pc, #516]	@ (8005b80 <LCD_Init+0x3c18>)
 800597a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800597e:	615a      	str	r2, [r3, #20]
 8005980:	4b80      	ldr	r3, [pc, #512]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005982:	2200      	movs	r2, #0
 8005984:	60da      	str	r2, [r3, #12]
 8005986:	4b7e      	ldr	r3, [pc, #504]	@ (8005b80 <LCD_Init+0x3c18>)
 8005988:	2280      	movs	r2, #128	@ 0x80
 800598a:	615a      	str	r2, [r3, #20]
 800598c:	4b7c      	ldr	r3, [pc, #496]	@ (8005b80 <LCD_Init+0x3c18>)
 800598e:	2280      	movs	r2, #128	@ 0x80
 8005990:	611a      	str	r2, [r3, #16]
 8005992:	4b7b      	ldr	r3, [pc, #492]	@ (8005b80 <LCD_Init+0x3c18>)
 8005994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005998:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 800599a:	4b79      	ldr	r3, [pc, #484]	@ (8005b80 <LCD_Init+0x3c18>)
 800599c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059a0:	611a      	str	r2, [r3, #16]
 80059a2:	4b77      	ldr	r3, [pc, #476]	@ (8005b80 <LCD_Init+0x3c18>)
 80059a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059a8:	615a      	str	r2, [r3, #20]
 80059aa:	4b76      	ldr	r3, [pc, #472]	@ (8005b84 <LCD_Init+0x3c1c>)
 80059ac:	222e      	movs	r2, #46	@ 0x2e
 80059ae:	60da      	str	r2, [r3, #12]
 80059b0:	4b73      	ldr	r3, [pc, #460]	@ (8005b80 <LCD_Init+0x3c18>)
 80059b2:	2280      	movs	r2, #128	@ 0x80
 80059b4:	615a      	str	r2, [r3, #20]
 80059b6:	4b72      	ldr	r3, [pc, #456]	@ (8005b80 <LCD_Init+0x3c18>)
 80059b8:	2280      	movs	r2, #128	@ 0x80
 80059ba:	611a      	str	r2, [r3, #16]
 80059bc:	4b70      	ldr	r3, [pc, #448]	@ (8005b80 <LCD_Init+0x3c18>)
 80059be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059c2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80059c4:	4b6e      	ldr	r3, [pc, #440]	@ (8005b80 <LCD_Init+0x3c18>)
 80059c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059ca:	611a      	str	r2, [r3, #16]
 80059cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005b80 <LCD_Init+0x3c18>)
 80059ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059d2:	615a      	str	r2, [r3, #20]
 80059d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005b84 <LCD_Init+0x3c1c>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	4b69      	ldr	r3, [pc, #420]	@ (8005b80 <LCD_Init+0x3c18>)
 80059dc:	2280      	movs	r2, #128	@ 0x80
 80059de:	615a      	str	r2, [r3, #20]
 80059e0:	4b67      	ldr	r3, [pc, #412]	@ (8005b80 <LCD_Init+0x3c18>)
 80059e2:	2280      	movs	r2, #128	@ 0x80
 80059e4:	611a      	str	r2, [r3, #16]
 80059e6:	4b66      	ldr	r3, [pc, #408]	@ (8005b80 <LCD_Init+0x3c18>)
 80059e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ec:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80059ee:	4b64      	ldr	r3, [pc, #400]	@ (8005b80 <LCD_Init+0x3c18>)
 80059f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	4b62      	ldr	r3, [pc, #392]	@ (8005b80 <LCD_Init+0x3c18>)
 80059f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059fc:	615a      	str	r2, [r3, #20]
 80059fe:	4b61      	ldr	r3, [pc, #388]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	60da      	str	r2, [r3, #12]
 8005a04:	4b5e      	ldr	r3, [pc, #376]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a06:	2280      	movs	r2, #128	@ 0x80
 8005a08:	615a      	str	r2, [r3, #20]
 8005a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a0c:	2280      	movs	r2, #128	@ 0x80
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	4b5b      	ldr	r3, [pc, #364]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a16:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a18:	4b59      	ldr	r3, [pc, #356]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a1e:	611a      	str	r2, [r3, #16]
 8005a20:	4b57      	ldr	r3, [pc, #348]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a26:	615a      	str	r2, [r3, #20]
 8005a28:	4b56      	ldr	r3, [pc, #344]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	4b54      	ldr	r3, [pc, #336]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a30:	2280      	movs	r2, #128	@ 0x80
 8005a32:	615a      	str	r2, [r3, #20]
 8005a34:	4b52      	ldr	r3, [pc, #328]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a36:	2280      	movs	r2, #128	@ 0x80
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	4b51      	ldr	r3, [pc, #324]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a40:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005a42:	4b4f      	ldr	r3, [pc, #316]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a48:	611a      	str	r2, [r3, #16]
 8005a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a50:	615a      	str	r2, [r3, #20]
 8005a52:	4b4c      	ldr	r3, [pc, #304]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	60da      	str	r2, [r3, #12]
 8005a58:	4b49      	ldr	r3, [pc, #292]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a5a:	2280      	movs	r2, #128	@ 0x80
 8005a5c:	615a      	str	r2, [r3, #20]
 8005a5e:	4b48      	ldr	r3, [pc, #288]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a60:	2280      	movs	r2, #128	@ 0x80
 8005a62:	611a      	str	r2, [r3, #16]
 8005a64:	4b46      	ldr	r3, [pc, #280]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a6a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005a6c:	20b6      	movs	r0, #182	@ 0xb6
 8005a6e:	f7fa ff85 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005a72:	4b43      	ldr	r3, [pc, #268]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a78:	611a      	str	r2, [r3, #16]
 8005a7a:	4b41      	ldr	r3, [pc, #260]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a80:	615a      	str	r2, [r3, #20]
 8005a82:	4b40      	ldr	r3, [pc, #256]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005a84:	2202      	movs	r2, #2
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	4b3d      	ldr	r3, [pc, #244]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a8a:	2280      	movs	r2, #128	@ 0x80
 8005a8c:	615a      	str	r2, [r3, #20]
 8005a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a90:	2280      	movs	r2, #128	@ 0x80
 8005a92:	611a      	str	r2, [r3, #16]
 8005a94:	4b3a      	ldr	r3, [pc, #232]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a9a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005a9c:	4b38      	ldr	r3, [pc, #224]	@ (8005b80 <LCD_Init+0x3c18>)
 8005a9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	4b36      	ldr	r3, [pc, #216]	@ (8005b80 <LCD_Init+0x3c18>)
 8005aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aaa:	615a      	str	r2, [r3, #20]
 8005aac:	4b35      	ldr	r3, [pc, #212]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005aae:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8005ab2:	60da      	str	r2, [r3, #12]
 8005ab4:	4b32      	ldr	r3, [pc, #200]	@ (8005b80 <LCD_Init+0x3c18>)
 8005ab6:	2280      	movs	r2, #128	@ 0x80
 8005ab8:	615a      	str	r2, [r3, #20]
 8005aba:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <LCD_Init+0x3c18>)
 8005abc:	2280      	movs	r2, #128	@ 0x80
 8005abe:	611a      	str	r2, [r3, #16]
 8005ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8005b80 <LCD_Init+0x3c18>)
 8005ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ac6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <LCD_Init+0x3c18>)
 8005aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ace:	611a      	str	r2, [r3, #16]
 8005ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b80 <LCD_Init+0x3c18>)
 8005ad2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad6:	615a      	str	r2, [r3, #20]
 8005ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	4b28      	ldr	r3, [pc, #160]	@ (8005b80 <LCD_Init+0x3c18>)
 8005ae0:	2280      	movs	r2, #128	@ 0x80
 8005ae2:	615a      	str	r2, [r3, #20]
 8005ae4:	4b26      	ldr	r3, [pc, #152]	@ (8005b80 <LCD_Init+0x3c18>)
 8005ae6:	2280      	movs	r2, #128	@ 0x80
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	4b25      	ldr	r3, [pc, #148]	@ (8005b80 <LCD_Init+0x3c18>)
 8005aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005af0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005af2:	4b23      	ldr	r3, [pc, #140]	@ (8005b80 <LCD_Init+0x3c18>)
 8005af4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	4b21      	ldr	r3, [pc, #132]	@ (8005b80 <LCD_Init+0x3c18>)
 8005afc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b00:	615a      	str	r2, [r3, #20]
 8005b02:	4b20      	ldr	r3, [pc, #128]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005b04:	2217      	movs	r2, #23
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	4b1d      	ldr	r3, [pc, #116]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b0a:	2280      	movs	r2, #128	@ 0x80
 8005b0c:	615a      	str	r2, [r3, #20]
 8005b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b10:	2280      	movs	r2, #128	@ 0x80
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	4b1a      	ldr	r3, [pc, #104]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005b1c:	4b18      	ldr	r3, [pc, #96]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b22:	611a      	str	r2, [r3, #16]
 8005b24:	4b16      	ldr	r3, [pc, #88]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b2a:	615a      	str	r2, [r3, #20]
 8005b2c:	4b15      	ldr	r3, [pc, #84]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005b2e:	2215      	movs	r2, #21
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b34:	2280      	movs	r2, #128	@ 0x80
 8005b36:	615a      	str	r2, [r3, #20]
 8005b38:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b3a:	2280      	movs	r2, #128	@ 0x80
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b44:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b46:	4b0e      	ldr	r3, [pc, #56]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b4c:	611a      	str	r2, [r3, #16]
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b54:	615a      	str	r2, [r3, #20]
 8005b56:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <LCD_Init+0x3c1c>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	60da      	str	r2, [r3, #12]
 8005b5c:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b5e:	2280      	movs	r2, #128	@ 0x80
 8005b60:	615a      	str	r2, [r3, #20]
 8005b62:	4b07      	ldr	r3, [pc, #28]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b64:	2280      	movs	r2, #128	@ 0x80
 8005b66:	611a      	str	r2, [r3, #16]
 8005b68:	4b05      	ldr	r3, [pc, #20]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005b70:	4b03      	ldr	r3, [pc, #12]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b76:	611a      	str	r2, [r3, #16]
 8005b78:	4b01      	ldr	r3, [pc, #4]	@ (8005b80 <LCD_Init+0x3c18>)
 8005b7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b7e:	e003      	b.n	8005b88 <LCD_Init+0x3c20>
 8005b80:	40011000 	.word	0x40011000
 8005b84:	40010c00 	.word	0x40010c00
 8005b88:	615a      	str	r2, [r3, #20]
 8005b8a:	4b8b      	ldr	r3, [pc, #556]	@ (8005db8 <LCD_Init+0x3e50>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	60da      	str	r2, [r3, #12]
 8005b90:	4b8a      	ldr	r3, [pc, #552]	@ (8005dbc <LCD_Init+0x3e54>)
 8005b92:	2280      	movs	r2, #128	@ 0x80
 8005b94:	615a      	str	r2, [r3, #20]
 8005b96:	4b89      	ldr	r3, [pc, #548]	@ (8005dbc <LCD_Init+0x3e54>)
 8005b98:	2280      	movs	r2, #128	@ 0x80
 8005b9a:	611a      	str	r2, [r3, #16]
 8005b9c:	4b87      	ldr	r3, [pc, #540]	@ (8005dbc <LCD_Init+0x3e54>)
 8005b9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005ba4:	20f0      	movs	r0, #240	@ 0xf0
 8005ba6:	f7fa fee9 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005baa:	4b84      	ldr	r3, [pc, #528]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bb0:	611a      	str	r2, [r3, #16]
 8005bb2:	4b82      	ldr	r3, [pc, #520]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bb8:	615a      	str	r2, [r3, #20]
 8005bba:	4b7f      	ldr	r3, [pc, #508]	@ (8005db8 <LCD_Init+0x3e50>)
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	60da      	str	r2, [r3, #12]
 8005bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bc2:	2280      	movs	r2, #128	@ 0x80
 8005bc4:	615a      	str	r2, [r3, #20]
 8005bc6:	4b7d      	ldr	r3, [pc, #500]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bc8:	2280      	movs	r2, #128	@ 0x80
 8005bca:	611a      	str	r2, [r3, #16]
 8005bcc:	4b7b      	ldr	r3, [pc, #492]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bd2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005bd4:	2029      	movs	r0, #41	@ 0x29
 8005bd6:	f7fa fed1 	bl	800097c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005bda:	20d0      	movs	r0, #208	@ 0xd0
 8005bdc:	f7fa fece 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005be0:	4b76      	ldr	r3, [pc, #472]	@ (8005dbc <LCD_Init+0x3e54>)
 8005be2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be6:	611a      	str	r2, [r3, #16]
 8005be8:	4b74      	ldr	r3, [pc, #464]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bee:	615a      	str	r2, [r3, #20]
 8005bf0:	4b71      	ldr	r3, [pc, #452]	@ (8005db8 <LCD_Init+0x3e50>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	4b71      	ldr	r3, [pc, #452]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bf8:	2280      	movs	r2, #128	@ 0x80
 8005bfa:	615a      	str	r2, [r3, #20]
 8005bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8005dbc <LCD_Init+0x3e54>)
 8005bfe:	2280      	movs	r2, #128	@ 0x80
 8005c00:	611a      	str	r2, [r3, #16]
 8005c02:	4b6e      	ldr	r3, [pc, #440]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c08:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005c0a:	20be      	movs	r0, #190	@ 0xbe
 8005c0c:	f7fa feb6 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005c10:	4b6a      	ldr	r3, [pc, #424]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c16:	611a      	str	r2, [r3, #16]
 8005c18:	4b68      	ldr	r3, [pc, #416]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c1e:	615a      	str	r2, [r3, #20]
 8005c20:	4b65      	ldr	r3, [pc, #404]	@ (8005db8 <LCD_Init+0x3e50>)
 8005c22:	2205      	movs	r2, #5
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	4b65      	ldr	r3, [pc, #404]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c28:	2280      	movs	r2, #128	@ 0x80
 8005c2a:	615a      	str	r2, [r3, #20]
 8005c2c:	4b63      	ldr	r3, [pc, #396]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c2e:	2280      	movs	r2, #128	@ 0x80
 8005c30:	611a      	str	r2, [r3, #16]
 8005c32:	4b62      	ldr	r3, [pc, #392]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005c3a:	4b60      	ldr	r3, [pc, #384]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c40:	611a      	str	r2, [r3, #16]
 8005c42:	4b5e      	ldr	r3, [pc, #376]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c48:	615a      	str	r2, [r3, #20]
 8005c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005db8 <LCD_Init+0x3e50>)
 8005c4c:	22fe      	movs	r2, #254	@ 0xfe
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	4b5a      	ldr	r3, [pc, #360]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c52:	2280      	movs	r2, #128	@ 0x80
 8005c54:	615a      	str	r2, [r3, #20]
 8005c56:	4b59      	ldr	r3, [pc, #356]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c58:	2280      	movs	r2, #128	@ 0x80
 8005c5a:	611a      	str	r2, [r3, #16]
 8005c5c:	4b57      	ldr	r3, [pc, #348]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c62:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005c64:	4b55      	ldr	r3, [pc, #340]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c6a:	611a      	str	r2, [r3, #16]
 8005c6c:	4b53      	ldr	r3, [pc, #332]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c72:	615a      	str	r2, [r3, #20]
 8005c74:	4b50      	ldr	r3, [pc, #320]	@ (8005db8 <LCD_Init+0x3e50>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	4b50      	ldr	r3, [pc, #320]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c7c:	2280      	movs	r2, #128	@ 0x80
 8005c7e:	615a      	str	r2, [r3, #20]
 8005c80:	4b4e      	ldr	r3, [pc, #312]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c82:	2280      	movs	r2, #128	@ 0x80
 8005c84:	611a      	str	r2, [r3, #16]
 8005c86:	4b4d      	ldr	r3, [pc, #308]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c8c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c94:	611a      	str	r2, [r3, #16]
 8005c96:	4b49      	ldr	r3, [pc, #292]	@ (8005dbc <LCD_Init+0x3e54>)
 8005c98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c9c:	615a      	str	r2, [r3, #20]
 8005c9e:	4b46      	ldr	r3, [pc, #280]	@ (8005db8 <LCD_Init+0x3e50>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60da      	str	r2, [r3, #12]
 8005ca4:	4b45      	ldr	r3, [pc, #276]	@ (8005dbc <LCD_Init+0x3e54>)
 8005ca6:	2280      	movs	r2, #128	@ 0x80
 8005ca8:	615a      	str	r2, [r3, #20]
 8005caa:	4b44      	ldr	r3, [pc, #272]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cac:	2280      	movs	r2, #128	@ 0x80
 8005cae:	611a      	str	r2, [r3, #16]
 8005cb0:	4b42      	ldr	r3, [pc, #264]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005cb8:	4b40      	ldr	r3, [pc, #256]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cbe:	611a      	str	r2, [r3, #16]
 8005cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cc6:	615a      	str	r2, [r3, #20]
 8005cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <LCD_Init+0x3e50>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	4b3b      	ldr	r3, [pc, #236]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cd0:	2280      	movs	r2, #128	@ 0x80
 8005cd2:	615a      	str	r2, [r3, #20]
 8005cd4:	4b39      	ldr	r3, [pc, #228]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cd6:	2280      	movs	r2, #128	@ 0x80
 8005cd8:	611a      	str	r2, [r3, #16]
 8005cda:	4b38      	ldr	r3, [pc, #224]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ce0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005ce2:	4b36      	ldr	r3, [pc, #216]	@ (8005dbc <LCD_Init+0x3e54>)
 8005ce4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ce8:	611a      	str	r2, [r3, #16]
 8005cea:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf0:	615a      	str	r2, [r3, #20]
 8005cf2:	4b31      	ldr	r3, [pc, #196]	@ (8005db8 <LCD_Init+0x3e50>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	60da      	str	r2, [r3, #12]
 8005cf8:	4b30      	ldr	r3, [pc, #192]	@ (8005dbc <LCD_Init+0x3e54>)
 8005cfa:	2280      	movs	r2, #128	@ 0x80
 8005cfc:	615a      	str	r2, [r3, #20]
 8005cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d00:	2280      	movs	r2, #128	@ 0x80
 8005d02:	611a      	str	r2, [r3, #16]
 8005d04:	4b2d      	ldr	r3, [pc, #180]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d0a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005d0c:	20b8      	movs	r0, #184	@ 0xb8
 8005d0e:	f7fa fe35 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005d12:	4b2a      	ldr	r3, [pc, #168]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d18:	611a      	str	r2, [r3, #16]
 8005d1a:	4b28      	ldr	r3, [pc, #160]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d20:	615a      	str	r2, [r3, #20]
 8005d22:	4b25      	ldr	r3, [pc, #148]	@ (8005db8 <LCD_Init+0x3e50>)
 8005d24:	2203      	movs	r2, #3
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d2a:	2280      	movs	r2, #128	@ 0x80
 8005d2c:	615a      	str	r2, [r3, #20]
 8005d2e:	4b23      	ldr	r3, [pc, #140]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d30:	2280      	movs	r2, #128	@ 0x80
 8005d32:	611a      	str	r2, [r3, #16]
 8005d34:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005d3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	4b1d      	ldr	r3, [pc, #116]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d4a:	615a      	str	r2, [r3, #20]
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005db8 <LCD_Init+0x3e50>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	4b1a      	ldr	r3, [pc, #104]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d54:	2280      	movs	r2, #128	@ 0x80
 8005d56:	615a      	str	r2, [r3, #20]
 8005d58:	4b18      	ldr	r3, [pc, #96]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d5a:	2280      	movs	r2, #128	@ 0x80
 8005d5c:	611a      	str	r2, [r3, #16]
 8005d5e:	4b17      	ldr	r3, [pc, #92]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d64:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005d66:	20ba      	movs	r0, #186	@ 0xba
 8005d68:	f7fa fe08 	bl	800097c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005d6c:	4b13      	ldr	r3, [pc, #76]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d72:	611a      	str	r2, [r3, #16]
 8005d74:	4b11      	ldr	r3, [pc, #68]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d7a:	615a      	str	r2, [r3, #20]
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <LCD_Init+0x3e50>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	4b0e      	ldr	r3, [pc, #56]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d84:	2280      	movs	r2, #128	@ 0x80
 8005d86:	615a      	str	r2, [r3, #20]
 8005d88:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d8a:	2280      	movs	r2, #128	@ 0x80
 8005d8c:	611a      	str	r2, [r3, #16]
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dbc <LCD_Init+0x3e54>)
 8005d90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d94:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8005d96:	2064      	movs	r0, #100	@ 0x64
 8005d98:	f7fb ff36 	bl	8001c08 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f7fb ffd7 	bl	8001d50 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8005da2:	4b07      	ldr	r3, [pc, #28]	@ (8005dc0 <LCD_Init+0x3e58>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8005da8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005dac:	f000 f80a 	bl	8005dc4 <LCD_Clear>
}
 8005db0:	bf00      	nop
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40010c00 	.word	0x40010c00
 8005dbc:	40011000 	.word	0x40011000
 8005dc0:	422201a8 	.word	0x422201a8

08005dc4 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e7c <LCD_Clear+0xb8>)
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005dd8:	4b28      	ldr	r3, [pc, #160]	@ (8005e7c <LCD_Clear+0xb8>)
 8005dda:	885b      	ldrh	r3, [r3, #2]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	fb02 f303 	mul.w	r3, r2, r3
 8005de4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005de6:	4b25      	ldr	r3, [pc, #148]	@ (8005e7c <LCD_Clear+0xb8>)
 8005de8:	889b      	ldrh	r3, [r3, #4]
 8005dea:	f646 0204 	movw	r2, #26628	@ 0x6804
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d11a      	bne.n	8005e28 <LCD_Clear+0x64>
 8005df2:	4b22      	ldr	r3, [pc, #136]	@ (8005e7c <LCD_Clear+0xb8>)
 8005df4:	799b      	ldrb	r3, [r3, #6]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d116      	bne.n	8005e28 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005dfa:	4b20      	ldr	r3, [pc, #128]	@ (8005e7c <LCD_Clear+0xb8>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005e00:	4b1e      	ldr	r3, [pc, #120]	@ (8005e7c <LCD_Clear+0xb8>)
 8005e02:	222a      	movs	r2, #42	@ 0x2a
 8005e04:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005e06:	4b1d      	ldr	r3, [pc, #116]	@ (8005e7c <LCD_Clear+0xb8>)
 8005e08:	222b      	movs	r2, #43	@ 0x2b
 8005e0a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	2000      	movs	r0, #0
 8005e10:	f7fa fe86 	bl	8000b20 <LCD_SetCursor>
		lcddev.dir = 1;
 8005e14:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <LCD_Clear+0xb8>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005e1a:	4b18      	ldr	r3, [pc, #96]	@ (8005e7c <LCD_Clear+0xb8>)
 8005e1c:	222b      	movs	r2, #43	@ 0x2b
 8005e1e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005e20:	4b16      	ldr	r3, [pc, #88]	@ (8005e7c <LCD_Clear+0xb8>)
 8005e22:	222a      	movs	r2, #42	@ 0x2a
 8005e24:	819a      	strh	r2, [r3, #12]
 8005e26:	e003      	b.n	8005e30 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005e28:	2100      	movs	r1, #0
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f7fa fe78 	bl	8000b20 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005e30:	f7fa fe6a 	bl	8000b08 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e017      	b.n	8005e6a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <LCD_Clear+0xbc>)
 8005e3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e40:	611a      	str	r2, [r3, #16]
 8005e42:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <LCD_Clear+0xbc>)
 8005e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e48:	615a      	str	r2, [r3, #20]
 8005e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8005e84 <LCD_Clear+0xc0>)
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	60d3      	str	r3, [r2, #12]
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <LCD_Clear+0xbc>)
 8005e52:	2280      	movs	r2, #128	@ 0x80
 8005e54:	615a      	str	r2, [r3, #20]
 8005e56:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <LCD_Clear+0xbc>)
 8005e58:	2280      	movs	r2, #128	@ 0x80
 8005e5a:	611a      	str	r2, [r3, #16]
 8005e5c:	4b08      	ldr	r3, [pc, #32]	@ (8005e80 <LCD_Clear+0xbc>)
 8005e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e62:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d3e3      	bcc.n	8005e3a <LCD_Clear+0x76>
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000084 	.word	0x20000084
 8005e80:	40011000 	.word	0x40011000
 8005e84:	40010c00 	.word	0x40010c00

08005e88 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4604      	mov	r4, r0
 8005e90:	4608      	mov	r0, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	461a      	mov	r2, r3
 8005e96:	4623      	mov	r3, r4
 8005e98:	80fb      	strh	r3, [r7, #6]
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	80bb      	strh	r3, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	70fb      	strb	r3, [r7, #3]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8005ea6:	88bb      	ldrh	r3, [r7, #4]
 8005ea8:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8005eaa:	78bb      	ldrb	r3, [r7, #2]
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	78bb      	ldrb	r3, [r7, #2]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf14      	ite	ne
 8005ebe:	2301      	movne	r3, #1
 8005ec0:	2300      	moveq	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	78ba      	ldrb	r2, [r7, #2]
 8005eca:	0852      	lsrs	r2, r2, #1
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	3b20      	subs	r3, #32
 8005ed8:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 8005eda:	2300      	movs	r3, #0
 8005edc:	737b      	strb	r3, [r7, #13]
 8005ede:	e069      	b.n	8005fb4 <LCD_ShowChar+0x12c>
		if (size == 12)
 8005ee0:	78bb      	ldrb	r3, [r7, #2]
 8005ee2:	2b0c      	cmp	r3, #12
 8005ee4:	d10b      	bne.n	8005efe <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 8005ee6:	78fa      	ldrb	r2, [r7, #3]
 8005ee8:	7b79      	ldrb	r1, [r7, #13]
 8005eea:	4838      	ldr	r0, [pc, #224]	@ (8005fcc <LCD_ShowChar+0x144>)
 8005eec:	4613      	mov	r3, r2
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4403      	add	r3, r0
 8005ef6:	440b      	add	r3, r1
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e019      	b.n	8005f32 <LCD_ShowChar+0xaa>
		else if (size == 16)
 8005efe:	78bb      	ldrb	r3, [r7, #2]
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d108      	bne.n	8005f16 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 8005f04:	78fa      	ldrb	r2, [r7, #3]
 8005f06:	7b7b      	ldrb	r3, [r7, #13]
 8005f08:	4931      	ldr	r1, [pc, #196]	@ (8005fd0 <LCD_ShowChar+0x148>)
 8005f0a:	0112      	lsls	r2, r2, #4
 8005f0c:	440a      	add	r2, r1
 8005f0e:	4413      	add	r3, r2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	73fb      	strb	r3, [r7, #15]
 8005f14:	e00d      	b.n	8005f32 <LCD_ShowChar+0xaa>
		else if (size == 24)
 8005f16:	78bb      	ldrb	r3, [r7, #2]
 8005f18:	2b18      	cmp	r3, #24
 8005f1a:	d150      	bne.n	8005fbe <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8005f1c:	78fa      	ldrb	r2, [r7, #3]
 8005f1e:	7b79      	ldrb	r1, [r7, #13]
 8005f20:	482c      	ldr	r0, [pc, #176]	@ (8005fd4 <LCD_ShowChar+0x14c>)
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4403      	add	r3, r0
 8005f2c:	440b      	add	r3, r1
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8005f32:	2300      	movs	r3, #0
 8005f34:	73bb      	strb	r3, [r7, #14]
 8005f36:	e035      	b.n	8005fa4 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8005f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da07      	bge.n	8005f50 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8005f40:	4b25      	ldr	r3, [pc, #148]	@ (8005fd8 <LCD_ShowChar+0x150>)
 8005f42:	881a      	ldrh	r2, [r3, #0]
 8005f44:	88b9      	ldrh	r1, [r7, #4]
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fb fbc7 	bl	80016dc <LCD_Fast_DrawPoint>
 8005f4e:	e00a      	b.n	8005f66 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8005f50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8005f58:	4b20      	ldr	r3, [pc, #128]	@ (8005fdc <LCD_ShowChar+0x154>)
 8005f5a:	881a      	ldrh	r2, [r3, #0]
 8005f5c:	88b9      	ldrh	r1, [r7, #4]
 8005f5e:	88fb      	ldrh	r3, [r7, #6]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fb fbbb 	bl	80016dc <LCD_Fast_DrawPoint>
			temp <<= 1;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
			y++;
 8005f6c:	88bb      	ldrh	r3, [r7, #4]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8005f72:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe0 <LCD_ShowChar+0x158>)
 8005f74:	885b      	ldrh	r3, [r3, #2]
 8005f76:	88ba      	ldrh	r2, [r7, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d222      	bcs.n	8005fc2 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8005f7c:	88ba      	ldrh	r2, [r7, #4]
 8005f7e:	897b      	ldrh	r3, [r7, #10]
 8005f80:	1ad2      	subs	r2, r2, r3
 8005f82:	78bb      	ldrb	r3, [r7, #2]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d10a      	bne.n	8005f9e <LCD_ShowChar+0x116>
				y = y0;
 8005f88:	897b      	ldrh	r3, [r7, #10]
 8005f8a:	80bb      	strh	r3, [r7, #4]
				x++;
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8005f92:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <LCD_ShowChar+0x158>)
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	88fa      	ldrh	r2, [r7, #6]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d307      	bcc.n	8005fac <LCD_ShowChar+0x124>
					return;	//超区域了
 8005f9c:	e012      	b.n	8005fc4 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8005f9e:	7bbb      	ldrb	r3, [r7, #14]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	73bb      	strb	r3, [r7, #14]
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	2b07      	cmp	r3, #7
 8005fa8:	d9c6      	bls.n	8005f38 <LCD_ShowChar+0xb0>
 8005faa:	e000      	b.n	8005fae <LCD_ShowChar+0x126>
				break;
 8005fac:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8005fae:	7b7b      	ldrb	r3, [r7, #13]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	737b      	strb	r3, [r7, #13]
 8005fb4:	7b7a      	ldrb	r2, [r7, #13]
 8005fb6:	7a7b      	ldrb	r3, [r7, #9]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d391      	bcc.n	8005ee0 <LCD_ShowChar+0x58>
 8005fbc:	e002      	b.n	8005fc4 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8005fc2:	bf00      	nop
			}
		}
	}
}
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd90      	pop	{r4, r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	08009c58 	.word	0x08009c58
 8005fd0:	0800a0cc 	.word	0x0800a0cc
 8005fd4:	0800a6bc 	.word	0x0800a6bc
 8005fd8:	20000080 	.word	0x20000080
 8005fdc:	20000000 	.word	0x20000000
 8005fe0:	20000084 	.word	0x20000084

08005fe4 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	460a      	mov	r2, r1
 8005fee:	71fb      	strb	r3, [r7, #7]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
	while (n--)
 8005ff8:	e004      	b.n	8006004 <LCD_Pow+0x20>
		result *= m;
 8005ffa:	79fa      	ldrb	r2, [r7, #7]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	60fb      	str	r3, [r7, #12]
	while (n--)
 8006004:	79bb      	ldrb	r3, [r7, #6]
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	71ba      	strb	r2, [r7, #6]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f5      	bne.n	8005ffa <LCD_Pow+0x16>
	return result;
 800600e:	68fb      	ldr	r3, [r7, #12]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr
	...

0800601c <LCD_ShowNum>:
// Display number without the leading zeros
// x,y: starting coordinate
// len: number of digits
// size: font size 12/16/24
void LCD_ShowNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size) {
 800601c:	b590      	push	{r4, r7, lr}
 800601e:	b089      	sub	sp, #36	@ 0x24
 8006020:	af02      	add	r7, sp, #8
 8006022:	60ba      	str	r2, [r7, #8]
 8006024:	461a      	mov	r2, r3
 8006026:	4603      	mov	r3, r0
 8006028:	81fb      	strh	r3, [r7, #14]
 800602a:	460b      	mov	r3, r1
 800602c:	81bb      	strh	r3, [r7, #12]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8006032:	2300      	movs	r3, #0
 8006034:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
 800603a:	e055      	b.n	80060e8 <LCD_ShowNum+0xcc>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 800603c:	79fa      	ldrb	r2, [r7, #7]
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	b2db      	uxtb	r3, r3
 8006044:	3b01      	subs	r3, #1
 8006046:	b2db      	uxtb	r3, r3
 8006048:	4619      	mov	r1, r3
 800604a:	200a      	movs	r0, #10
 800604c:	f7ff ffca 	bl	8005fe4 <LCD_Pow>
 8006050:	4602      	mov	r2, r0
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	fbb3 f1f2 	udiv	r1, r3, r2
 8006058:	4b28      	ldr	r3, [pc, #160]	@ (80060fc <LCD_ShowNum+0xe0>)
 800605a:	fba3 2301 	umull	r2, r3, r3, r1
 800605e:	08da      	lsrs	r2, r3, #3
 8006060:	4613      	mov	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	4413      	add	r3, r2
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	1aca      	subs	r2, r1, r3
 800606a:	4613      	mov	r3, r2
 800606c:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 800606e:	7dbb      	ldrb	r3, [r7, #22]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11f      	bne.n	80060b4 <LCD_ShowNum+0x98>
 8006074:	7dfa      	ldrb	r2, [r7, #23]
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	3b01      	subs	r3, #1
 800607a:	429a      	cmp	r2, r3
 800607c:	da1a      	bge.n	80060b4 <LCD_ShowNum+0x98>
			if (temp == 0) {
 800607e:	7d7b      	ldrb	r3, [r7, #21]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d115      	bne.n	80060b0 <LCD_ShowNum+0x94>
				LCD_ShowChar(x + (size / 2) * t, y, ' ', size, 0);
 8006084:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006088:	085b      	lsrs	r3, r3, #1
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	b29b      	uxth	r3, r3
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	b29a      	uxth	r2, r3
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	4413      	add	r3, r2
 800609c:	b298      	uxth	r0, r3
 800609e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060a2:	89b9      	ldrh	r1, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	9200      	str	r2, [sp, #0]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f7ff feed 	bl	8005e88 <LCD_ShowChar>
				continue;
 80060ae:	e018      	b.n	80060e2 <LCD_ShowNum+0xc6>
			} else
				enshow = 1;
 80060b0:	2301      	movs	r3, #1
 80060b2:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, 0);
 80060b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060b8:	085b      	lsrs	r3, r3, #1
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	89fb      	ldrh	r3, [r7, #14]
 80060ca:	4413      	add	r3, r2
 80060cc:	b298      	uxth	r0, r3
 80060ce:	7d7b      	ldrb	r3, [r7, #21]
 80060d0:	3330      	adds	r3, #48	@ 0x30
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060d8:	89b9      	ldrh	r1, [r7, #12]
 80060da:	2400      	movs	r4, #0
 80060dc:	9400      	str	r4, [sp, #0]
 80060de:	f7ff fed3 	bl	8005e88 <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	3301      	adds	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
 80060e8:	7dfa      	ldrb	r2, [r7, #23]
 80060ea:	79fb      	ldrb	r3, [r7, #7]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d3a5      	bcc.n	800603c <LCD_ShowNum+0x20>
	}
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd90      	pop	{r4, r7, pc}
 80060fa:	bf00      	nop
 80060fc:	cccccccd 	.word	0xcccccccd

08006100 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 8006100:	b590      	push	{r4, r7, lr}
 8006102:	b087      	sub	sp, #28
 8006104:	af02      	add	r7, sp, #8
 8006106:	4604      	mov	r4, r0
 8006108:	4608      	mov	r0, r1
 800610a:	4611      	mov	r1, r2
 800610c:	461a      	mov	r2, r3
 800610e:	4623      	mov	r3, r4
 8006110:	80fb      	strh	r3, [r7, #6]
 8006112:	4603      	mov	r3, r0
 8006114:	80bb      	strh	r3, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	807b      	strh	r3, [r7, #2]
 800611a:	4613      	mov	r3, r2
 800611c:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	73fb      	strb	r3, [r7, #15]
	width += x;
 8006122:	887a      	ldrh	r2, [r7, #2]
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	4413      	add	r3, r2
 8006128:	807b      	strh	r3, [r7, #2]
	height += y;
 800612a:	883a      	ldrh	r2, [r7, #0]
 800612c:	88bb      	ldrh	r3, [r7, #4]
 800612e:	4413      	add	r3, r2
 8006130:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006132:	e024      	b.n	800617e <LCD_ShowString+0x7e>
	{
		if (x >= width) {
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	887b      	ldrh	r3, [r7, #2]
 8006138:	429a      	cmp	r2, r3
 800613a:	d307      	bcc.n	800614c <LCD_ShowString+0x4c>
			x = x0;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006140:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006144:	b29a      	uxth	r2, r3
 8006146:	88bb      	ldrh	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 800614c:	88ba      	ldrh	r2, [r7, #4]
 800614e:	883b      	ldrh	r3, [r7, #0]
 8006150:	429a      	cmp	r2, r3
 8006152:	d21d      	bcs.n	8006190 <LCD_ShowString+0x90>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	f897 3020 	ldrb.w	r3, [r7, #32]
 800615c:	88b9      	ldrh	r1, [r7, #4]
 800615e:	88f8      	ldrh	r0, [r7, #6]
 8006160:	2400      	movs	r4, #0
 8006162:	9400      	str	r4, [sp, #0]
 8006164:	f7ff fe90 	bl	8005e88 <LCD_ShowChar>
		x += size / 2;
 8006168:	f897 3020 	ldrb.w	r3, [r7, #32]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	4413      	add	r3, r2
 8006176:	80fb      	strh	r3, [r7, #6]
		p++;
 8006178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617a:	3301      	adds	r3, #1
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b7e      	cmp	r3, #126	@ 0x7e
 8006184:	d805      	bhi.n	8006192 <LCD_ShowString+0x92>
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	2b1f      	cmp	r3, #31
 800618c:	d8d2      	bhi.n	8006134 <LCD_ShowString+0x34>
	}
}
 800618e:	e000      	b.n	8006192 <LCD_ShowString+0x92>
			break;	//退出
 8006190:	bf00      	nop
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bd90      	pop	{r4, r7, pc}

0800619a <LCD_ShowPic>:

void LCD_ShowPic(uint16_t x, uint16_t y, uint16_t column,uint16_t
row,uint16_t *pic, uint8_t scale) {
 800619a:	b590      	push	{r4, r7, lr}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	4604      	mov	r4, r0
 80061a2:	4608      	mov	r0, r1
 80061a4:	4611      	mov	r1, r2
 80061a6:	461a      	mov	r2, r3
 80061a8:	4623      	mov	r3, r4
 80061aa:	80fb      	strh	r3, [r7, #6]
 80061ac:	4603      	mov	r3, r0
 80061ae:	80bb      	strh	r3, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
 80061b4:	4613      	mov	r3, r2
 80061b6:	803b      	strh	r3, [r7, #0]

	 uint16_t i, j, m, n;
	 for (j = row * scale; j < row * 3; j++) {
 80061b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80061bc:	b29b      	uxth	r3, r3
 80061be:	883a      	ldrh	r2, [r7, #0]
 80061c0:	fb02 f303 	mul.w	r3, r2, r3
 80061c4:	82bb      	strh	r3, [r7, #20]
 80061c6:	e01c      	b.n	8006202 <LCD_ShowPic+0x68>
		for (i = 0; i < column * 3; i++) {
 80061c8:	2300      	movs	r3, #0
 80061ca:	82fb      	strh	r3, [r7, #22]
 80061cc:	e00f      	b.n	80061ee <LCD_ShowPic+0x54>
			LCD_Fast_DrawPoint(x + i, y + j, WHITE);  // BACK_COLOR 是背景颜色，可以设置为黑色或白色
 80061ce:	88fa      	ldrh	r2, [r7, #6]
 80061d0:	8afb      	ldrh	r3, [r7, #22]
 80061d2:	4413      	add	r3, r2
 80061d4:	b298      	uxth	r0, r3
 80061d6:	88ba      	ldrh	r2, [r7, #4]
 80061d8:	8abb      	ldrh	r3, [r7, #20]
 80061da:	4413      	add	r3, r2
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061e2:	4619      	mov	r1, r3
 80061e4:	f7fb fa7a 	bl	80016dc <LCD_Fast_DrawPoint>
		for (i = 0; i < column * 3; i++) {
 80061e8:	8afb      	ldrh	r3, [r7, #22]
 80061ea:	3301      	adds	r3, #1
 80061ec:	82fb      	strh	r3, [r7, #22]
 80061ee:	8af9      	ldrh	r1, [r7, #22]
 80061f0:	887a      	ldrh	r2, [r7, #2]
 80061f2:	4613      	mov	r3, r2
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	4413      	add	r3, r2
 80061f8:	4299      	cmp	r1, r3
 80061fa:	dbe8      	blt.n	80061ce <LCD_ShowPic+0x34>
	 for (j = row * scale; j < row * 3; j++) {
 80061fc:	8abb      	ldrh	r3, [r7, #20]
 80061fe:	3301      	adds	r3, #1
 8006200:	82bb      	strh	r3, [r7, #20]
 8006202:	8ab9      	ldrh	r1, [r7, #20]
 8006204:	883a      	ldrh	r2, [r7, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	4299      	cmp	r1, r3
 800620e:	dbdb      	blt.n	80061c8 <LCD_ShowPic+0x2e>
		}
	 }
	 for (j = 0; j < row * 3; j++) {
 8006210:	2300      	movs	r3, #0
 8006212:	82bb      	strh	r3, [r7, #20]
 8006214:	e021      	b.n	800625a <LCD_ShowPic+0xc0>
		for (i = column * scale; i < column * 3; i++) {
 8006216:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800621a:	b29b      	uxth	r3, r3
 800621c:	887a      	ldrh	r2, [r7, #2]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	82fb      	strh	r3, [r7, #22]
 8006224:	e00f      	b.n	8006246 <LCD_ShowPic+0xac>
			LCD_Fast_DrawPoint(x + i, y + j, WHITE);  // BACK_COLOR 是背景颜色，可以设置为黑色或白色
 8006226:	88fa      	ldrh	r2, [r7, #6]
 8006228:	8afb      	ldrh	r3, [r7, #22]
 800622a:	4413      	add	r3, r2
 800622c:	b298      	uxth	r0, r3
 800622e:	88ba      	ldrh	r2, [r7, #4]
 8006230:	8abb      	ldrh	r3, [r7, #20]
 8006232:	4413      	add	r3, r2
 8006234:	b29b      	uxth	r3, r3
 8006236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800623a:	4619      	mov	r1, r3
 800623c:	f7fb fa4e 	bl	80016dc <LCD_Fast_DrawPoint>
		for (i = column * scale; i < column * 3; i++) {
 8006240:	8afb      	ldrh	r3, [r7, #22]
 8006242:	3301      	adds	r3, #1
 8006244:	82fb      	strh	r3, [r7, #22]
 8006246:	8af9      	ldrh	r1, [r7, #22]
 8006248:	887a      	ldrh	r2, [r7, #2]
 800624a:	4613      	mov	r3, r2
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	4413      	add	r3, r2
 8006250:	4299      	cmp	r1, r3
 8006252:	dbe8      	blt.n	8006226 <LCD_ShowPic+0x8c>
	 for (j = 0; j < row * 3; j++) {
 8006254:	8abb      	ldrh	r3, [r7, #20]
 8006256:	3301      	adds	r3, #1
 8006258:	82bb      	strh	r3, [r7, #20]
 800625a:	8ab9      	ldrh	r1, [r7, #20]
 800625c:	883a      	ldrh	r2, [r7, #0]
 800625e:	4613      	mov	r3, r2
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	4413      	add	r3, r2
 8006264:	4299      	cmp	r1, r3
 8006266:	dbd6      	blt.n	8006216 <LCD_ShowPic+0x7c>
		}
	 }
	 uint16_t *data = (uint16_t *)pic;
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	60fb      	str	r3, [r7, #12]
	 for (j = 0; j < row; j++) {
 800626c:	2300      	movs	r3, #0
 800626e:	82bb      	strh	r3, [r7, #20]
 8006270:	e047      	b.n	8006302 <LCD_ShowPic+0x168>
		for (i = 0; i < column; i++) {
 8006272:	2300      	movs	r3, #0
 8006274:	82fb      	strh	r3, [r7, #22]
 8006276:	e03d      	b.n	80062f4 <LCD_ShowPic+0x15a>
			uint16_t color = *data++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1c9a      	adds	r2, r3, #2
 800627c:	60fa      	str	r2, [r7, #12]
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	817b      	strh	r3, [r7, #10]

			for (m = 0; m < scale; m++) {
 8006282:	2300      	movs	r3, #0
 8006284:	827b      	strh	r3, [r7, #18]
 8006286:	e02c      	b.n	80062e2 <LCD_ShowPic+0x148>
				for (n = 0; n < scale; n++) {
 8006288:	2300      	movs	r3, #0
 800628a:	823b      	strh	r3, [r7, #16]
 800628c:	e020      	b.n	80062d0 <LCD_ShowPic+0x136>
					LCD_Fast_DrawPoint(x + i * scale + m, y + j * scale + n, color);
 800628e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006292:	b29b      	uxth	r3, r3
 8006294:	8afa      	ldrh	r2, [r7, #22]
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	b29a      	uxth	r2, r3
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	4413      	add	r3, r2
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	8a7b      	ldrh	r3, [r7, #18]
 80062a4:	4413      	add	r3, r2
 80062a6:	b298      	uxth	r0, r3
 80062a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8aba      	ldrh	r2, [r7, #20]
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	8a3b      	ldrh	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	897a      	ldrh	r2, [r7, #10]
 80062c4:	4619      	mov	r1, r3
 80062c6:	f7fb fa09 	bl	80016dc <LCD_Fast_DrawPoint>
				for (n = 0; n < scale; n++) {
 80062ca:	8a3b      	ldrh	r3, [r7, #16]
 80062cc:	3301      	adds	r3, #1
 80062ce:	823b      	strh	r3, [r7, #16]
 80062d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8a3a      	ldrh	r2, [r7, #16]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3d8      	bcc.n	800628e <LCD_ShowPic+0xf4>
			for (m = 0; m < scale; m++) {
 80062dc:	8a7b      	ldrh	r3, [r7, #18]
 80062de:	3301      	adds	r3, #1
 80062e0:	827b      	strh	r3, [r7, #18]
 80062e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8a7a      	ldrh	r2, [r7, #18]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d3cc      	bcc.n	8006288 <LCD_ShowPic+0xee>
		for (i = 0; i < column; i++) {
 80062ee:	8afb      	ldrh	r3, [r7, #22]
 80062f0:	3301      	adds	r3, #1
 80062f2:	82fb      	strh	r3, [r7, #22]
 80062f4:	8afa      	ldrh	r2, [r7, #22]
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d3bd      	bcc.n	8006278 <LCD_ShowPic+0xde>
	 for (j = 0; j < row; j++) {
 80062fc:	8abb      	ldrh	r3, [r7, #20]
 80062fe:	3301      	adds	r3, #1
 8006300:	82bb      	strh	r3, [r7, #20]
 8006302:	8aba      	ldrh	r2, [r7, #20]
 8006304:	883b      	ldrh	r3, [r7, #0]
 8006306:	429a      	cmp	r2, r3
 8006308:	d3b3      	bcc.n	8006272 <LCD_ShowPic+0xd8>
				}
			}
		}
	 }
 }
 800630a:	bf00      	nop
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	bd90      	pop	{r4, r7, pc}

08006314 <LCD_ShowPic2>:

void LCD_ShowPic2(uint16_t x, uint16_t y, uint16_t column,uint16_t
row,uint16_t *pic) {
 8006314:	b590      	push	{r4, r7, lr}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	4611      	mov	r1, r2
 8006320:	461a      	mov	r2, r3
 8006322:	4623      	mov	r3, r4
 8006324:	80fb      	strh	r3, [r7, #6]
 8006326:	4603      	mov	r3, r0
 8006328:	80bb      	strh	r3, [r7, #4]
 800632a:	460b      	mov	r3, r1
 800632c:	807b      	strh	r3, [r7, #2]
 800632e:	4613      	mov	r3, r2
 8006330:	803b      	strh	r3, [r7, #0]

	 uint16_t i, j;

	 uint16_t *data = (uint16_t *)pic;
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	613b      	str	r3, [r7, #16]
	 for (j = 0; j < row; j++) {
 8006336:	2300      	movs	r3, #0
 8006338:	82bb      	strh	r3, [r7, #20]
 800633a:	e01d      	b.n	8006378 <LCD_ShowPic2+0x64>
		for (i = 0; i < column; i++) {
 800633c:	2300      	movs	r3, #0
 800633e:	82fb      	strh	r3, [r7, #22]
 8006340:	e013      	b.n	800636a <LCD_ShowPic2+0x56>
			uint16_t color = *data++;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	613a      	str	r2, [r7, #16]
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	81fb      	strh	r3, [r7, #14]
			LCD_Fast_DrawPoint(x + i, y + j, color);
 800634c:	88fa      	ldrh	r2, [r7, #6]
 800634e:	8afb      	ldrh	r3, [r7, #22]
 8006350:	4413      	add	r3, r2
 8006352:	b298      	uxth	r0, r3
 8006354:	88ba      	ldrh	r2, [r7, #4]
 8006356:	8abb      	ldrh	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	b29b      	uxth	r3, r3
 800635c:	89fa      	ldrh	r2, [r7, #14]
 800635e:	4619      	mov	r1, r3
 8006360:	f7fb f9bc 	bl	80016dc <LCD_Fast_DrawPoint>
		for (i = 0; i < column; i++) {
 8006364:	8afb      	ldrh	r3, [r7, #22]
 8006366:	3301      	adds	r3, #1
 8006368:	82fb      	strh	r3, [r7, #22]
 800636a:	8afa      	ldrh	r2, [r7, #22]
 800636c:	887b      	ldrh	r3, [r7, #2]
 800636e:	429a      	cmp	r2, r3
 8006370:	d3e7      	bcc.n	8006342 <LCD_ShowPic2+0x2e>
	 for (j = 0; j < row; j++) {
 8006372:	8abb      	ldrh	r3, [r7, #20]
 8006374:	3301      	adds	r3, #1
 8006376:	82bb      	strh	r3, [r7, #20]
 8006378:	8aba      	ldrh	r2, [r7, #20]
 800637a:	883b      	ldrh	r3, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d3dd      	bcc.n	800633c <LCD_ShowPic2+0x28>
		}
	}
 }
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	bd90      	pop	{r4, r7, pc}
	...

0800638c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006392:	f000 fc4b 	bl	8006c2c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006396:	f000 f89b 	bl	80064d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 800639a:	f7fb fde5 	bl	8001f68 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800639e:	f7fa fa49 	bl	8000834 <MX_GPIO_Init>
  MX_TIM3_Init();
 80063a2:	f000 fb2b 	bl	80069fc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80063a6:	f000 fb9d 	bl	8006ae4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, rxBuffer, 2);
 80063aa:	2202      	movs	r2, #2
 80063ac:	493a      	ldr	r1, [pc, #232]	@ (8006498 <main+0x10c>)
 80063ae:	483b      	ldr	r0, [pc, #236]	@ (800649c <main+0x110>)
 80063b0:	f002 fa09 	bl	80087c6 <HAL_UART_Receive_IT>

  LCD_ShowString(0, 180, 200, 24, 16, (uint8_t*)"The displaying time:");
 80063b4:	4b3a      	ldr	r3, [pc, #232]	@ (80064a0 <main+0x114>)
 80063b6:	9301      	str	r3, [sp, #4]
 80063b8:	2310      	movs	r3, #16
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	2318      	movs	r3, #24
 80063be:	22c8      	movs	r2, #200	@ 0xc8
 80063c0:	21b4      	movs	r1, #180	@ 0xb4
 80063c2:	2000      	movs	r0, #0
 80063c4:	f7ff fe9c 	bl	8006100 <LCD_ShowString>
  LCD_ShowString(0, 210, 200, 24, 24, (uint8_t*)"   min    sec");
 80063c8:	4b36      	ldr	r3, [pc, #216]	@ (80064a4 <main+0x118>)
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	2318      	movs	r3, #24
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	2318      	movs	r3, #24
 80063d2:	22c8      	movs	r2, #200	@ 0xc8
 80063d4:	21d2      	movs	r1, #210	@ 0xd2
 80063d6:	2000      	movs	r0, #0
 80063d8:	f7ff fe92 	bl	8006100 <LCD_ShowString>
  LCD_ShowString(0, 245, 200, 24, 16, (uint8_t *)"Captured:");
 80063dc:	4b32      	ldr	r3, [pc, #200]	@ (80064a8 <main+0x11c>)
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	2310      	movs	r3, #16
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2318      	movs	r3, #24
 80063e6:	22c8      	movs	r2, #200	@ 0xc8
 80063e8:	21f5      	movs	r1, #245	@ 0xf5
 80063ea:	2000      	movs	r0, #0
 80063ec:	f7ff fe88 	bl	8006100 <LCD_ShowString>
  LCD_ShowString(120, 245, 200, 24, 16, (uint8_t *)"Speed:");
 80063f0:	4b2e      	ldr	r3, [pc, #184]	@ (80064ac <main+0x120>)
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	2310      	movs	r3, #16
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2318      	movs	r3, #24
 80063fa:	22c8      	movs	r2, #200	@ 0xc8
 80063fc:	21f5      	movs	r1, #245	@ 0xf5
 80063fe:	2078      	movs	r0, #120	@ 0x78
 8006400:	f7ff fe7e 	bl	8006100 <LCD_ShowString>
  LCD_ShowString(120, 270, 200, 24, 16, (uint8_t *)"Status:");
 8006404:	4b2a      	ldr	r3, [pc, #168]	@ (80064b0 <main+0x124>)
 8006406:	9301      	str	r3, [sp, #4]
 8006408:	2310      	movs	r3, #16
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2318      	movs	r3, #24
 800640e:	22c8      	movs	r2, #200	@ 0xc8
 8006410:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8006414:	2078      	movs	r0, #120	@ 0x78
 8006416:	f7ff fe73 	bl	8006100 <LCD_ShowString>
  LCD_ShowString(80, 295, 200, 24, 24, (uint8_t *)"Displaying");
 800641a:	4b26      	ldr	r3, [pc, #152]	@ (80064b4 <main+0x128>)
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	2318      	movs	r3, #24
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	2318      	movs	r3, #24
 8006424:	22c8      	movs	r2, #200	@ 0xc8
 8006426:	f240 1127 	movw	r1, #295	@ 0x127
 800642a:	2050      	movs	r0, #80	@ 0x50
 800642c:	f7ff fe68 	bl	8006100 <LCD_ShowString>
  LCD_ShowString(220, 0, 12, 300, 24,(uint8_t *)"Video Player");
 8006430:	4b21      	ldr	r3, [pc, #132]	@ (80064b8 <main+0x12c>)
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	2318      	movs	r3, #24
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800643c:	220c      	movs	r2, #12
 800643e:	2100      	movs	r1, #0
 8006440:	20dc      	movs	r0, #220	@ 0xdc
 8006442:	f7ff fe5d 	bl	8006100 <LCD_ShowString>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//      LCD_ShowString(30, 100, 200, 24, 24,(uint8_t*)"Digital Counter Demo");
	  if(frame_flag == 1){
 8006446:	4b1d      	ldr	r3, [pc, #116]	@ (80064bc <main+0x130>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d1fb      	bne.n	8006446 <main+0xba>
		  HAL_TIM_Base_Start_IT(&htim3);
 800644e:	481c      	ldr	r0, [pc, #112]	@ (80064c0 <main+0x134>)
 8006450:	f001 fd30 	bl	8007eb4 <HAL_TIM_Base_Start_IT>
		  LCD_ShowPic(0, 0, 60, 45, img, zoom_in);
 8006454:	4b1b      	ldr	r3, [pc, #108]	@ (80064c4 <main+0x138>)
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	4b1b      	ldr	r3, [pc, #108]	@ (80064c8 <main+0x13c>)
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	232d      	movs	r3, #45	@ 0x2d
 8006460:	223c      	movs	r2, #60	@ 0x3c
 8006462:	2100      	movs	r1, #0
 8006464:	2000      	movs	r0, #0
 8006466:	f7ff fe98 	bl	800619a <LCD_ShowPic>
		  frame_flag = 0;
 800646a:	4b14      	ldr	r3, [pc, #80]	@ (80064bc <main+0x130>)
 800646c:	2200      	movs	r2, #0
 800646e:	701a      	strb	r2, [r3, #0]
		 if(captured == 1){
 8006470:	4b16      	ldr	r3, [pc, #88]	@ (80064cc <main+0x140>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d10b      	bne.n	8006490 <main+0x104>
		  LCD_ShowPic2(0, 275, 60, 45, img);
 8006478:	4b13      	ldr	r3, [pc, #76]	@ (80064c8 <main+0x13c>)
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	232d      	movs	r3, #45	@ 0x2d
 800647e:	223c      	movs	r2, #60	@ 0x3c
 8006480:	f240 1113 	movw	r1, #275	@ 0x113
 8006484:	2000      	movs	r0, #0
 8006486:	f7ff ff45 	bl	8006314 <LCD_ShowPic2>
		  captured = 0;
 800648a:	4b10      	ldr	r3, [pc, #64]	@ (80064cc <main+0x140>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
		 }
		  HAL_TIM_Base_Stop_IT(&htim3);
 8006490:	480b      	ldr	r0, [pc, #44]	@ (80064c0 <main+0x134>)
 8006492:	f001 fd6f 	bl	8007f74 <HAL_TIM_Base_Stop_IT>
	  if(frame_flag == 1){
 8006496:	e7d6      	b.n	8006446 <main+0xba>
 8006498:	20000098 	.word	0x20000098
 800649c:	2000166c 	.word	0x2000166c
 80064a0:	08009bac 	.word	0x08009bac
 80064a4:	08009bc4 	.word	0x08009bc4
 80064a8:	08009bd4 	.word	0x08009bd4
 80064ac:	08009be0 	.word	0x08009be0
 80064b0:	08009be8 	.word	0x08009be8
 80064b4:	08009bf0 	.word	0x08009bf0
 80064b8:	08009bfc 	.word	0x08009bfc
 80064bc:	2000161c 	.word	0x2000161c
 80064c0:	20001624 	.word	0x20001624
 80064c4:	20000002 	.word	0x20000002
 80064c8:	20000104 	.word	0x20000104
 80064cc:	2000161d 	.word	0x2000161d

080064d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b090      	sub	sp, #64	@ 0x40
 80064d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064d6:	f107 0318 	add.w	r3, r7, #24
 80064da:	2228      	movs	r2, #40	@ 0x28
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f002 fec8 	bl	8009274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064e4:	1d3b      	adds	r3, r7, #4
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	605a      	str	r2, [r3, #4]
 80064ec:	609a      	str	r2, [r3, #8]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80064f2:	2301      	movs	r3, #1
 80064f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80064f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80064fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80064fc:	2300      	movs	r3, #0
 80064fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006500:	2301      	movs	r3, #1
 8006502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006504:	2302      	movs	r3, #2
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800650c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800650e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8006512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006514:	f107 0318 	add.w	r3, r7, #24
 8006518:	4618      	mov	r0, r3
 800651a:	f001 f86b 	bl	80075f4 <HAL_RCC_OscConfig>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006524:	f000 f819 	bl	800655a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006528:	230f      	movs	r3, #15
 800652a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800652c:	2302      	movs	r3, #2
 800652e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006538:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800653e:	1d3b      	adds	r3, r7, #4
 8006540:	2102      	movs	r1, #2
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fad8 	bl	8007af8 <HAL_RCC_ClockConfig>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800654e:	f000 f804 	bl	800655a <Error_Handler>
  }
}
 8006552:	bf00      	nop
 8006554:	3740      	adds	r7, #64	@ 0x40
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800655a:	b480      	push	{r7}
 800655c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800655e:	b672      	cpsid	i
}
 8006560:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006562:	bf00      	nop
 8006564:	e7fd      	b.n	8006562 <Error_Handler+0x8>
	...

08006568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800656e:	4b16      	ldr	r3, [pc, #88]	@ (80065c8 <HAL_MspInit+0x60>)
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	4a15      	ldr	r2, [pc, #84]	@ (80065c8 <HAL_MspInit+0x60>)
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	6193      	str	r3, [r2, #24]
 800657a:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <HAL_MspInit+0x60>)
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006586:	4b10      	ldr	r3, [pc, #64]	@ (80065c8 <HAL_MspInit+0x60>)
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	4a0f      	ldr	r2, [pc, #60]	@ (80065c8 <HAL_MspInit+0x60>)
 800658c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006590:	61d3      	str	r3, [r2, #28]
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <HAL_MspInit+0x60>)
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800659a:	607b      	str	r3, [r7, #4]
 800659c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800659e:	2005      	movs	r0, #5
 80065a0:	f000 fcba 	bl	8006f18 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80065a4:	4b09      	ldr	r3, [pc, #36]	@ (80065cc <HAL_MspInit+0x64>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	4a04      	ldr	r2, [pc, #16]	@ (80065cc <HAL_MspInit+0x64>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40021000 	.word	0x40021000
 80065cc:	40010000 	.word	0x40010000

080065d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <NMI_Handler+0x4>

080065d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <HardFault_Handler+0x4>

080065e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065e4:	bf00      	nop
 80065e6:	e7fd      	b.n	80065e4 <MemManage_Handler+0x4>

080065e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065e8:	b480      	push	{r7}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <BusFault_Handler+0x4>

080065f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065f0:	b480      	push	{r7}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <UsageFault_Handler+0x4>

080065f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065fc:	bf00      	nop
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr

08006604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006608:	bf00      	nop
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	bc80      	pop	{r7}
 800661a:	4770      	bx	lr

0800661c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006620:	f000 fb4a 	bl	8006cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006624:	bf00      	nop
 8006626:	bd80      	pop	{r7, pc}

08006628 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_WK_Pin);
 800662c:	2001      	movs	r0, #1
 800662e:	f000 ffc9 	bl	80075c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006632:	bf00      	nop
 8006634:	bd80      	pop	{r7, pc}

08006636 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY0_Pin);
 800663a:	2020      	movs	r0, #32
 800663c:	f000 ffc2 	bl	80075c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006640:	bf00      	nop
 8006642:	bd80      	pop	{r7, pc}

08006644 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006648:	4802      	ldr	r0, [pc, #8]	@ (8006654 <TIM3_IRQHandler+0x10>)
 800664a:	f001 fcc1 	bl	8007fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20001624 	.word	0x20001624

08006658 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800665c:	4802      	ldr	r0, [pc, #8]	@ (8006668 <USART1_IRQHandler+0x10>)
 800665e:	f002 f8d7 	bl	8008810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	2000166c 	.word	0x2000166c

0800666c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8006670:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006674:	f000 ffa6 	bl	80075c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006678:	bf00      	nop
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af02      	add	r7, sp, #8
 8006682:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a21      	ldr	r2, [pc, #132]	@ (8006710 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d13b      	bne.n	8006706 <HAL_TIM_PeriodElapsedCallback+0x8a>
    	counter++;
 800668e:	4b21      	ldr	r3, [pc, #132]	@ (8006714 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a1f      	ldr	r2, [pc, #124]	@ (8006714 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006696:	6013      	str	r3, [r2, #0]
    	uint16_t minute = counter / 60;
 8006698:	4b1e      	ldr	r3, [pc, #120]	@ (8006714 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1e      	ldr	r2, [pc, #120]	@ (8006718 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	81fb      	strh	r3, [r7, #14]
    	uint16_t second = counter % 60;
 80066a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006714 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006718 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80066ac:	fba3 2301 	umull	r2, r3, r3, r1
 80066b0:	095a      	lsrs	r2, r3, #5
 80066b2:	4613      	mov	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	1aca      	subs	r2, r1, r3
 80066bc:	4613      	mov	r3, r2
 80066be:	81bb      	strh	r3, [r7, #12]
    	sprintf(buffer, "%02d min %02d sec", minute, second);
 80066c0:	89fa      	ldrh	r2, [r7, #14]
 80066c2:	89bb      	ldrh	r3, [r7, #12]
 80066c4:	4915      	ldr	r1, [pc, #84]	@ (800671c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80066c6:	4816      	ldr	r0, [pc, #88]	@ (8006720 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80066c8:	f002 fdb4 	bl	8009234 <siprintf>
        LCD_ShowString(0, 210, 200, 24, 24, (uint8_t*)buffer);
 80066cc:	4b14      	ldr	r3, [pc, #80]	@ (8006720 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80066ce:	9301      	str	r3, [sp, #4]
 80066d0:	2318      	movs	r3, #24
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2318      	movs	r3, #24
 80066d6:	22c8      	movs	r2, #200	@ 0xc8
 80066d8:	21d2      	movs	r1, #210	@ 0xd2
 80066da:	2000      	movs	r0, #0
 80066dc:	f7ff fd10 	bl	8006100 <LCD_ShowString>
        if (counter % 2 == 0) {
 80066e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <HAL_TIM_PeriodElapsedCallback+0x7e>
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET); // 点亮LED0
 80066ec:	2201      	movs	r2, #1
 80066ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80066f2:	480c      	ldr	r0, [pc, #48]	@ (8006724 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80066f4:	f000 ff4d 	bl	8007592 <HAL_GPIO_WritePin>
        } else {
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); // 熄灭LED0
        }
    }
}
 80066f8:	e005      	b.n	8006706 <HAL_TIM_PeriodElapsedCallback+0x8a>
            HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET); // 熄灭LED0
 80066fa:	2200      	movs	r2, #0
 80066fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006700:	4808      	ldr	r0, [pc, #32]	@ (8006724 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8006702:	f000 ff46 	bl	8007592 <HAL_GPIO_WritePin>
}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40000400 	.word	0x40000400
 8006714:	20000094 	.word	0x20000094
 8006718:	88888889 	.word	0x88888889
 800671c:	08009c0c 	.word	0x08009c0c
 8006720:	2000009c 	.word	0x2000009c
 8006724:	40010800 	.word	0x40010800

08006728 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8006728:	b580      	push	{r7, lr}
 800672a:	b088      	sub	sp, #32
 800672c:	af02      	add	r7, sp, #8
 800672e:	4603      	mov	r3, r0
 8006730:	80fb      	strh	r3, [r7, #6]
	uint32_t begin_time, end_time, duration;
	switch (GPIO_Pin) {
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006738:	d07f      	beq.n	800683a <HAL_GPIO_EXTI_Callback+0x112>
 800673a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673e:	f300 80b7 	bgt.w	80068b0 <HAL_GPIO_EXTI_Callback+0x188>
 8006742:	2b01      	cmp	r3, #1
 8006744:	d002      	beq.n	800674c <HAL_GPIO_EXTI_Callback+0x24>
 8006746:	2b20      	cmp	r3, #32
 8006748:	d034      	beq.n	80067b4 <HAL_GPIO_EXTI_Callback+0x8c>
					}
				}
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
				break;
			default:
				break;
 800674a:	e0b1      	b.n	80068b0 <HAL_GPIO_EXTI_Callback+0x188>
				HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800674c:	2006      	movs	r0, #6
 800674e:	f000 fc18 	bl	8006f82 <HAL_NVIC_DisableIRQ>
				begin_time = HAL_GetTick();
 8006752:	f000 fac3 	bl	8006cdc <HAL_GetTick>
 8006756:	6178      	str	r0, [r7, #20]
				while (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 8006758:	bf00      	nop
 800675a:	2101      	movs	r1, #1
 800675c:	4857      	ldr	r0, [pc, #348]	@ (80068bc <HAL_GPIO_EXTI_Callback+0x194>)
 800675e:	f000 ff01 	bl	8007564 <HAL_GPIO_ReadPin>
 8006762:	4603      	mov	r3, r0
 8006764:	2b01      	cmp	r3, #1
 8006766:	d0f8      	beq.n	800675a <HAL_GPIO_EXTI_Callback+0x32>
				end_time = HAL_GetTick();
 8006768:	f000 fab8 	bl	8006cdc <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]
				duration = end_time - begin_time;
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	60fb      	str	r3, [r7, #12]
				if (duration <= 1000) {
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800677c:	d803      	bhi.n	8006786 <HAL_GPIO_EXTI_Callback+0x5e>
					captured = 1;
 800677e:	4b50      	ldr	r3, [pc, #320]	@ (80068c0 <HAL_GPIO_EXTI_Callback+0x198>)
 8006780:	2201      	movs	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e012      	b.n	80067ac <HAL_GPIO_EXTI_Callback+0x84>
					speed = speed - 1;
 8006786:	4b4f      	ldr	r3, [pc, #316]	@ (80068c4 <HAL_GPIO_EXTI_Callback+0x19c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a4d      	ldr	r2, [pc, #308]	@ (80068c4 <HAL_GPIO_EXTI_Callback+0x19c>)
 800678e:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_IT(&huart1, (uint8_t*)SLOW_COMMAND, sizeof(SLOW_COMMAND) - 1);
 8006790:	2204      	movs	r2, #4
 8006792:	494d      	ldr	r1, [pc, #308]	@ (80068c8 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8006794:	484d      	ldr	r0, [pc, #308]	@ (80068cc <HAL_GPIO_EXTI_Callback+0x1a4>)
 8006796:	f001 ffe1 	bl	800875c <HAL_UART_Transmit_IT>
					LCD_ShowNum(180,245,speed,2,16);
 800679a:	4b4a      	ldr	r3, [pc, #296]	@ (80068c4 <HAL_GPIO_EXTI_Callback+0x19c>)
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	2310      	movs	r3, #16
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	2302      	movs	r3, #2
 80067a4:	21f5      	movs	r1, #245	@ 0xf5
 80067a6:	20b4      	movs	r0, #180	@ 0xb4
 80067a8:	f7ff fc38 	bl	800601c <LCD_ShowNum>
				HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80067ac:	2006      	movs	r0, #6
 80067ae:	f000 fbda 	bl	8006f66 <HAL_NVIC_EnableIRQ>
				break;
 80067b2:	e07e      	b.n	80068b2 <HAL_GPIO_EXTI_Callback+0x18a>
				HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80067b4:	2017      	movs	r0, #23
 80067b6:	f000 fbe4 	bl	8006f82 <HAL_NVIC_DisableIRQ>
				begin_time = HAL_GetTick();
 80067ba:	f000 fa8f 	bl	8006cdc <HAL_GetTick>
 80067be:	6178      	str	r0, [r7, #20]
				while (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 80067c0:	bf00      	nop
 80067c2:	2120      	movs	r1, #32
 80067c4:	4842      	ldr	r0, [pc, #264]	@ (80068d0 <HAL_GPIO_EXTI_Callback+0x1a8>)
 80067c6:	f000 fecd 	bl	8007564 <HAL_GPIO_ReadPin>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0f8      	beq.n	80067c2 <HAL_GPIO_EXTI_Callback+0x9a>
				end_time = HAL_GetTick();
 80067d0:	f000 fa84 	bl	8006cdc <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]
				duration = end_time - begin_time;
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	60fb      	str	r3, [r7, #12]
				if (duration <= 1000) {
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067e4:	d80e      	bhi.n	8006804 <HAL_GPIO_EXTI_Callback+0xdc>
						if(zoom_in == 3){
 80067e6:	4b3b      	ldr	r3, [pc, #236]	@ (80068d4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d103      	bne.n	80067f6 <HAL_GPIO_EXTI_Callback+0xce>
							zoom_in = 1;
 80067ee:	4b39      	ldr	r3, [pc, #228]	@ (80068d4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	e01d      	b.n	8006832 <HAL_GPIO_EXTI_Callback+0x10a>
							zoom_in = zoom_in + 1;
 80067f6:	4b37      	ldr	r3, [pc, #220]	@ (80068d4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	4b35      	ldr	r3, [pc, #212]	@ (80068d4 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e016      	b.n	8006832 <HAL_GPIO_EXTI_Callback+0x10a>
					if(speed < 5){
 8006804:	4b2f      	ldr	r3, [pc, #188]	@ (80068c4 <HAL_GPIO_EXTI_Callback+0x19c>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d804      	bhi.n	8006816 <HAL_GPIO_EXTI_Callback+0xee>
						speed = speed + 1;
 800680c:	4b2d      	ldr	r3, [pc, #180]	@ (80068c4 <HAL_GPIO_EXTI_Callback+0x19c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a2c      	ldr	r2, [pc, #176]	@ (80068c4 <HAL_GPIO_EXTI_Callback+0x19c>)
 8006814:	6013      	str	r3, [r2, #0]
					HAL_UART_Transmit_IT(&huart1, (uint8_t*)SPEED_COMMAND, sizeof(SPEED_COMMAND) - 1);
 8006816:	2205      	movs	r2, #5
 8006818:	492f      	ldr	r1, [pc, #188]	@ (80068d8 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800681a:	482c      	ldr	r0, [pc, #176]	@ (80068cc <HAL_GPIO_EXTI_Callback+0x1a4>)
 800681c:	f001 ff9e 	bl	800875c <HAL_UART_Transmit_IT>
					LCD_ShowNum(180,245,speed,2,16);
 8006820:	4b28      	ldr	r3, [pc, #160]	@ (80068c4 <HAL_GPIO_EXTI_Callback+0x19c>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	2310      	movs	r3, #16
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2302      	movs	r3, #2
 800682a:	21f5      	movs	r1, #245	@ 0xf5
 800682c:	20b4      	movs	r0, #180	@ 0xb4
 800682e:	f7ff fbf5 	bl	800601c <LCD_ShowNum>
				HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006832:	2017      	movs	r0, #23
 8006834:	f000 fb97 	bl	8006f66 <HAL_NVIC_EnableIRQ>
				break;
 8006838:	e03b      	b.n	80068b2 <HAL_GPIO_EXTI_Callback+0x18a>
				HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 800683a:	2028      	movs	r0, #40	@ 0x28
 800683c:	f000 fba1 	bl	8006f82 <HAL_NVIC_DisableIRQ>
				if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET){
 8006840:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006844:	481d      	ldr	r0, [pc, #116]	@ (80068bc <HAL_GPIO_EXTI_Callback+0x194>)
 8006846:	f000 fe8d 	bl	8007564 <HAL_GPIO_ReadPin>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d12b      	bne.n	80068a8 <HAL_GPIO_EXTI_Callback+0x180>
					video_playing ^= 1;
 8006850:	4b22      	ldr	r3, [pc, #136]	@ (80068dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f083 0301 	eor.w	r3, r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	4b20      	ldr	r3, [pc, #128]	@ (80068dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 800685c:	701a      	strb	r2, [r3, #0]
					if(video_playing == 0){
 800685e:	4b1f      	ldr	r3, [pc, #124]	@ (80068dc <HAL_GPIO_EXTI_Callback+0x1b4>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d110      	bne.n	8006888 <HAL_GPIO_EXTI_Callback+0x160>
						LCD_ShowString(80, 295, 200, 24, 24, (uint8_t *)"Suspended~");
 8006866:	4b1e      	ldr	r3, [pc, #120]	@ (80068e0 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	2318      	movs	r3, #24
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	2318      	movs	r3, #24
 8006870:	22c8      	movs	r2, #200	@ 0xc8
 8006872:	f240 1127 	movw	r1, #295	@ 0x127
 8006876:	2050      	movs	r0, #80	@ 0x50
 8006878:	f7ff fc42 	bl	8006100 <LCD_ShowString>
						HAL_UART_Transmit_IT(&huart1, (uint8_t*)STOP_COMMAND, sizeof(STOP_COMMAND) - 1);
 800687c:	2204      	movs	r2, #4
 800687e:	4919      	ldr	r1, [pc, #100]	@ (80068e4 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8006880:	4812      	ldr	r0, [pc, #72]	@ (80068cc <HAL_GPIO_EXTI_Callback+0x1a4>)
 8006882:	f001 ff6b 	bl	800875c <HAL_UART_Transmit_IT>
 8006886:	e00f      	b.n	80068a8 <HAL_GPIO_EXTI_Callback+0x180>
						LCD_ShowString(80, 295, 200, 24, 24, (uint8_t *)"Displaying");
 8006888:	4b17      	ldr	r3, [pc, #92]	@ (80068e8 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	2318      	movs	r3, #24
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	2318      	movs	r3, #24
 8006892:	22c8      	movs	r2, #200	@ 0xc8
 8006894:	f240 1127 	movw	r1, #295	@ 0x127
 8006898:	2050      	movs	r0, #80	@ 0x50
 800689a:	f7ff fc31 	bl	8006100 <LCD_ShowString>
						HAL_UART_Transmit_IT(&huart1, (uint8_t*)RESUME_COMMAND, sizeof(RESUME_COMMAND) - 1);
 800689e:	2206      	movs	r2, #6
 80068a0:	4912      	ldr	r1, [pc, #72]	@ (80068ec <HAL_GPIO_EXTI_Callback+0x1c4>)
 80068a2:	480a      	ldr	r0, [pc, #40]	@ (80068cc <HAL_GPIO_EXTI_Callback+0x1a4>)
 80068a4:	f001 ff5a 	bl	800875c <HAL_UART_Transmit_IT>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80068a8:	2028      	movs	r0, #40	@ 0x28
 80068aa:	f000 fb5c 	bl	8006f66 <HAL_NVIC_EnableIRQ>
				break;
 80068ae:	e000      	b.n	80068b2 <HAL_GPIO_EXTI_Callback+0x18a>
				break;
 80068b0:	bf00      	nop

		}
}
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40010800 	.word	0x40010800
 80068c0:	2000161d 	.word	0x2000161d
 80068c4:	20000004 	.word	0x20000004
 80068c8:	08009c20 	.word	0x08009c20
 80068cc:	2000166c 	.word	0x2000166c
 80068d0:	40011000 	.word	0x40011000
 80068d4:	20000002 	.word	0x20000002
 80068d8:	08009c28 	.word	0x08009c28
 80068dc:	20000003 	.word	0x20000003
 80068e0:	08009c30 	.word	0x08009c30
 80068e4:	08009c3c 	.word	0x08009c3c
 80068e8:	08009c44 	.word	0x08009c44
 80068ec:	08009c50 	.word	0x08009c50

080068f0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]

    uint16_t data;
    if (huart->Instance == USART1) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a1b      	ldr	r2, [pc, #108]	@ (800696c <HAL_UART_RxCpltCallback+0x7c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d130      	bne.n	8006964 <HAL_UART_RxCpltCallback+0x74>
        data = rxBuffer[0] | (rxBuffer[1] << 8);
 8006902:	4b1b      	ldr	r3, [pc, #108]	@ (8006970 <HAL_UART_RxCpltCallback+0x80>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	b21a      	sxth	r2, r3
 8006908:	4b19      	ldr	r3, [pc, #100]	@ (8006970 <HAL_UART_RxCpltCallback+0x80>)
 800690a:	785b      	ldrb	r3, [r3, #1]
 800690c:	021b      	lsls	r3, r3, #8
 800690e:	b21b      	sxth	r3, r3
 8006910:	4313      	orrs	r3, r2
 8006912:	b21b      	sxth	r3, r3
 8006914:	81fb      	strh	r3, [r7, #14]
        if (data == 0x1234) {
 8006916:	89fb      	ldrh	r3, [r7, #14]
 8006918:	f241 2234 	movw	r2, #4660	@ 0x1234
 800691c:	4293      	cmp	r3, r2
 800691e:	d103      	bne.n	8006928 <HAL_UART_RxCpltCallback+0x38>
            img_index = 0;
 8006920:	4b14      	ldr	r3, [pc, #80]	@ (8006974 <HAL_UART_RxCpltCallback+0x84>)
 8006922:	2200      	movs	r2, #0
 8006924:	801a      	strh	r2, [r3, #0]
 8006926:	e018      	b.n	800695a <HAL_UART_RxCpltCallback+0x6a>
//            HAL_UART_Transmit_IT(&huart1, rxBuffer ,2);
        } else {
            img[img_index] = data;
 8006928:	4b12      	ldr	r3, [pc, #72]	@ (8006974 <HAL_UART_RxCpltCallback+0x84>)
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	4a12      	ldr	r2, [pc, #72]	@ (8006978 <HAL_UART_RxCpltCallback+0x88>)
 8006930:	89fb      	ldrh	r3, [r7, #14]
 8006932:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            img_index++;
 8006936:	4b0f      	ldr	r3, [pc, #60]	@ (8006974 <HAL_UART_RxCpltCallback+0x84>)
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	3301      	adds	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	4b0d      	ldr	r3, [pc, #52]	@ (8006974 <HAL_UART_RxCpltCallback+0x84>)
 8006940:	801a      	strh	r2, [r3, #0]
            if (img_index >= FRAME_SIZE) {
 8006942:	4b0c      	ldr	r3, [pc, #48]	@ (8006974 <HAL_UART_RxCpltCallback+0x84>)
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	f640 228b 	movw	r2, #2699	@ 0xa8b
 800694a:	4293      	cmp	r3, r2
 800694c:	d905      	bls.n	800695a <HAL_UART_RxCpltCallback+0x6a>
            	frame_flag = 1;
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <HAL_UART_RxCpltCallback+0x8c>)
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
                img_index = 0;
 8006954:	4b07      	ldr	r3, [pc, #28]	@ (8006974 <HAL_UART_RxCpltCallback+0x84>)
 8006956:	2200      	movs	r2, #0
 8006958:	801a      	strh	r2, [r3, #0]
//				HAL_UART_Transmit_IT(&huart1, (uint8_t*)FRAME_RECEIVED, sizeof(FRAME_RECEIVED) - 1);

            }
        }
        HAL_UART_Receive_IT(&huart1, rxBuffer, 2);
 800695a:	2202      	movs	r2, #2
 800695c:	4904      	ldr	r1, [pc, #16]	@ (8006970 <HAL_UART_RxCpltCallback+0x80>)
 800695e:	4808      	ldr	r0, [pc, #32]	@ (8006980 <HAL_UART_RxCpltCallback+0x90>)
 8006960:	f001 ff31 	bl	80087c6 <HAL_UART_Receive_IT>
    }
 }
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40013800 	.word	0x40013800
 8006970:	20000098 	.word	0x20000098
 8006974:	20000100 	.word	0x20000100
 8006978:	20000104 	.word	0x20000104
 800697c:	2000161c 	.word	0x2000161c
 8006980:	2000166c 	.word	0x2000166c

08006984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800698c:	4a14      	ldr	r2, [pc, #80]	@ (80069e0 <_sbrk+0x5c>)
 800698e:	4b15      	ldr	r3, [pc, #84]	@ (80069e4 <_sbrk+0x60>)
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006998:	4b13      	ldr	r3, [pc, #76]	@ (80069e8 <_sbrk+0x64>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069a0:	4b11      	ldr	r3, [pc, #68]	@ (80069e8 <_sbrk+0x64>)
 80069a2:	4a12      	ldr	r2, [pc, #72]	@ (80069ec <_sbrk+0x68>)
 80069a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069a6:	4b10      	ldr	r3, [pc, #64]	@ (80069e8 <_sbrk+0x64>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d207      	bcs.n	80069c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069b4:	f002 fc66 	bl	8009284 <__errno>
 80069b8:	4603      	mov	r3, r0
 80069ba:	220c      	movs	r2, #12
 80069bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	e009      	b.n	80069d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069c4:	4b08      	ldr	r3, [pc, #32]	@ (80069e8 <_sbrk+0x64>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069ca:	4b07      	ldr	r3, [pc, #28]	@ (80069e8 <_sbrk+0x64>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	4a05      	ldr	r2, [pc, #20]	@ (80069e8 <_sbrk+0x64>)
 80069d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069d6:	68fb      	ldr	r3, [r7, #12]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	2000c000 	.word	0x2000c000
 80069e4:	00000400 	.word	0x00000400
 80069e8:	20001620 	.word	0x20001620
 80069ec:	20001800 	.word	0x20001800

080069f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a02:	f107 0308 	add.w	r3, r7, #8
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	605a      	str	r2, [r3, #4]
 8006a0c:	609a      	str	r2, [r3, #8]
 8006a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a10:	463b      	mov	r3, r7
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006a18:	4b1d      	ldr	r3, [pc, #116]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006a94 <MX_TIM3_Init+0x98>)
 8006a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8006a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a20:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8006a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a26:	4b1a      	ldr	r3, [pc, #104]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8006a2c:	4b18      	ldr	r3, [pc, #96]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a2e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a34:	4b16      	ldr	r3, [pc, #88]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a3a:	4b15      	ldr	r3, [pc, #84]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006a40:	4813      	ldr	r0, [pc, #76]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a42:	f001 f9e7 	bl	8007e14 <HAL_TIM_Base_Init>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006a4c:	f7ff fd85 	bl	800655a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	480c      	ldr	r0, [pc, #48]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a5e:	f001 fba7 	bl	80081b0 <HAL_TIM_ConfigClockSource>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8006a68:	f7ff fd77 	bl	800655a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a70:	2300      	movs	r3, #0
 8006a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006a74:	463b      	mov	r3, r7
 8006a76:	4619      	mov	r1, r3
 8006a78:	4805      	ldr	r0, [pc, #20]	@ (8006a90 <MX_TIM3_Init+0x94>)
 8006a7a:	f001 fda1 	bl	80085c0 <HAL_TIMEx_MasterConfigSynchronization>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006a84:	f7ff fd69 	bl	800655a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006a88:	bf00      	nop
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20001624 	.word	0x20001624
 8006a94:	40000400 	.word	0x40000400

08006a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8006adc <HAL_TIM_Base_MspInit+0x44>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d113      	bne.n	8006ad2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <HAL_TIM_Base_MspInit+0x48>)
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae0 <HAL_TIM_Base_MspInit+0x48>)
 8006ab0:	f043 0302 	orr.w	r3, r3, #2
 8006ab4:	61d3      	str	r3, [r2, #28]
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae0 <HAL_TIM_Base_MspInit+0x48>)
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 1);
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	201d      	movs	r0, #29
 8006ac8:	f000 fa31 	bl	8006f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006acc:	201d      	movs	r0, #29
 8006ace:	f000 fa4a 	bl	8006f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40021000 	.word	0x40021000

08006ae4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006ae8:	4b10      	ldr	r3, [pc, #64]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006aea:	4a11      	ldr	r2, [pc, #68]	@ (8006b30 <MX_USART1_UART_Init+0x4c>)
 8006aec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8006aee:	4b0f      	ldr	r3, [pc, #60]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006af0:	4a10      	ldr	r2, [pc, #64]	@ (8006b34 <MX_USART1_UART_Init+0x50>)
 8006af2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006af4:	4b0d      	ldr	r3, [pc, #52]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006afa:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b00:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b06:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006b08:	220c      	movs	r2, #12
 8006b0a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b0c:	4b07      	ldr	r3, [pc, #28]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b12:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b18:	4804      	ldr	r0, [pc, #16]	@ (8006b2c <MX_USART1_UART_Init+0x48>)
 8006b1a:	f001 fdcf 	bl	80086bc <HAL_UART_Init>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8006b24:	f7ff fd19 	bl	800655a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006b28:	bf00      	nop
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	2000166c 	.word	0x2000166c
 8006b30:	40013800 	.word	0x40013800
 8006b34:	000f4240 	.word	0x000f4240

08006b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b40:	f107 0310 	add.w	r3, r7, #16
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
 8006b4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a20      	ldr	r2, [pc, #128]	@ (8006bd4 <HAL_UART_MspInit+0x9c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d139      	bne.n	8006bcc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006b58:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd8 <HAL_UART_MspInit+0xa0>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd8 <HAL_UART_MspInit+0xa0>)
 8006b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b62:	6193      	str	r3, [r2, #24]
 8006b64:	4b1c      	ldr	r3, [pc, #112]	@ (8006bd8 <HAL_UART_MspInit+0xa0>)
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b70:	4b19      	ldr	r3, [pc, #100]	@ (8006bd8 <HAL_UART_MspInit+0xa0>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	4a18      	ldr	r2, [pc, #96]	@ (8006bd8 <HAL_UART_MspInit+0xa0>)
 8006b76:	f043 0304 	orr.w	r3, r3, #4
 8006b7a:	6193      	str	r3, [r2, #24]
 8006b7c:	4b16      	ldr	r3, [pc, #88]	@ (8006bd8 <HAL_UART_MspInit+0xa0>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b92:	2303      	movs	r3, #3
 8006b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b96:	f107 0310 	add.w	r3, r7, #16
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	480f      	ldr	r0, [pc, #60]	@ (8006bdc <HAL_UART_MspInit+0xa4>)
 8006b9e:	f000 fb4d 	bl	800723c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ba6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb0:	f107 0310 	add.w	r3, r7, #16
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	4809      	ldr	r0, [pc, #36]	@ (8006bdc <HAL_UART_MspInit+0xa4>)
 8006bb8:	f000 fb40 	bl	800723c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	2025      	movs	r0, #37	@ 0x25
 8006bc2:	f000 f9b4 	bl	8006f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006bc6:	2025      	movs	r0, #37	@ 0x25
 8006bc8:	f000 f9cd 	bl	8006f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006bcc:	bf00      	nop
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40013800 	.word	0x40013800
 8006bd8:	40021000 	.word	0x40021000
 8006bdc:	40010800 	.word	0x40010800

08006be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006be0:	f7ff ff06 	bl	80069f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006be4:	480b      	ldr	r0, [pc, #44]	@ (8006c14 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8006be6:	490c      	ldr	r1, [pc, #48]	@ (8006c18 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006be8:	4a0c      	ldr	r2, [pc, #48]	@ (8006c1c <LoopFillZerobss+0x16>)
  movs r3, #0
 8006bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bec:	e002      	b.n	8006bf4 <LoopCopyDataInit>

08006bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006bf2:	3304      	adds	r3, #4

08006bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006bf8:	d3f9      	bcc.n	8006bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006bfa:	4a09      	ldr	r2, [pc, #36]	@ (8006c20 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006bfc:	4c09      	ldr	r4, [pc, #36]	@ (8006c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c00:	e001      	b.n	8006c06 <LoopFillZerobss>

08006c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c04:	3204      	adds	r2, #4

08006c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c08:	d3fb      	bcc.n	8006c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c0a:	f002 fb41 	bl	8009290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006c0e:	f7ff fbbd 	bl	800638c <main>
  bx lr
 8006c12:	4770      	bx	lr
  ldr r0, =_sdata
 8006c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c18:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8006c1c:	0800b480 	.word	0x0800b480
  ldr r2, =_sbss
 8006c20:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8006c24:	20001800 	.word	0x20001800

08006c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006c28:	e7fe      	b.n	8006c28 <ADC1_2_IRQHandler>
	...

08006c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c30:	4b08      	ldr	r3, [pc, #32]	@ (8006c54 <HAL_Init+0x28>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a07      	ldr	r2, [pc, #28]	@ (8006c54 <HAL_Init+0x28>)
 8006c36:	f043 0310 	orr.w	r3, r3, #16
 8006c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c3c:	2003      	movs	r0, #3
 8006c3e:	f000 f96b 	bl	8006f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c42:	2000      	movs	r0, #0
 8006c44:	f000 f808 	bl	8006c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c48:	f7ff fc8e 	bl	8006568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40022000 	.word	0x40022000

08006c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c60:	4b12      	ldr	r3, [pc, #72]	@ (8006cac <HAL_InitTick+0x54>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b12      	ldr	r3, [pc, #72]	@ (8006cb0 <HAL_InitTick+0x58>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f991 	bl	8006f9e <HAL_SYSTICK_Config>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e00e      	b.n	8006ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b0f      	cmp	r3, #15
 8006c8a:	d80a      	bhi.n	8006ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	f000 f94b 	bl	8006f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c98:	4a06      	ldr	r2, [pc, #24]	@ (8006cb4 <HAL_InitTick+0x5c>)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	e000      	b.n	8006ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000008 	.word	0x20000008
 8006cb0:	20000010 	.word	0x20000010
 8006cb4:	2000000c 	.word	0x2000000c

08006cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cbc:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <HAL_IncTick+0x1c>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b05      	ldr	r3, [pc, #20]	@ (8006cd8 <HAL_IncTick+0x20>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	4a03      	ldr	r2, [pc, #12]	@ (8006cd8 <HAL_IncTick+0x20>)
 8006cca:	6013      	str	r3, [r2, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr
 8006cd4:	20000010 	.word	0x20000010
 8006cd8:	200016b4 	.word	0x200016b4

08006cdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
  return uwTick;
 8006ce0:	4b02      	ldr	r3, [pc, #8]	@ (8006cec <HAL_GetTick+0x10>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr
 8006cec:	200016b4 	.word	0x200016b4

08006cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cf8:	f7ff fff0 	bl	8006cdc <HAL_GetTick>
 8006cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d08:	d005      	beq.n	8006d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d34 <HAL_Delay+0x44>)
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d16:	bf00      	nop
 8006d18:	f7ff ffe0 	bl	8006cdc <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d8f7      	bhi.n	8006d18 <HAL_Delay+0x28>
  {
  }
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000010 	.word	0x20000010

08006d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d48:	4b0c      	ldr	r3, [pc, #48]	@ (8006d7c <__NVIC_SetPriorityGrouping+0x44>)
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d54:	4013      	ands	r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d6a:	4a04      	ldr	r2, [pc, #16]	@ (8006d7c <__NVIC_SetPriorityGrouping+0x44>)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	60d3      	str	r3, [r2, #12]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	e000ed00 	.word	0xe000ed00

08006d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d80:	b480      	push	{r7}
 8006d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d84:	4b04      	ldr	r3, [pc, #16]	@ (8006d98 <__NVIC_GetPriorityGrouping+0x18>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	0a1b      	lsrs	r3, r3, #8
 8006d8a:	f003 0307 	and.w	r3, r3, #7
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	e000ed00 	.word	0xe000ed00

08006d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	db0b      	blt.n	8006dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	f003 021f 	and.w	r2, r3, #31
 8006db4:	4906      	ldr	r1, [pc, #24]	@ (8006dd0 <__NVIC_EnableIRQ+0x34>)
 8006db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8006dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr
 8006dd0:	e000e100 	.word	0xe000e100

08006dd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db12      	blt.n	8006e0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	f003 021f 	and.w	r2, r3, #31
 8006dec:	490a      	ldr	r1, [pc, #40]	@ (8006e18 <__NVIC_DisableIRQ+0x44>)
 8006dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2001      	movs	r0, #1
 8006df6:	fa00 f202 	lsl.w	r2, r0, r2
 8006dfa:	3320      	adds	r3, #32
 8006dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e00:	f3bf 8f4f 	dsb	sy
}
 8006e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006e06:	f3bf 8f6f 	isb	sy
}
 8006e0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	e000e100 	.word	0xe000e100

08006e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	6039      	str	r1, [r7, #0]
 8006e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	db0a      	blt.n	8006e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	490c      	ldr	r1, [pc, #48]	@ (8006e68 <__NVIC_SetPriority+0x4c>)
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	0112      	lsls	r2, r2, #4
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	440b      	add	r3, r1
 8006e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e44:	e00a      	b.n	8006e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	4908      	ldr	r1, [pc, #32]	@ (8006e6c <__NVIC_SetPriority+0x50>)
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	3b04      	subs	r3, #4
 8006e54:	0112      	lsls	r2, r2, #4
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	440b      	add	r3, r1
 8006e5a:	761a      	strb	r2, [r3, #24]
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	e000e100 	.word	0xe000e100
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b089      	sub	sp, #36	@ 0x24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 0307 	and.w	r3, r3, #7
 8006e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f1c3 0307 	rsb	r3, r3, #7
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	bf28      	it	cs
 8006e8e:	2304      	movcs	r3, #4
 8006e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	3304      	adds	r3, #4
 8006e96:	2b06      	cmp	r3, #6
 8006e98:	d902      	bls.n	8006ea0 <NVIC_EncodePriority+0x30>
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	3b03      	subs	r3, #3
 8006e9e:	e000      	b.n	8006ea2 <NVIC_EncodePriority+0x32>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	43da      	mvns	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	401a      	ands	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec2:	43d9      	mvns	r1, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec8:	4313      	orrs	r3, r2
         );
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3724      	adds	r7, #36	@ 0x24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr

08006ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ee4:	d301      	bcc.n	8006eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e00f      	b.n	8006f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eea:	4a0a      	ldr	r2, [pc, #40]	@ (8006f14 <SysTick_Config+0x40>)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ef2:	210f      	movs	r1, #15
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	f7ff ff90 	bl	8006e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006efc:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <SysTick_Config+0x40>)
 8006efe:	2200      	movs	r2, #0
 8006f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f02:	4b04      	ldr	r3, [pc, #16]	@ (8006f14 <SysTick_Config+0x40>)
 8006f04:	2207      	movs	r2, #7
 8006f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	e000e010 	.word	0xe000e010

08006f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff ff09 	bl	8006d38 <__NVIC_SetPriorityGrouping>
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	4603      	mov	r3, r0
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f40:	f7ff ff1e 	bl	8006d80 <__NVIC_GetPriorityGrouping>
 8006f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	6978      	ldr	r0, [r7, #20]
 8006f4c:	f7ff ff90 	bl	8006e70 <NVIC_EncodePriority>
 8006f50:	4602      	mov	r2, r0
 8006f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f56:	4611      	mov	r1, r2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff ff5f 	bl	8006e1c <__NVIC_SetPriority>
}
 8006f5e:	bf00      	nop
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff ff11 	bl	8006d9c <__NVIC_EnableIRQ>
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	4603      	mov	r3, r0
 8006f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ff1f 	bl	8006dd4 <__NVIC_DisableIRQ>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff ff94 	bl	8006ed4 <SysTick_Config>
 8006fac:	4603      	mov	r3, r0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d008      	beq.n	8006fe0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e020      	b.n	8007022 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 020e 	bic.w	r2, r2, #14
 8006fee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007008:	2101      	movs	r1, #1
 800700a:	fa01 f202 	lsl.w	r2, r1, r2
 800700e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d005      	beq.n	8007050 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2204      	movs	r2, #4
 8007048:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	73fb      	strb	r3, [r7, #15]
 800704e:	e0d6      	b.n	80071fe <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 020e 	bic.w	r2, r2, #14
 800705e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0201 	bic.w	r2, r2, #1
 800706e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	4b64      	ldr	r3, [pc, #400]	@ (8007208 <HAL_DMA_Abort_IT+0x1dc>)
 8007078:	429a      	cmp	r2, r3
 800707a:	d958      	bls.n	800712e <HAL_DMA_Abort_IT+0x102>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a62      	ldr	r2, [pc, #392]	@ (800720c <HAL_DMA_Abort_IT+0x1e0>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d04f      	beq.n	8007126 <HAL_DMA_Abort_IT+0xfa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a61      	ldr	r2, [pc, #388]	@ (8007210 <HAL_DMA_Abort_IT+0x1e4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d048      	beq.n	8007122 <HAL_DMA_Abort_IT+0xf6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a5f      	ldr	r2, [pc, #380]	@ (8007214 <HAL_DMA_Abort_IT+0x1e8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d040      	beq.n	800711c <HAL_DMA_Abort_IT+0xf0>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a5e      	ldr	r2, [pc, #376]	@ (8007218 <HAL_DMA_Abort_IT+0x1ec>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d038      	beq.n	8007116 <HAL_DMA_Abort_IT+0xea>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a5c      	ldr	r2, [pc, #368]	@ (800721c <HAL_DMA_Abort_IT+0x1f0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d030      	beq.n	8007110 <HAL_DMA_Abort_IT+0xe4>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a5b      	ldr	r2, [pc, #364]	@ (8007220 <HAL_DMA_Abort_IT+0x1f4>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d028      	beq.n	800710a <HAL_DMA_Abort_IT+0xde>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a52      	ldr	r2, [pc, #328]	@ (8007208 <HAL_DMA_Abort_IT+0x1dc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d020      	beq.n	8007104 <HAL_DMA_Abort_IT+0xd8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a57      	ldr	r2, [pc, #348]	@ (8007224 <HAL_DMA_Abort_IT+0x1f8>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d019      	beq.n	8007100 <HAL_DMA_Abort_IT+0xd4>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a55      	ldr	r2, [pc, #340]	@ (8007228 <HAL_DMA_Abort_IT+0x1fc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d012      	beq.n	80070fc <HAL_DMA_Abort_IT+0xd0>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a54      	ldr	r2, [pc, #336]	@ (800722c <HAL_DMA_Abort_IT+0x200>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00a      	beq.n	80070f6 <HAL_DMA_Abort_IT+0xca>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a52      	ldr	r2, [pc, #328]	@ (8007230 <HAL_DMA_Abort_IT+0x204>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d102      	bne.n	80070f0 <HAL_DMA_Abort_IT+0xc4>
 80070ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070ee:	e01b      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 80070f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80070f4:	e018      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 80070f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80070fa:	e015      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 80070fc:	2310      	movs	r3, #16
 80070fe:	e013      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 8007100:	2301      	movs	r3, #1
 8007102:	e011      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 8007104:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007108:	e00e      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 800710a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800710e:	e00b      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 8007110:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007114:	e008      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 8007116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800711a:	e005      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 800711c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007120:	e002      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 8007122:	2310      	movs	r3, #16
 8007124:	e000      	b.n	8007128 <HAL_DMA_Abort_IT+0xfc>
 8007126:	2301      	movs	r3, #1
 8007128:	4a42      	ldr	r2, [pc, #264]	@ (8007234 <HAL_DMA_Abort_IT+0x208>)
 800712a:	6053      	str	r3, [r2, #4]
 800712c:	e057      	b.n	80071de <HAL_DMA_Abort_IT+0x1b2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a36      	ldr	r2, [pc, #216]	@ (800720c <HAL_DMA_Abort_IT+0x1e0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d04f      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x1ac>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a34      	ldr	r2, [pc, #208]	@ (8007210 <HAL_DMA_Abort_IT+0x1e4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d048      	beq.n	80071d4 <HAL_DMA_Abort_IT+0x1a8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a33      	ldr	r2, [pc, #204]	@ (8007214 <HAL_DMA_Abort_IT+0x1e8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d040      	beq.n	80071ce <HAL_DMA_Abort_IT+0x1a2>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a31      	ldr	r2, [pc, #196]	@ (8007218 <HAL_DMA_Abort_IT+0x1ec>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d038      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x19c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a30      	ldr	r2, [pc, #192]	@ (800721c <HAL_DMA_Abort_IT+0x1f0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d030      	beq.n	80071c2 <HAL_DMA_Abort_IT+0x196>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a2e      	ldr	r2, [pc, #184]	@ (8007220 <HAL_DMA_Abort_IT+0x1f4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d028      	beq.n	80071bc <HAL_DMA_Abort_IT+0x190>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a26      	ldr	r2, [pc, #152]	@ (8007208 <HAL_DMA_Abort_IT+0x1dc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d020      	beq.n	80071b6 <HAL_DMA_Abort_IT+0x18a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2a      	ldr	r2, [pc, #168]	@ (8007224 <HAL_DMA_Abort_IT+0x1f8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d019      	beq.n	80071b2 <HAL_DMA_Abort_IT+0x186>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a29      	ldr	r2, [pc, #164]	@ (8007228 <HAL_DMA_Abort_IT+0x1fc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d012      	beq.n	80071ae <HAL_DMA_Abort_IT+0x182>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a27      	ldr	r2, [pc, #156]	@ (800722c <HAL_DMA_Abort_IT+0x200>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00a      	beq.n	80071a8 <HAL_DMA_Abort_IT+0x17c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a26      	ldr	r2, [pc, #152]	@ (8007230 <HAL_DMA_Abort_IT+0x204>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d102      	bne.n	80071a2 <HAL_DMA_Abort_IT+0x176>
 800719c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071a0:	e01b      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071a6:	e018      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071ac:	e015      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071ae:	2310      	movs	r3, #16
 80071b0:	e013      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071b2:	2301      	movs	r3, #1
 80071b4:	e011      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071ba:	e00e      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80071c0:	e00b      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80071c6:	e008      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80071cc:	e005      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80071d2:	e002      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071d4:	2310      	movs	r3, #16
 80071d6:	e000      	b.n	80071da <HAL_DMA_Abort_IT+0x1ae>
 80071d8:	2301      	movs	r3, #1
 80071da:	4a17      	ldr	r2, [pc, #92]	@ (8007238 <HAL_DMA_Abort_IT+0x20c>)
 80071dc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
    } 
  }
  return status;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	40020080 	.word	0x40020080
 800720c:	40020008 	.word	0x40020008
 8007210:	4002001c 	.word	0x4002001c
 8007214:	40020030 	.word	0x40020030
 8007218:	40020044 	.word	0x40020044
 800721c:	40020058 	.word	0x40020058
 8007220:	4002006c 	.word	0x4002006c
 8007224:	40020408 	.word	0x40020408
 8007228:	4002041c 	.word	0x4002041c
 800722c:	40020430 	.word	0x40020430
 8007230:	40020444 	.word	0x40020444
 8007234:	40020400 	.word	0x40020400
 8007238:	40020000 	.word	0x40020000

0800723c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800723c:	b480      	push	{r7}
 800723e:	b08b      	sub	sp, #44	@ 0x2c
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007246:	2300      	movs	r3, #0
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800724a:	2300      	movs	r3, #0
 800724c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800724e:	e179      	b.n	8007544 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007250:	2201      	movs	r2, #1
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	4013      	ands	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	f040 8168 	bne.w	800753e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	4a96      	ldr	r2, [pc, #600]	@ (80074cc <HAL_GPIO_Init+0x290>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d05e      	beq.n	8007336 <HAL_GPIO_Init+0xfa>
 8007278:	4a94      	ldr	r2, [pc, #592]	@ (80074cc <HAL_GPIO_Init+0x290>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d875      	bhi.n	800736a <HAL_GPIO_Init+0x12e>
 800727e:	4a94      	ldr	r2, [pc, #592]	@ (80074d0 <HAL_GPIO_Init+0x294>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d058      	beq.n	8007336 <HAL_GPIO_Init+0xfa>
 8007284:	4a92      	ldr	r2, [pc, #584]	@ (80074d0 <HAL_GPIO_Init+0x294>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d86f      	bhi.n	800736a <HAL_GPIO_Init+0x12e>
 800728a:	4a92      	ldr	r2, [pc, #584]	@ (80074d4 <HAL_GPIO_Init+0x298>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d052      	beq.n	8007336 <HAL_GPIO_Init+0xfa>
 8007290:	4a90      	ldr	r2, [pc, #576]	@ (80074d4 <HAL_GPIO_Init+0x298>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d869      	bhi.n	800736a <HAL_GPIO_Init+0x12e>
 8007296:	4a90      	ldr	r2, [pc, #576]	@ (80074d8 <HAL_GPIO_Init+0x29c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d04c      	beq.n	8007336 <HAL_GPIO_Init+0xfa>
 800729c:	4a8e      	ldr	r2, [pc, #568]	@ (80074d8 <HAL_GPIO_Init+0x29c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d863      	bhi.n	800736a <HAL_GPIO_Init+0x12e>
 80072a2:	4a8e      	ldr	r2, [pc, #568]	@ (80074dc <HAL_GPIO_Init+0x2a0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d046      	beq.n	8007336 <HAL_GPIO_Init+0xfa>
 80072a8:	4a8c      	ldr	r2, [pc, #560]	@ (80074dc <HAL_GPIO_Init+0x2a0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d85d      	bhi.n	800736a <HAL_GPIO_Init+0x12e>
 80072ae:	2b12      	cmp	r3, #18
 80072b0:	d82a      	bhi.n	8007308 <HAL_GPIO_Init+0xcc>
 80072b2:	2b12      	cmp	r3, #18
 80072b4:	d859      	bhi.n	800736a <HAL_GPIO_Init+0x12e>
 80072b6:	a201      	add	r2, pc, #4	@ (adr r2, 80072bc <HAL_GPIO_Init+0x80>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	08007337 	.word	0x08007337
 80072c0:	08007311 	.word	0x08007311
 80072c4:	08007323 	.word	0x08007323
 80072c8:	08007365 	.word	0x08007365
 80072cc:	0800736b 	.word	0x0800736b
 80072d0:	0800736b 	.word	0x0800736b
 80072d4:	0800736b 	.word	0x0800736b
 80072d8:	0800736b 	.word	0x0800736b
 80072dc:	0800736b 	.word	0x0800736b
 80072e0:	0800736b 	.word	0x0800736b
 80072e4:	0800736b 	.word	0x0800736b
 80072e8:	0800736b 	.word	0x0800736b
 80072ec:	0800736b 	.word	0x0800736b
 80072f0:	0800736b 	.word	0x0800736b
 80072f4:	0800736b 	.word	0x0800736b
 80072f8:	0800736b 	.word	0x0800736b
 80072fc:	0800736b 	.word	0x0800736b
 8007300:	08007319 	.word	0x08007319
 8007304:	0800732d 	.word	0x0800732d
 8007308:	4a75      	ldr	r2, [pc, #468]	@ (80074e0 <HAL_GPIO_Init+0x2a4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800730e:	e02c      	b.n	800736a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	623b      	str	r3, [r7, #32]
          break;
 8007316:	e029      	b.n	800736c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	3304      	adds	r3, #4
 800731e:	623b      	str	r3, [r7, #32]
          break;
 8007320:	e024      	b.n	800736c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	3308      	adds	r3, #8
 8007328:	623b      	str	r3, [r7, #32]
          break;
 800732a:	e01f      	b.n	800736c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	330c      	adds	r3, #12
 8007332:	623b      	str	r3, [r7, #32]
          break;
 8007334:	e01a      	b.n	800736c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d102      	bne.n	8007344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800733e:	2304      	movs	r3, #4
 8007340:	623b      	str	r3, [r7, #32]
          break;
 8007342:	e013      	b.n	800736c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d105      	bne.n	8007358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800734c:	2308      	movs	r3, #8
 800734e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	611a      	str	r2, [r3, #16]
          break;
 8007356:	e009      	b.n	800736c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007358:	2308      	movs	r3, #8
 800735a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	69fa      	ldr	r2, [r7, #28]
 8007360:	615a      	str	r2, [r3, #20]
          break;
 8007362:	e003      	b.n	800736c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007364:	2300      	movs	r3, #0
 8007366:	623b      	str	r3, [r7, #32]
          break;
 8007368:	e000      	b.n	800736c <HAL_GPIO_Init+0x130>
          break;
 800736a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	2bff      	cmp	r3, #255	@ 0xff
 8007370:	d801      	bhi.n	8007376 <HAL_GPIO_Init+0x13a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	e001      	b.n	800737a <HAL_GPIO_Init+0x13e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2bff      	cmp	r3, #255	@ 0xff
 8007380:	d802      	bhi.n	8007388 <HAL_GPIO_Init+0x14c>
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	e002      	b.n	800738e <HAL_GPIO_Init+0x152>
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	3b08      	subs	r3, #8
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	210f      	movs	r1, #15
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	fa01 f303 	lsl.w	r3, r1, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	401a      	ands	r2, r3
 80073a0:	6a39      	ldr	r1, [r7, #32]
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	fa01 f303 	lsl.w	r3, r1, r3
 80073a8:	431a      	orrs	r2, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f000 80c1 	beq.w	800753e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80073bc:	4b49      	ldr	r3, [pc, #292]	@ (80074e4 <HAL_GPIO_Init+0x2a8>)
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	4a48      	ldr	r2, [pc, #288]	@ (80074e4 <HAL_GPIO_Init+0x2a8>)
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	6193      	str	r3, [r2, #24]
 80073c8:	4b46      	ldr	r3, [pc, #280]	@ (80074e4 <HAL_GPIO_Init+0x2a8>)
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80073d4:	4a44      	ldr	r2, [pc, #272]	@ (80074e8 <HAL_GPIO_Init+0x2ac>)
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	089b      	lsrs	r3, r3, #2
 80073da:	3302      	adds	r3, #2
 80073dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80073e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e4:	f003 0303 	and.w	r3, r3, #3
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	220f      	movs	r2, #15
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4013      	ands	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a3c      	ldr	r2, [pc, #240]	@ (80074ec <HAL_GPIO_Init+0x2b0>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d01f      	beq.n	8007440 <HAL_GPIO_Init+0x204>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a3b      	ldr	r2, [pc, #236]	@ (80074f0 <HAL_GPIO_Init+0x2b4>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d019      	beq.n	800743c <HAL_GPIO_Init+0x200>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a3a      	ldr	r2, [pc, #232]	@ (80074f4 <HAL_GPIO_Init+0x2b8>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d013      	beq.n	8007438 <HAL_GPIO_Init+0x1fc>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a39      	ldr	r2, [pc, #228]	@ (80074f8 <HAL_GPIO_Init+0x2bc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d00d      	beq.n	8007434 <HAL_GPIO_Init+0x1f8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a38      	ldr	r2, [pc, #224]	@ (80074fc <HAL_GPIO_Init+0x2c0>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d007      	beq.n	8007430 <HAL_GPIO_Init+0x1f4>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a37      	ldr	r2, [pc, #220]	@ (8007500 <HAL_GPIO_Init+0x2c4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d101      	bne.n	800742c <HAL_GPIO_Init+0x1f0>
 8007428:	2305      	movs	r3, #5
 800742a:	e00a      	b.n	8007442 <HAL_GPIO_Init+0x206>
 800742c:	2306      	movs	r3, #6
 800742e:	e008      	b.n	8007442 <HAL_GPIO_Init+0x206>
 8007430:	2304      	movs	r3, #4
 8007432:	e006      	b.n	8007442 <HAL_GPIO_Init+0x206>
 8007434:	2303      	movs	r3, #3
 8007436:	e004      	b.n	8007442 <HAL_GPIO_Init+0x206>
 8007438:	2302      	movs	r3, #2
 800743a:	e002      	b.n	8007442 <HAL_GPIO_Init+0x206>
 800743c:	2301      	movs	r3, #1
 800743e:	e000      	b.n	8007442 <HAL_GPIO_Init+0x206>
 8007440:	2300      	movs	r3, #0
 8007442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007444:	f002 0203 	and.w	r2, r2, #3
 8007448:	0092      	lsls	r2, r2, #2
 800744a:	4093      	lsls	r3, r2
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007452:	4925      	ldr	r1, [pc, #148]	@ (80074e8 <HAL_GPIO_Init+0x2ac>)
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	089b      	lsrs	r3, r3, #2
 8007458:	3302      	adds	r3, #2
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d006      	beq.n	800747a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800746c:	4b25      	ldr	r3, [pc, #148]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	4924      	ldr	r1, [pc, #144]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	4313      	orrs	r3, r2
 8007476:	608b      	str	r3, [r1, #8]
 8007478:	e006      	b.n	8007488 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800747a:	4b22      	ldr	r3, [pc, #136]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	43db      	mvns	r3, r3
 8007482:	4920      	ldr	r1, [pc, #128]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 8007484:	4013      	ands	r3, r2
 8007486:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d006      	beq.n	80074a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007494:	4b1b      	ldr	r3, [pc, #108]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	491a      	ldr	r1, [pc, #104]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	4313      	orrs	r3, r2
 800749e:	60cb      	str	r3, [r1, #12]
 80074a0:	e006      	b.n	80074b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80074a2:	4b18      	ldr	r3, [pc, #96]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	43db      	mvns	r3, r3
 80074aa:	4916      	ldr	r1, [pc, #88]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d025      	beq.n	8007508 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80074bc:	4b11      	ldr	r3, [pc, #68]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	4910      	ldr	r1, [pc, #64]	@ (8007504 <HAL_GPIO_Init+0x2c8>)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	604b      	str	r3, [r1, #4]
 80074c8:	e025      	b.n	8007516 <HAL_GPIO_Init+0x2da>
 80074ca:	bf00      	nop
 80074cc:	10320000 	.word	0x10320000
 80074d0:	10310000 	.word	0x10310000
 80074d4:	10220000 	.word	0x10220000
 80074d8:	10210000 	.word	0x10210000
 80074dc:	10120000 	.word	0x10120000
 80074e0:	10110000 	.word	0x10110000
 80074e4:	40021000 	.word	0x40021000
 80074e8:	40010000 	.word	0x40010000
 80074ec:	40010800 	.word	0x40010800
 80074f0:	40010c00 	.word	0x40010c00
 80074f4:	40011000 	.word	0x40011000
 80074f8:	40011400 	.word	0x40011400
 80074fc:	40011800 	.word	0x40011800
 8007500:	40011c00 	.word	0x40011c00
 8007504:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007508:	4b15      	ldr	r3, [pc, #84]	@ (8007560 <HAL_GPIO_Init+0x324>)
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	43db      	mvns	r3, r3
 8007510:	4913      	ldr	r1, [pc, #76]	@ (8007560 <HAL_GPIO_Init+0x324>)
 8007512:	4013      	ands	r3, r2
 8007514:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d006      	beq.n	8007530 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007522:	4b0f      	ldr	r3, [pc, #60]	@ (8007560 <HAL_GPIO_Init+0x324>)
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	490e      	ldr	r1, [pc, #56]	@ (8007560 <HAL_GPIO_Init+0x324>)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	4313      	orrs	r3, r2
 800752c:	600b      	str	r3, [r1, #0]
 800752e:	e006      	b.n	800753e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007530:	4b0b      	ldr	r3, [pc, #44]	@ (8007560 <HAL_GPIO_Init+0x324>)
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	43db      	mvns	r3, r3
 8007538:	4909      	ldr	r1, [pc, #36]	@ (8007560 <HAL_GPIO_Init+0x324>)
 800753a:	4013      	ands	r3, r2
 800753c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	3301      	adds	r3, #1
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	fa22 f303 	lsr.w	r3, r2, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	f47f ae7e 	bne.w	8007250 <HAL_GPIO_Init+0x14>
  }
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop
 8007558:	372c      	adds	r7, #44	@ 0x2c
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr
 8007560:	40010400 	.word	0x40010400

08007564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	460b      	mov	r3, r1
 800756e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800757c:	2301      	movs	r3, #1
 800757e:	73fb      	strb	r3, [r7, #15]
 8007580:	e001      	b.n	8007586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	bc80      	pop	{r7}
 8007590:	4770      	bx	lr

08007592 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	807b      	strh	r3, [r7, #2]
 800759e:	4613      	mov	r3, r2
 80075a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075a2:	787b      	ldrb	r3, [r7, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075a8:	887a      	ldrh	r2, [r7, #2]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80075ae:	e003      	b.n	80075b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80075b0:	887b      	ldrh	r3, [r7, #2]
 80075b2:	041a      	lsls	r2, r3, #16
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	611a      	str	r2, [r3, #16]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	bc80      	pop	{r7}
 80075c0:	4770      	bx	lr
	...

080075c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80075ce:	4b08      	ldr	r3, [pc, #32]	@ (80075f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075d0:	695a      	ldr	r2, [r3, #20]
 80075d2:	88fb      	ldrh	r3, [r7, #6]
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075da:	4a05      	ldr	r2, [pc, #20]	@ (80075f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075dc:	88fb      	ldrh	r3, [r7, #6]
 80075de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7ff f8a0 	bl	8006728 <HAL_GPIO_EXTI_Callback>
  }
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40010400 	.word	0x40010400

080075f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e272      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	f000 8087 	beq.w	8007722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007614:	4b92      	ldr	r3, [pc, #584]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f003 030c 	and.w	r3, r3, #12
 800761c:	2b04      	cmp	r3, #4
 800761e:	d00c      	beq.n	800763a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007620:	4b8f      	ldr	r3, [pc, #572]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f003 030c 	and.w	r3, r3, #12
 8007628:	2b08      	cmp	r3, #8
 800762a:	d112      	bne.n	8007652 <HAL_RCC_OscConfig+0x5e>
 800762c:	4b8c      	ldr	r3, [pc, #560]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007638:	d10b      	bne.n	8007652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800763a:	4b89      	ldr	r3, [pc, #548]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d06c      	beq.n	8007720 <HAL_RCC_OscConfig+0x12c>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d168      	bne.n	8007720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e24c      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800765a:	d106      	bne.n	800766a <HAL_RCC_OscConfig+0x76>
 800765c:	4b80      	ldr	r3, [pc, #512]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a7f      	ldr	r2, [pc, #508]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e02e      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d10c      	bne.n	800768c <HAL_RCC_OscConfig+0x98>
 8007672:	4b7b      	ldr	r3, [pc, #492]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a7a      	ldr	r2, [pc, #488]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	4b78      	ldr	r3, [pc, #480]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a77      	ldr	r2, [pc, #476]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007684:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	e01d      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007694:	d10c      	bne.n	80076b0 <HAL_RCC_OscConfig+0xbc>
 8007696:	4b72      	ldr	r3, [pc, #456]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a71      	ldr	r2, [pc, #452]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800769c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076a0:	6013      	str	r3, [r2, #0]
 80076a2:	4b6f      	ldr	r3, [pc, #444]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a6e      	ldr	r2, [pc, #440]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e00b      	b.n	80076c8 <HAL_RCC_OscConfig+0xd4>
 80076b0:	4b6b      	ldr	r3, [pc, #428]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a6a      	ldr	r2, [pc, #424]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	4b68      	ldr	r3, [pc, #416]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a67      	ldr	r2, [pc, #412]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d013      	beq.n	80076f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d0:	f7ff fb04 	bl	8006cdc <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076d8:	f7ff fb00 	bl	8006cdc <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b64      	cmp	r3, #100	@ 0x64
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e200      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ea:	4b5d      	ldr	r3, [pc, #372]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0xe4>
 80076f6:	e014      	b.n	8007722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f8:	f7ff faf0 	bl	8006cdc <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007700:	f7ff faec 	bl	8006cdc <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	@ 0x64
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e1ec      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007712:	4b53      	ldr	r3, [pc, #332]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1f0      	bne.n	8007700 <HAL_RCC_OscConfig+0x10c>
 800771e:	e000      	b.n	8007722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d063      	beq.n	80077f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800772e:	4b4c      	ldr	r3, [pc, #304]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f003 030c 	and.w	r3, r3, #12
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800773a:	4b49      	ldr	r3, [pc, #292]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f003 030c 	and.w	r3, r3, #12
 8007742:	2b08      	cmp	r3, #8
 8007744:	d11c      	bne.n	8007780 <HAL_RCC_OscConfig+0x18c>
 8007746:	4b46      	ldr	r3, [pc, #280]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d116      	bne.n	8007780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007752:	4b43      	ldr	r3, [pc, #268]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <HAL_RCC_OscConfig+0x176>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d001      	beq.n	800776a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e1c0      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776a:	4b3d      	ldr	r3, [pc, #244]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	4939      	ldr	r1, [pc, #228]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800777e:	e03a      	b.n	80077f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d020      	beq.n	80077ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007788:	4b36      	ldr	r3, [pc, #216]	@ (8007864 <HAL_RCC_OscConfig+0x270>)
 800778a:	2201      	movs	r2, #1
 800778c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778e:	f7ff faa5 	bl	8006cdc <HAL_GetTick>
 8007792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007794:	e008      	b.n	80077a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007796:	f7ff faa1 	bl	8006cdc <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d901      	bls.n	80077a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e1a1      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a8:	4b2d      	ldr	r3, [pc, #180]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0f0      	beq.n	8007796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	4927      	ldr	r1, [pc, #156]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	600b      	str	r3, [r1, #0]
 80077c8:	e015      	b.n	80077f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077ca:	4b26      	ldr	r3, [pc, #152]	@ (8007864 <HAL_RCC_OscConfig+0x270>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077d0:	f7ff fa84 	bl	8006cdc <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d8:	f7ff fa80 	bl	8006cdc <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e180      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d03a      	beq.n	8007878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d019      	beq.n	800783e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800780a:	4b17      	ldr	r3, [pc, #92]	@ (8007868 <HAL_RCC_OscConfig+0x274>)
 800780c:	2201      	movs	r2, #1
 800780e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007810:	f7ff fa64 	bl	8006cdc <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007818:	f7ff fa60 	bl	8006cdc <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e160      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782a:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <HAL_RCC_OscConfig+0x26c>)
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0f0      	beq.n	8007818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007836:	2001      	movs	r0, #1
 8007838:	f000 face 	bl	8007dd8 <RCC_Delay>
 800783c:	e01c      	b.n	8007878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800783e:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <HAL_RCC_OscConfig+0x274>)
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007844:	f7ff fa4a 	bl	8006cdc <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800784a:	e00f      	b.n	800786c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800784c:	f7ff fa46 	bl	8006cdc <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d908      	bls.n	800786c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e146      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
 800785e:	bf00      	nop
 8007860:	40021000 	.word	0x40021000
 8007864:	42420000 	.word	0x42420000
 8007868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800786c:	4b92      	ldr	r3, [pc, #584]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e9      	bne.n	800784c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 80a6 	beq.w	80079d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800788a:	4b8b      	ldr	r3, [pc, #556]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10d      	bne.n	80078b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007896:	4b88      	ldr	r3, [pc, #544]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	4a87      	ldr	r2, [pc, #540]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078a0:	61d3      	str	r3, [r2, #28]
 80078a2:	4b85      	ldr	r3, [pc, #532]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078aa:	60bb      	str	r3, [r7, #8]
 80078ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b2:	4b82      	ldr	r3, [pc, #520]	@ (8007abc <HAL_RCC_OscConfig+0x4c8>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d118      	bne.n	80078f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078be:	4b7f      	ldr	r3, [pc, #508]	@ (8007abc <HAL_RCC_OscConfig+0x4c8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a7e      	ldr	r2, [pc, #504]	@ (8007abc <HAL_RCC_OscConfig+0x4c8>)
 80078c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ca:	f7ff fa07 	bl	8006cdc <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d2:	f7ff fa03 	bl	8006cdc <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b64      	cmp	r3, #100	@ 0x64
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e103      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e4:	4b75      	ldr	r3, [pc, #468]	@ (8007abc <HAL_RCC_OscConfig+0x4c8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d106      	bne.n	8007906 <HAL_RCC_OscConfig+0x312>
 80078f8:	4b6f      	ldr	r3, [pc, #444]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	4a6e      	ldr	r2, [pc, #440]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	6213      	str	r3, [r2, #32]
 8007904:	e02d      	b.n	8007962 <HAL_RCC_OscConfig+0x36e>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10c      	bne.n	8007928 <HAL_RCC_OscConfig+0x334>
 800790e:	4b6a      	ldr	r3, [pc, #424]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	4a69      	ldr	r2, [pc, #420]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007914:	f023 0301 	bic.w	r3, r3, #1
 8007918:	6213      	str	r3, [r2, #32]
 800791a:	4b67      	ldr	r3, [pc, #412]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	4a66      	ldr	r2, [pc, #408]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007920:	f023 0304 	bic.w	r3, r3, #4
 8007924:	6213      	str	r3, [r2, #32]
 8007926:	e01c      	b.n	8007962 <HAL_RCC_OscConfig+0x36e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b05      	cmp	r3, #5
 800792e:	d10c      	bne.n	800794a <HAL_RCC_OscConfig+0x356>
 8007930:	4b61      	ldr	r3, [pc, #388]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007932:	6a1b      	ldr	r3, [r3, #32]
 8007934:	4a60      	ldr	r2, [pc, #384]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007936:	f043 0304 	orr.w	r3, r3, #4
 800793a:	6213      	str	r3, [r2, #32]
 800793c:	4b5e      	ldr	r3, [pc, #376]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	4a5d      	ldr	r2, [pc, #372]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	6213      	str	r3, [r2, #32]
 8007948:	e00b      	b.n	8007962 <HAL_RCC_OscConfig+0x36e>
 800794a:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	4a5a      	ldr	r2, [pc, #360]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	6213      	str	r3, [r2, #32]
 8007956:	4b58      	ldr	r3, [pc, #352]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007958:	6a1b      	ldr	r3, [r3, #32]
 800795a:	4a57      	ldr	r2, [pc, #348]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800795c:	f023 0304 	bic.w	r3, r3, #4
 8007960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d015      	beq.n	8007996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796a:	f7ff f9b7 	bl	8006cdc <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007970:	e00a      	b.n	8007988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007972:	f7ff f9b3 	bl	8006cdc <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007980:	4293      	cmp	r3, r2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e0b1      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007988:	4b4b      	ldr	r3, [pc, #300]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ee      	beq.n	8007972 <HAL_RCC_OscConfig+0x37e>
 8007994:	e014      	b.n	80079c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007996:	f7ff f9a1 	bl	8006cdc <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800799c:	e00a      	b.n	80079b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799e:	f7ff f99d 	bl	8006cdc <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e09b      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b4:	4b40      	ldr	r3, [pc, #256]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1ee      	bne.n	800799e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d105      	bne.n	80079d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079c6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4a3b      	ldr	r2, [pc, #236]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 80079cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8087 	beq.w	8007aea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079dc:	4b36      	ldr	r3, [pc, #216]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 030c 	and.w	r3, r3, #12
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d061      	beq.n	8007aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d146      	bne.n	8007a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f0:	4b33      	ldr	r3, [pc, #204]	@ (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f6:	f7ff f971 	bl	8006cdc <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fe:	f7ff f96d 	bl	8006cdc <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e06d      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a10:	4b29      	ldr	r3, [pc, #164]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f0      	bne.n	80079fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a24:	d108      	bne.n	8007a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a26:	4b24      	ldr	r3, [pc, #144]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	4921      	ldr	r1, [pc, #132]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a38:	4b1f      	ldr	r3, [pc, #124]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a19      	ldr	r1, [r3, #32]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	491b      	ldr	r1, [pc, #108]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a50:	4b1b      	ldr	r3, [pc, #108]	@ (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a56:	f7ff f941 	bl	8006cdc <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a5e:	f7ff f93d 	bl	8006cdc <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e03d      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a70:	4b11      	ldr	r3, [pc, #68]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f0      	beq.n	8007a5e <HAL_RCC_OscConfig+0x46a>
 8007a7c:	e035      	b.n	8007aea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a7e:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <HAL_RCC_OscConfig+0x4cc>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a84:	f7ff f92a 	bl	8006cdc <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a8c:	f7ff f926 	bl	8006cdc <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e026      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a9e:	4b06      	ldr	r3, [pc, #24]	@ (8007ab8 <HAL_RCC_OscConfig+0x4c4>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x498>
 8007aaa:	e01e      	b.n	8007aea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d107      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e019      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	40007000 	.word	0x40007000
 8007ac0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8007af4 <HAL_RCC_OscConfig+0x500>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d106      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d001      	beq.n	8007aea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40021000 	.word	0x40021000

08007af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e0d0      	b.n	8007cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d910      	bls.n	8007b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b1a:	4b67      	ldr	r3, [pc, #412]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f023 0207 	bic.w	r2, r3, #7
 8007b22:	4965      	ldr	r1, [pc, #404]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2a:	4b63      	ldr	r3, [pc, #396]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d001      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0b8      	b.n	8007cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d020      	beq.n	8007b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b54:	4b59      	ldr	r3, [pc, #356]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4a58      	ldr	r2, [pc, #352]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007b5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b6c:	4b53      	ldr	r3, [pc, #332]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	4a52      	ldr	r2, [pc, #328]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007b72:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b78:	4b50      	ldr	r3, [pc, #320]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	494d      	ldr	r1, [pc, #308]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d040      	beq.n	8007c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d107      	bne.n	8007bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b9e:	4b47      	ldr	r3, [pc, #284]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d115      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e07f      	b.n	8007cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d107      	bne.n	8007bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb6:	4b41      	ldr	r3, [pc, #260]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d109      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e073      	b.n	8007cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e06b      	b.n	8007cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bd6:	4b39      	ldr	r3, [pc, #228]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f023 0203 	bic.w	r2, r3, #3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	4936      	ldr	r1, [pc, #216]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007be8:	f7ff f878 	bl	8006cdc <HAL_GetTick>
 8007bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bee:	e00a      	b.n	8007c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf0:	f7ff f874 	bl	8006cdc <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e053      	b.n	8007cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c06:	4b2d      	ldr	r3, [pc, #180]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f003 020c 	and.w	r2, r3, #12
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d1eb      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c18:	4b27      	ldr	r3, [pc, #156]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d210      	bcs.n	8007c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c26:	4b24      	ldr	r3, [pc, #144]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f023 0207 	bic.w	r2, r3, #7
 8007c2e:	4922      	ldr	r1, [pc, #136]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c36:	4b20      	ldr	r3, [pc, #128]	@ (8007cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d001      	beq.n	8007c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e032      	b.n	8007cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c54:	4b19      	ldr	r3, [pc, #100]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	4916      	ldr	r1, [pc, #88]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c72:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	490e      	ldr	r1, [pc, #56]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c86:	f000 f821 	bl	8007ccc <HAL_RCC_GetSysClockFreq>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <HAL_RCC_ClockConfig+0x1c4>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	091b      	lsrs	r3, r3, #4
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	490a      	ldr	r1, [pc, #40]	@ (8007cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8007c98:	5ccb      	ldrb	r3, [r1, r3]
 8007c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9e:	4a09      	ldr	r2, [pc, #36]	@ (8007cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8007ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ca2:	4b09      	ldr	r3, [pc, #36]	@ (8007cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe ffd6 	bl	8006c58 <HAL_InitTick>

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40022000 	.word	0x40022000
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	0800b418 	.word	0x0800b418
 8007cc4:	20000008 	.word	0x20000008
 8007cc8:	2000000c 	.word	0x2000000c

08007ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60bb      	str	r3, [r7, #8]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8007d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f003 030c 	and.w	r3, r3, #12
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d002      	beq.n	8007cfc <HAL_RCC_GetSysClockFreq+0x30>
 8007cf6:	2b08      	cmp	r3, #8
 8007cf8:	d003      	beq.n	8007d02 <HAL_RCC_GetSysClockFreq+0x36>
 8007cfa:	e027      	b.n	8007d4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007cfc:	4b19      	ldr	r3, [pc, #100]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8007cfe:	613b      	str	r3, [r7, #16]
      break;
 8007d00:	e027      	b.n	8007d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	0c9b      	lsrs	r3, r3, #18
 8007d06:	f003 030f 	and.w	r3, r3, #15
 8007d0a:	4a17      	ldr	r2, [pc, #92]	@ (8007d68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007d0c:	5cd3      	ldrb	r3, [r2, r3]
 8007d0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d010      	beq.n	8007d3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d1a:	4b11      	ldr	r3, [pc, #68]	@ (8007d60 <HAL_RCC_GetSysClockFreq+0x94>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	0c5b      	lsrs	r3, r3, #17
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	4a11      	ldr	r2, [pc, #68]	@ (8007d6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007d26:	5cd3      	ldrb	r3, [r2, r3]
 8007d28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d2e:	fb03 f202 	mul.w	r2, r3, r2
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	e004      	b.n	8007d46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007d40:	fb02 f303 	mul.w	r3, r2, r3
 8007d44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	613b      	str	r3, [r7, #16]
      break;
 8007d4a:	e002      	b.n	8007d52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d4c:	4b05      	ldr	r3, [pc, #20]	@ (8007d64 <HAL_RCC_GetSysClockFreq+0x98>)
 8007d4e:	613b      	str	r3, [r7, #16]
      break;
 8007d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d52:	693b      	ldr	r3, [r7, #16]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40021000 	.word	0x40021000
 8007d64:	007a1200 	.word	0x007a1200
 8007d68:	0800b430 	.word	0x0800b430
 8007d6c:	0800b440 	.word	0x0800b440
 8007d70:	003d0900 	.word	0x003d0900

08007d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d78:	4b02      	ldr	r3, [pc, #8]	@ (8007d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bc80      	pop	{r7}
 8007d82:	4770      	bx	lr
 8007d84:	20000008 	.word	0x20000008

08007d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d8c:	f7ff fff2 	bl	8007d74 <HAL_RCC_GetHCLKFreq>
 8007d90:	4602      	mov	r2, r0
 8007d92:	4b05      	ldr	r3, [pc, #20]	@ (8007da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	0a1b      	lsrs	r3, r3, #8
 8007d98:	f003 0307 	and.w	r3, r3, #7
 8007d9c:	4903      	ldr	r1, [pc, #12]	@ (8007dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d9e:	5ccb      	ldrb	r3, [r1, r3]
 8007da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	40021000 	.word	0x40021000
 8007dac:	0800b428 	.word	0x0800b428

08007db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007db4:	f7ff ffde 	bl	8007d74 <HAL_RCC_GetHCLKFreq>
 8007db8:	4602      	mov	r2, r0
 8007dba:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	0adb      	lsrs	r3, r3, #11
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	4903      	ldr	r1, [pc, #12]	@ (8007dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dc6:	5ccb      	ldrb	r3, [r1, r3]
 8007dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	40021000 	.word	0x40021000
 8007dd4:	0800b428 	.word	0x0800b428

08007dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007de0:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <RCC_Delay+0x34>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a0a      	ldr	r2, [pc, #40]	@ (8007e10 <RCC_Delay+0x38>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	0a5b      	lsrs	r3, r3, #9
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007df4:	bf00      	nop
  }
  while (Delay --);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	1e5a      	subs	r2, r3, #1
 8007dfa:	60fa      	str	r2, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1f9      	bne.n	8007df4 <RCC_Delay+0x1c>
}
 8007e00:	bf00      	nop
 8007e02:	bf00      	nop
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr
 8007e0c:	20000008 	.word	0x20000008
 8007e10:	10624dd3 	.word	0x10624dd3

08007e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d101      	bne.n	8007e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e041      	b.n	8007eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7fe fe2c 	bl	8006a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3304      	adds	r3, #4
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f000 fa98 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d001      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e044      	b.n	8007f56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f60 <HAL_TIM_Base_Start_IT+0xac>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d018      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x6c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f64 <HAL_TIM_Base_Start_IT+0xb0>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x6c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f00:	d00e      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x6c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a18      	ldr	r2, [pc, #96]	@ (8007f68 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d009      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x6c>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a16      	ldr	r2, [pc, #88]	@ (8007f6c <HAL_TIM_Base_Start_IT+0xb8>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_TIM_Base_Start_IT+0x6c>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a15      	ldr	r2, [pc, #84]	@ (8007f70 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d111      	bne.n	8007f44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b06      	cmp	r3, #6
 8007f30:	d010      	beq.n	8007f54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0201 	orr.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f42:	e007      	b.n	8007f54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bc80      	pop	{r7}
 8007f5e:	4770      	bx	lr
 8007f60:	40012c00 	.word	0x40012c00
 8007f64:	40013400 	.word	0x40013400
 8007f68:	40000400 	.word	0x40000400
 8007f6c:	40000800 	.word	0x40000800
 8007f70:	40000c00 	.word	0x40000c00

08007f74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f022 0201 	bic.w	r2, r2, #1
 8007f8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a1a      	ldr	r2, [r3, #32]
 8007f92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007f96:	4013      	ands	r3, r2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10f      	bne.n	8007fbc <HAL_TIM_Base_Stop_IT+0x48>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a1a      	ldr	r2, [r3, #32]
 8007fa2:	f240 4344 	movw	r3, #1092	@ 0x444
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_Base_Stop_IT+0x48>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d020      	beq.n	8008034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d01b      	beq.n	8008034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f06f 0202 	mvn.w	r2, #2
 8008004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f998 	bl	8008350 <HAL_TIM_IC_CaptureCallback>
 8008020:	e005      	b.n	800802e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f98b 	bl	800833e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f99a 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d020      	beq.n	8008080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01b      	beq.n	8008080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f06f 0204 	mvn.w	r2, #4
 8008050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f972 	bl	8008350 <HAL_TIM_IC_CaptureCallback>
 800806c:	e005      	b.n	800807a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f965 	bl	800833e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f974 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d020      	beq.n	80080cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b00      	cmp	r3, #0
 8008092:	d01b      	beq.n	80080cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0208 	mvn.w	r2, #8
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f94c 	bl	8008350 <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f93f 	bl	800833e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f94e 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f003 0310 	and.w	r3, r3, #16
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d020      	beq.n	8008118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01b      	beq.n	8008118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0210 	mvn.w	r2, #16
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2208      	movs	r2, #8
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f926 	bl	8008350 <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f919 	bl	800833e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f928 	bl	8008362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00c      	beq.n	800813c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f06f 0201 	mvn.w	r2, #1
 8008134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fe faa0 	bl	800667c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00c      	beq.n	8008160 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800814c:	2b00      	cmp	r3, #0
 800814e:	d007      	beq.n	8008160 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 faa5 	bl	80086aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00c      	beq.n	8008184 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800817c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f8f8 	bl	8008374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00c      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f003 0320 	and.w	r3, r3, #32
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f06f 0220 	mvn.w	r2, #32
 80081a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fa78 	bl	8008698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081a8:	bf00      	nop
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d101      	bne.n	80081cc <HAL_TIM_ConfigClockSource+0x1c>
 80081c8:	2302      	movs	r3, #2
 80081ca:	e0b4      	b.n	8008336 <HAL_TIM_ConfigClockSource+0x186>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2202      	movs	r2, #2
 80081d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80081ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008204:	d03e      	beq.n	8008284 <HAL_TIM_ConfigClockSource+0xd4>
 8008206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800820a:	f200 8087 	bhi.w	800831c <HAL_TIM_ConfigClockSource+0x16c>
 800820e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008212:	f000 8086 	beq.w	8008322 <HAL_TIM_ConfigClockSource+0x172>
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800821a:	d87f      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
 800821c:	2b70      	cmp	r3, #112	@ 0x70
 800821e:	d01a      	beq.n	8008256 <HAL_TIM_ConfigClockSource+0xa6>
 8008220:	2b70      	cmp	r3, #112	@ 0x70
 8008222:	d87b      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
 8008224:	2b60      	cmp	r3, #96	@ 0x60
 8008226:	d050      	beq.n	80082ca <HAL_TIM_ConfigClockSource+0x11a>
 8008228:	2b60      	cmp	r3, #96	@ 0x60
 800822a:	d877      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
 800822c:	2b50      	cmp	r3, #80	@ 0x50
 800822e:	d03c      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0xfa>
 8008230:	2b50      	cmp	r3, #80	@ 0x50
 8008232:	d873      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
 8008234:	2b40      	cmp	r3, #64	@ 0x40
 8008236:	d058      	beq.n	80082ea <HAL_TIM_ConfigClockSource+0x13a>
 8008238:	2b40      	cmp	r3, #64	@ 0x40
 800823a:	d86f      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
 800823c:	2b30      	cmp	r3, #48	@ 0x30
 800823e:	d064      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x15a>
 8008240:	2b30      	cmp	r3, #48	@ 0x30
 8008242:	d86b      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
 8008244:	2b20      	cmp	r3, #32
 8008246:	d060      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x15a>
 8008248:	2b20      	cmp	r3, #32
 800824a:	d867      	bhi.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
 800824c:	2b00      	cmp	r3, #0
 800824e:	d05c      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x15a>
 8008250:	2b10      	cmp	r3, #16
 8008252:	d05a      	beq.n	800830a <HAL_TIM_ConfigClockSource+0x15a>
 8008254:	e062      	b.n	800831c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008266:	f000 f98c 	bl	8008582 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	609a      	str	r2, [r3, #8]
      break;
 8008282:	e04f      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008294:	f000 f975 	bl	8008582 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082a6:	609a      	str	r2, [r3, #8]
      break;
 80082a8:	e03c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b6:	461a      	mov	r2, r3
 80082b8:	f000 f8ec 	bl	8008494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2150      	movs	r1, #80	@ 0x50
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f943 	bl	800854e <TIM_ITRx_SetConfig>
      break;
 80082c8:	e02c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80082d6:	461a      	mov	r2, r3
 80082d8:	f000 f90a 	bl	80084f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2160      	movs	r1, #96	@ 0x60
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 f933 	bl	800854e <TIM_ITRx_SetConfig>
      break;
 80082e8:	e01c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082f6:	461a      	mov	r2, r3
 80082f8:	f000 f8cc 	bl	8008494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2140      	movs	r1, #64	@ 0x40
 8008302:	4618      	mov	r0, r3
 8008304:	f000 f923 	bl	800854e <TIM_ITRx_SetConfig>
      break;
 8008308:	e00c      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4619      	mov	r1, r3
 8008314:	4610      	mov	r0, r2
 8008316:	f000 f91a 	bl	800854e <TIM_ITRx_SetConfig>
      break;
 800831a:	e003      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
      break;
 8008320:	e000      	b.n	8008324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr

08008350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr

08008362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr
	...

08008388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a39      	ldr	r2, [pc, #228]	@ (8008480 <TIM_Base_SetConfig+0xf8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d013      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a38      	ldr	r2, [pc, #224]	@ (8008484 <TIM_Base_SetConfig+0xfc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a35      	ldr	r2, [pc, #212]	@ (8008488 <TIM_Base_SetConfig+0x100>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a34      	ldr	r2, [pc, #208]	@ (800848c <TIM_Base_SetConfig+0x104>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a33      	ldr	r2, [pc, #204]	@ (8008490 <TIM_Base_SetConfig+0x108>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a28      	ldr	r2, [pc, #160]	@ (8008480 <TIM_Base_SetConfig+0xf8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <TIM_Base_SetConfig+0x82>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a27      	ldr	r2, [pc, #156]	@ (8008484 <TIM_Base_SetConfig+0xfc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00f      	beq.n	800840a <TIM_Base_SetConfig+0x82>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083f0:	d00b      	beq.n	800840a <TIM_Base_SetConfig+0x82>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a24      	ldr	r2, [pc, #144]	@ (8008488 <TIM_Base_SetConfig+0x100>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_Base_SetConfig+0x82>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a23      	ldr	r2, [pc, #140]	@ (800848c <TIM_Base_SetConfig+0x104>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_Base_SetConfig+0x82>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a22      	ldr	r2, [pc, #136]	@ (8008490 <TIM_Base_SetConfig+0x108>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d108      	bne.n	800841c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a0f      	ldr	r2, [pc, #60]	@ (8008480 <TIM_Base_SetConfig+0xf8>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d003      	beq.n	8008450 <TIM_Base_SetConfig+0xc8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a0e      	ldr	r2, [pc, #56]	@ (8008484 <TIM_Base_SetConfig+0xfc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d103      	bne.n	8008458 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	691a      	ldr	r2, [r3, #16]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f023 0201 	bic.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	611a      	str	r2, [r3, #16]
  }
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	bc80      	pop	{r7}
 800847e:	4770      	bx	lr
 8008480:	40012c00 	.word	0x40012c00
 8008484:	40013400 	.word	0x40013400
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40000c00 	.word	0x40000c00

08008494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f023 0201 	bic.w	r2, r3, #1
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f023 030a 	bic.w	r3, r3, #10
 80084d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	621a      	str	r2, [r3, #32]
}
 80084e6:	bf00      	nop
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f023 0210 	bic.w	r2, r3, #16
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800851a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	031b      	lsls	r3, r3, #12
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800852c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	011b      	lsls	r3, r3, #4
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	621a      	str	r2, [r3, #32]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr

0800854e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4313      	orrs	r3, r2
 800856c:	f043 0307 	orr.w	r3, r3, #7
 8008570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	609a      	str	r2, [r3, #8]
}
 8008578:	bf00      	nop
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr

08008582 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008582:	b480      	push	{r7}
 8008584:	b087      	sub	sp, #28
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800859c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	021a      	lsls	r2, r3, #8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	431a      	orrs	r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	609a      	str	r2, [r3, #8]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr

080085c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e050      	b.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a1b      	ldr	r2, [pc, #108]	@ (8008684 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d018      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a19      	ldr	r2, [pc, #100]	@ (8008688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800862e:	d00e      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a15      	ldr	r2, [pc, #84]	@ (800868c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d009      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a14      	ldr	r2, [pc, #80]	@ (8008690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d004      	beq.n	800864e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a12      	ldr	r2, [pc, #72]	@ (8008694 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d10c      	bne.n	8008668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	4313      	orrs	r3, r2
 800865e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr
 8008684:	40012c00 	.word	0x40012c00
 8008688:	40013400 	.word	0x40013400
 800868c:	40000400 	.word	0x40000400
 8008690:	40000800 	.word	0x40000800
 8008694:	40000c00 	.word	0x40000c00

08008698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b083      	sub	sp, #12
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bc80      	pop	{r7}
 80086ba:	4770      	bx	lr

080086bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e042      	b.n	8008754 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fe fa28 	bl	8006b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2224      	movs	r2, #36	@ 0x24
 80086ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80086fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fd09 	bl	8009118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691a      	ldr	r2, [r3, #16]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008714:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695a      	ldr	r2, [r3, #20]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008724:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68da      	ldr	r2, [r3, #12]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008734:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b20      	cmp	r3, #32
 8008774:	d121      	bne.n	80087ba <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <HAL_UART_Transmit_IT+0x26>
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	e01a      	b.n	80087bc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	88fa      	ldrh	r2, [r7, #6]
 8008796:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2221      	movs	r2, #33	@ 0x21
 80087a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80087b4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e000      	b.n	80087bc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80087ba:	2302      	movs	r3, #2
  }
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr

080087c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d112      	bne.n	8008806 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <HAL_UART_Receive_IT+0x26>
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e00b      	b.n	8008808 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	461a      	mov	r2, r3
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 fab6 	bl	8008d6e <UART_Start_Receive_IT>
 8008802:	4603      	mov	r3, r0
 8008804:	e000      	b.n	8008808 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008806:	2302      	movs	r3, #2
  }
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b0ba      	sub	sp, #232	@ 0xe8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008836:	2300      	movs	r3, #0
 8008838:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800883c:	2300      	movs	r3, #0
 800883e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008846:	f003 030f 	and.w	r3, r3, #15
 800884a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800884e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10f      	bne.n	8008876 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <HAL_UART_IRQHandler+0x66>
 8008862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fb93 	bl	8008f9a <UART_Receive_IT>
      return;
 8008874:	e25b      	b.n	8008d2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80de 	beq.w	8008a3c <HAL_UART_IRQHandler+0x22c>
 8008880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d106      	bne.n	800889a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800888c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008890:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80d1 	beq.w	8008a3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800889a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00b      	beq.n	80088be <HAL_UART_IRQHandler+0xae>
 80088a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b6:	f043 0201 	orr.w	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00b      	beq.n	80088e2 <HAL_UART_IRQHandler+0xd2>
 80088ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088da:	f043 0202 	orr.w	r2, r3, #2
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00b      	beq.n	8008906 <HAL_UART_IRQHandler+0xf6>
 80088ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088fe:	f043 0204 	orr.w	r2, r3, #4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800890a:	f003 0308 	and.w	r3, r3, #8
 800890e:	2b00      	cmp	r3, #0
 8008910:	d011      	beq.n	8008936 <HAL_UART_IRQHandler+0x126>
 8008912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800891e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892e:	f043 0208 	orr.w	r2, r3, #8
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 81f2 	beq.w	8008d24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <HAL_UART_IRQHandler+0x14e>
 800894c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008950:	f003 0320 	and.w	r3, r3, #32
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fb1e 	bl	8008f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008968:	2b00      	cmp	r3, #0
 800896a:	bf14      	ite	ne
 800896c:	2301      	movne	r3, #1
 800896e:	2300      	moveq	r3, #0
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d103      	bne.n	800898a <HAL_UART_IRQHandler+0x17a>
 8008982:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d04f      	beq.n	8008a2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa28 	bl	8008de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d041      	beq.n	8008a22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3314      	adds	r3, #20
 80089a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80089b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3314      	adds	r3, #20
 80089c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80089ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80089ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80089d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80089e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1d9      	bne.n	800899e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d013      	beq.n	8008a1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f6:	4a7e      	ldr	r2, [pc, #504]	@ (8008bf0 <HAL_UART_IRQHandler+0x3e0>)
 80089f8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fb14 	bl	800702c <HAL_DMA_Abort_IT>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d016      	beq.n	8008a38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a18:	e00e      	b.n	8008a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f993 	bl	8008d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a20:	e00a      	b.n	8008a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f98f 	bl	8008d46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a28:	e006      	b.n	8008a38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f98b 	bl	8008d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008a36:	e175      	b.n	8008d24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a38:	bf00      	nop
    return;
 8008a3a:	e173      	b.n	8008d24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	f040 814f 	bne.w	8008ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a4a:	f003 0310 	and.w	r3, r3, #16
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f000 8148 	beq.w	8008ce4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a58:	f003 0310 	and.w	r3, r3, #16
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 8141 	beq.w	8008ce4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	60bb      	str	r3, [r7, #8]
 8008a76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f000 80b6 	beq.w	8008bf4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 8145 	beq.w	8008d28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	f080 813e 	bcs.w	8008d28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ab2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	f000 8088 	beq.w	8008bd0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008ada:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ade:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	330c      	adds	r3, #12
 8008ae8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008aec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008afc:	e841 2300 	strex	r3, r2, [r1]
 8008b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1d9      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3314      	adds	r3, #20
 8008b12:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3314      	adds	r3, #20
 8008b2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b30:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b3c:	e841 2300 	strex	r3, r2, [r1]
 8008b40:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1e1      	bne.n	8008b0c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3314      	adds	r3, #20
 8008b4e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008b58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3314      	adds	r3, #20
 8008b68:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b6c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b72:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e3      	bne.n	8008b48 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	330c      	adds	r3, #12
 8008b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b98:	e853 3f00 	ldrex	r3, [r3]
 8008b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ba0:	f023 0310 	bic.w	r3, r3, #16
 8008ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008bb2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008bb4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e3      	bne.n	8008b8e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe f9f3 	bl	8006fb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f8b6 	bl	8008d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bec:	e09c      	b.n	8008d28 <HAL_UART_IRQHandler+0x518>
 8008bee:	bf00      	nop
 8008bf0:	08008ea5 	.word	0x08008ea5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 808e 	beq.w	8008d2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008c10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8089 	beq.w	8008d2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	330c      	adds	r3, #12
 8008c20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	330c      	adds	r3, #12
 8008c3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008c3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e3      	bne.n	8008c1a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3314      	adds	r3, #20
 8008c58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	623b      	str	r3, [r7, #32]
   return(result);
 8008c62:	6a3b      	ldr	r3, [r7, #32]
 8008c64:	f023 0301 	bic.w	r3, r3, #1
 8008c68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3314      	adds	r3, #20
 8008c72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c76:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e3      	bne.n	8008c52 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0310 	bic.w	r3, r3, #16
 8008cae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	330c      	adds	r3, #12
 8008cb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008cbc:	61fa      	str	r2, [r7, #28]
 8008cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc0:	69b9      	ldr	r1, [r7, #24]
 8008cc2:	69fa      	ldr	r2, [r7, #28]
 8008cc4:	e841 2300 	strex	r3, r2, [r1]
 8008cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e3      	bne.n	8008c98 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f83b 	bl	8008d58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ce2:	e023      	b.n	8008d2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d009      	beq.n	8008d04 <HAL_UART_IRQHandler+0x4f4>
 8008cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f8e5 	bl	8008ecc <UART_Transmit_IT>
    return;
 8008d02:	e014      	b.n	8008d2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00e      	beq.n	8008d2e <HAL_UART_IRQHandler+0x51e>
 8008d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d008      	beq.n	8008d2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f924 	bl	8008f6a <UART_EndTransmit_IT>
    return;
 8008d22:	e004      	b.n	8008d2e <HAL_UART_IRQHandler+0x51e>
    return;
 8008d24:	bf00      	nop
 8008d26:	e002      	b.n	8008d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8008d28:	bf00      	nop
 8008d2a:	e000      	b.n	8008d2e <HAL_UART_IRQHandler+0x51e>
      return;
 8008d2c:	bf00      	nop
  }
}
 8008d2e:	37e8      	adds	r7, #232	@ 0xe8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bc80      	pop	{r7}
 8008d44:	4770      	bx	lr

08008d46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr

08008d58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr

08008d6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d6e:	b480      	push	{r7}
 8008d70:	b085      	sub	sp, #20
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	88fa      	ldrh	r2, [r7, #6]
 8008d86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	88fa      	ldrh	r2, [r7, #6]
 8008d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2222      	movs	r2, #34	@ 0x22
 8008d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008db2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	695a      	ldr	r2, [r3, #20]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f042 0220 	orr.w	r2, r2, #32
 8008dd2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b095      	sub	sp, #84	@ 0x54
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	330c      	adds	r3, #12
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	330c      	adds	r3, #12
 8008e06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e08:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e5      	bne.n	8008de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f023 0301 	bic.w	r3, r3, #1
 8008e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3314      	adds	r3, #20
 8008e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e5      	bne.n	8008e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d119      	bne.n	8008e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f023 0310 	bic.w	r3, r3, #16
 8008e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	330c      	adds	r3, #12
 8008e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e78:	61ba      	str	r2, [r7, #24]
 8008e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6979      	ldr	r1, [r7, #20]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	613b      	str	r3, [r7, #16]
   return(result);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e5      	bne.n	8008e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e9a:	bf00      	nop
 8008e9c:	3754      	adds	r7, #84	@ 0x54
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr

08008ea4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7ff ff41 	bl	8008d46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b21      	cmp	r3, #33	@ 0x21
 8008ede:	d13e      	bne.n	8008f5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ee8:	d114      	bne.n	8008f14 <UART_Transmit_IT+0x48>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d110      	bne.n	8008f14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	1c9a      	adds	r2, r3, #2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	621a      	str	r2, [r3, #32]
 8008f12:	e008      	b.n	8008f26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	1c59      	adds	r1, r3, #1
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6211      	str	r1, [r2, #32]
 8008f1e:	781a      	ldrb	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	4619      	mov	r1, r3
 8008f34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10f      	bne.n	8008f5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e000      	b.n	8008f60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f5e:	2302      	movs	r3, #2
  }
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bc80      	pop	{r7}
 8008f68:	4770      	bx	lr

08008f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7ff fed2 	bl	8008d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08c      	sub	sp, #48	@ 0x30
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b22      	cmp	r3, #34	@ 0x22
 8008fac:	f040 80ae 	bne.w	800910c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb8:	d117      	bne.n	8008fea <UART_Receive_IT+0x50>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d113      	bne.n	8008fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	1c9a      	adds	r2, r3, #2
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fe8:	e026      	b.n	8009038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ffc:	d007      	beq.n	800900e <UART_Receive_IT+0x74>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <UART_Receive_IT+0x82>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	e008      	b.n	800902e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009028:	b2da      	uxtb	r2, r3
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	b29b      	uxth	r3, r3
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4619      	mov	r1, r3
 8009046:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009048:	2b00      	cmp	r3, #0
 800904a:	d15d      	bne.n	8009108 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0220 	bic.w	r2, r2, #32
 800905a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800906a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800908e:	2b01      	cmp	r3, #1
 8009090:	d135      	bne.n	80090fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	330c      	adds	r3, #12
 800909e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	613b      	str	r3, [r7, #16]
   return(result);
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f023 0310 	bic.w	r3, r3, #16
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	330c      	adds	r3, #12
 80090b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090b8:	623a      	str	r2, [r7, #32]
 80090ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	69f9      	ldr	r1, [r7, #28]
 80090be:	6a3a      	ldr	r2, [r7, #32]
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e5      	bne.n	8009098 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0310 	and.w	r3, r3, #16
 80090d6:	2b10      	cmp	r3, #16
 80090d8:	d10a      	bne.n	80090f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	60fb      	str	r3, [r7, #12]
 80090ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090f4:	4619      	mov	r1, r3
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7ff fe2e 	bl	8008d58 <HAL_UARTEx_RxEventCallback>
 80090fc:	e002      	b.n	8009104 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f7fd fbf6 	bl	80068f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	e002      	b.n	800910e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	e000      	b.n	800910e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800910c:	2302      	movs	r3, #2
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3730      	adds	r7, #48	@ 0x30
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689a      	ldr	r2, [r3, #8]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	4313      	orrs	r3, r2
 8009146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009152:	f023 030c 	bic.w	r3, r3, #12
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	430b      	orrs	r3, r1
 800915e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	699a      	ldr	r2, [r3, #24]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a2c      	ldr	r2, [pc, #176]	@ (800922c <UART_SetConfig+0x114>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d103      	bne.n	8009188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009180:	f7fe fe16 	bl	8007db0 <HAL_RCC_GetPCLK2Freq>
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	e002      	b.n	800918e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009188:	f7fe fdfe 	bl	8007d88 <HAL_RCC_GetPCLK1Freq>
 800918c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4613      	mov	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4413      	add	r3, r2
 8009196:	009a      	lsls	r2, r3, #2
 8009198:	441a      	add	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a4:	4a22      	ldr	r2, [pc, #136]	@ (8009230 <UART_SetConfig+0x118>)
 80091a6:	fba2 2303 	umull	r2, r3, r2, r3
 80091aa:	095b      	lsrs	r3, r3, #5
 80091ac:	0119      	lsls	r1, r3, #4
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	009a      	lsls	r2, r3, #2
 80091b8:	441a      	add	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80091c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009230 <UART_SetConfig+0x118>)
 80091c6:	fba3 0302 	umull	r0, r3, r3, r2
 80091ca:	095b      	lsrs	r3, r3, #5
 80091cc:	2064      	movs	r0, #100	@ 0x64
 80091ce:	fb00 f303 	mul.w	r3, r0, r3
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	3332      	adds	r3, #50	@ 0x32
 80091d8:	4a15      	ldr	r2, [pc, #84]	@ (8009230 <UART_SetConfig+0x118>)
 80091da:	fba2 2303 	umull	r2, r3, r2, r3
 80091de:	095b      	lsrs	r3, r3, #5
 80091e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091e4:	4419      	add	r1, r3
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009a      	lsls	r2, r3, #2
 80091f0:	441a      	add	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80091fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009230 <UART_SetConfig+0x118>)
 80091fe:	fba3 0302 	umull	r0, r3, r3, r2
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	2064      	movs	r0, #100	@ 0x64
 8009206:	fb00 f303 	mul.w	r3, r0, r3
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	3332      	adds	r3, #50	@ 0x32
 8009210:	4a07      	ldr	r2, [pc, #28]	@ (8009230 <UART_SetConfig+0x118>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	095b      	lsrs	r3, r3, #5
 8009218:	f003 020f 	and.w	r2, r3, #15
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	440a      	add	r2, r1
 8009222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009224:	bf00      	nop
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	40013800 	.word	0x40013800
 8009230:	51eb851f 	.word	0x51eb851f

08009234 <siprintf>:
 8009234:	b40e      	push	{r1, r2, r3}
 8009236:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800923a:	b500      	push	{lr}
 800923c:	b09c      	sub	sp, #112	@ 0x70
 800923e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009240:	9002      	str	r0, [sp, #8]
 8009242:	9006      	str	r0, [sp, #24]
 8009244:	9107      	str	r1, [sp, #28]
 8009246:	9104      	str	r1, [sp, #16]
 8009248:	4808      	ldr	r0, [pc, #32]	@ (800926c <siprintf+0x38>)
 800924a:	4909      	ldr	r1, [pc, #36]	@ (8009270 <siprintf+0x3c>)
 800924c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009250:	9105      	str	r1, [sp, #20]
 8009252:	6800      	ldr	r0, [r0, #0]
 8009254:	a902      	add	r1, sp, #8
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	f000 f992 	bl	8009580 <_svfiprintf_r>
 800925c:	2200      	movs	r2, #0
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	701a      	strb	r2, [r3, #0]
 8009262:	b01c      	add	sp, #112	@ 0x70
 8009264:	f85d eb04 	ldr.w	lr, [sp], #4
 8009268:	b003      	add	sp, #12
 800926a:	4770      	bx	lr
 800926c:	20000014 	.word	0x20000014
 8009270:	ffff0208 	.word	0xffff0208

08009274 <memset>:
 8009274:	4603      	mov	r3, r0
 8009276:	4402      	add	r2, r0
 8009278:	4293      	cmp	r3, r2
 800927a:	d100      	bne.n	800927e <memset+0xa>
 800927c:	4770      	bx	lr
 800927e:	f803 1b01 	strb.w	r1, [r3], #1
 8009282:	e7f9      	b.n	8009278 <memset+0x4>

08009284 <__errno>:
 8009284:	4b01      	ldr	r3, [pc, #4]	@ (800928c <__errno+0x8>)
 8009286:	6818      	ldr	r0, [r3, #0]
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000014 	.word	0x20000014

08009290 <__libc_init_array>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	2600      	movs	r6, #0
 8009294:	4d0c      	ldr	r5, [pc, #48]	@ (80092c8 <__libc_init_array+0x38>)
 8009296:	4c0d      	ldr	r4, [pc, #52]	@ (80092cc <__libc_init_array+0x3c>)
 8009298:	1b64      	subs	r4, r4, r5
 800929a:	10a4      	asrs	r4, r4, #2
 800929c:	42a6      	cmp	r6, r4
 800929e:	d109      	bne.n	80092b4 <__libc_init_array+0x24>
 80092a0:	f000 fc78 	bl	8009b94 <_init>
 80092a4:	2600      	movs	r6, #0
 80092a6:	4d0a      	ldr	r5, [pc, #40]	@ (80092d0 <__libc_init_array+0x40>)
 80092a8:	4c0a      	ldr	r4, [pc, #40]	@ (80092d4 <__libc_init_array+0x44>)
 80092aa:	1b64      	subs	r4, r4, r5
 80092ac:	10a4      	asrs	r4, r4, #2
 80092ae:	42a6      	cmp	r6, r4
 80092b0:	d105      	bne.n	80092be <__libc_init_array+0x2e>
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b8:	4798      	blx	r3
 80092ba:	3601      	adds	r6, #1
 80092bc:	e7ee      	b.n	800929c <__libc_init_array+0xc>
 80092be:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c2:	4798      	blx	r3
 80092c4:	3601      	adds	r6, #1
 80092c6:	e7f2      	b.n	80092ae <__libc_init_array+0x1e>
 80092c8:	0800b478 	.word	0x0800b478
 80092cc:	0800b478 	.word	0x0800b478
 80092d0:	0800b478 	.word	0x0800b478
 80092d4:	0800b47c 	.word	0x0800b47c

080092d8 <__retarget_lock_acquire_recursive>:
 80092d8:	4770      	bx	lr

080092da <__retarget_lock_release_recursive>:
 80092da:	4770      	bx	lr

080092dc <_free_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4605      	mov	r5, r0
 80092e0:	2900      	cmp	r1, #0
 80092e2:	d040      	beq.n	8009366 <_free_r+0x8a>
 80092e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e8:	1f0c      	subs	r4, r1, #4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bfb8      	it	lt
 80092ee:	18e4      	addlt	r4, r4, r3
 80092f0:	f000 f8de 	bl	80094b0 <__malloc_lock>
 80092f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009368 <_free_r+0x8c>)
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	b933      	cbnz	r3, 8009308 <_free_r+0x2c>
 80092fa:	6063      	str	r3, [r4, #4]
 80092fc:	6014      	str	r4, [r2, #0]
 80092fe:	4628      	mov	r0, r5
 8009300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009304:	f000 b8da 	b.w	80094bc <__malloc_unlock>
 8009308:	42a3      	cmp	r3, r4
 800930a:	d908      	bls.n	800931e <_free_r+0x42>
 800930c:	6820      	ldr	r0, [r4, #0]
 800930e:	1821      	adds	r1, r4, r0
 8009310:	428b      	cmp	r3, r1
 8009312:	bf01      	itttt	eq
 8009314:	6819      	ldreq	r1, [r3, #0]
 8009316:	685b      	ldreq	r3, [r3, #4]
 8009318:	1809      	addeq	r1, r1, r0
 800931a:	6021      	streq	r1, [r4, #0]
 800931c:	e7ed      	b.n	80092fa <_free_r+0x1e>
 800931e:	461a      	mov	r2, r3
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	b10b      	cbz	r3, 8009328 <_free_r+0x4c>
 8009324:	42a3      	cmp	r3, r4
 8009326:	d9fa      	bls.n	800931e <_free_r+0x42>
 8009328:	6811      	ldr	r1, [r2, #0]
 800932a:	1850      	adds	r0, r2, r1
 800932c:	42a0      	cmp	r0, r4
 800932e:	d10b      	bne.n	8009348 <_free_r+0x6c>
 8009330:	6820      	ldr	r0, [r4, #0]
 8009332:	4401      	add	r1, r0
 8009334:	1850      	adds	r0, r2, r1
 8009336:	4283      	cmp	r3, r0
 8009338:	6011      	str	r1, [r2, #0]
 800933a:	d1e0      	bne.n	80092fe <_free_r+0x22>
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	4408      	add	r0, r1
 8009342:	6010      	str	r0, [r2, #0]
 8009344:	6053      	str	r3, [r2, #4]
 8009346:	e7da      	b.n	80092fe <_free_r+0x22>
 8009348:	d902      	bls.n	8009350 <_free_r+0x74>
 800934a:	230c      	movs	r3, #12
 800934c:	602b      	str	r3, [r5, #0]
 800934e:	e7d6      	b.n	80092fe <_free_r+0x22>
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	1821      	adds	r1, r4, r0
 8009354:	428b      	cmp	r3, r1
 8009356:	bf01      	itttt	eq
 8009358:	6819      	ldreq	r1, [r3, #0]
 800935a:	685b      	ldreq	r3, [r3, #4]
 800935c:	1809      	addeq	r1, r1, r0
 800935e:	6021      	streq	r1, [r4, #0]
 8009360:	6063      	str	r3, [r4, #4]
 8009362:	6054      	str	r4, [r2, #4]
 8009364:	e7cb      	b.n	80092fe <_free_r+0x22>
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	200017fc 	.word	0x200017fc

0800936c <sbrk_aligned>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	4e0f      	ldr	r6, [pc, #60]	@ (80093ac <sbrk_aligned+0x40>)
 8009370:	460c      	mov	r4, r1
 8009372:	6831      	ldr	r1, [r6, #0]
 8009374:	4605      	mov	r5, r0
 8009376:	b911      	cbnz	r1, 800937e <sbrk_aligned+0x12>
 8009378:	f000 fbaa 	bl	8009ad0 <_sbrk_r>
 800937c:	6030      	str	r0, [r6, #0]
 800937e:	4621      	mov	r1, r4
 8009380:	4628      	mov	r0, r5
 8009382:	f000 fba5 	bl	8009ad0 <_sbrk_r>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d103      	bne.n	8009392 <sbrk_aligned+0x26>
 800938a:	f04f 34ff 	mov.w	r4, #4294967295
 800938e:	4620      	mov	r0, r4
 8009390:	bd70      	pop	{r4, r5, r6, pc}
 8009392:	1cc4      	adds	r4, r0, #3
 8009394:	f024 0403 	bic.w	r4, r4, #3
 8009398:	42a0      	cmp	r0, r4
 800939a:	d0f8      	beq.n	800938e <sbrk_aligned+0x22>
 800939c:	1a21      	subs	r1, r4, r0
 800939e:	4628      	mov	r0, r5
 80093a0:	f000 fb96 	bl	8009ad0 <_sbrk_r>
 80093a4:	3001      	adds	r0, #1
 80093a6:	d1f2      	bne.n	800938e <sbrk_aligned+0x22>
 80093a8:	e7ef      	b.n	800938a <sbrk_aligned+0x1e>
 80093aa:	bf00      	nop
 80093ac:	200017f8 	.word	0x200017f8

080093b0 <_malloc_r>:
 80093b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b4:	1ccd      	adds	r5, r1, #3
 80093b6:	f025 0503 	bic.w	r5, r5, #3
 80093ba:	3508      	adds	r5, #8
 80093bc:	2d0c      	cmp	r5, #12
 80093be:	bf38      	it	cc
 80093c0:	250c      	movcc	r5, #12
 80093c2:	2d00      	cmp	r5, #0
 80093c4:	4606      	mov	r6, r0
 80093c6:	db01      	blt.n	80093cc <_malloc_r+0x1c>
 80093c8:	42a9      	cmp	r1, r5
 80093ca:	d904      	bls.n	80093d6 <_malloc_r+0x26>
 80093cc:	230c      	movs	r3, #12
 80093ce:	6033      	str	r3, [r6, #0]
 80093d0:	2000      	movs	r0, #0
 80093d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094ac <_malloc_r+0xfc>
 80093da:	f000 f869 	bl	80094b0 <__malloc_lock>
 80093de:	f8d8 3000 	ldr.w	r3, [r8]
 80093e2:	461c      	mov	r4, r3
 80093e4:	bb44      	cbnz	r4, 8009438 <_malloc_r+0x88>
 80093e6:	4629      	mov	r1, r5
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff ffbf 	bl	800936c <sbrk_aligned>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	4604      	mov	r4, r0
 80093f2:	d158      	bne.n	80094a6 <_malloc_r+0xf6>
 80093f4:	f8d8 4000 	ldr.w	r4, [r8]
 80093f8:	4627      	mov	r7, r4
 80093fa:	2f00      	cmp	r7, #0
 80093fc:	d143      	bne.n	8009486 <_malloc_r+0xd6>
 80093fe:	2c00      	cmp	r4, #0
 8009400:	d04b      	beq.n	800949a <_malloc_r+0xea>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	4639      	mov	r1, r7
 8009406:	4630      	mov	r0, r6
 8009408:	eb04 0903 	add.w	r9, r4, r3
 800940c:	f000 fb60 	bl	8009ad0 <_sbrk_r>
 8009410:	4581      	cmp	r9, r0
 8009412:	d142      	bne.n	800949a <_malloc_r+0xea>
 8009414:	6821      	ldr	r1, [r4, #0]
 8009416:	4630      	mov	r0, r6
 8009418:	1a6d      	subs	r5, r5, r1
 800941a:	4629      	mov	r1, r5
 800941c:	f7ff ffa6 	bl	800936c <sbrk_aligned>
 8009420:	3001      	adds	r0, #1
 8009422:	d03a      	beq.n	800949a <_malloc_r+0xea>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	442b      	add	r3, r5
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	f8d8 3000 	ldr.w	r3, [r8]
 800942e:	685a      	ldr	r2, [r3, #4]
 8009430:	bb62      	cbnz	r2, 800948c <_malloc_r+0xdc>
 8009432:	f8c8 7000 	str.w	r7, [r8]
 8009436:	e00f      	b.n	8009458 <_malloc_r+0xa8>
 8009438:	6822      	ldr	r2, [r4, #0]
 800943a:	1b52      	subs	r2, r2, r5
 800943c:	d420      	bmi.n	8009480 <_malloc_r+0xd0>
 800943e:	2a0b      	cmp	r2, #11
 8009440:	d917      	bls.n	8009472 <_malloc_r+0xc2>
 8009442:	1961      	adds	r1, r4, r5
 8009444:	42a3      	cmp	r3, r4
 8009446:	6025      	str	r5, [r4, #0]
 8009448:	bf18      	it	ne
 800944a:	6059      	strne	r1, [r3, #4]
 800944c:	6863      	ldr	r3, [r4, #4]
 800944e:	bf08      	it	eq
 8009450:	f8c8 1000 	streq.w	r1, [r8]
 8009454:	5162      	str	r2, [r4, r5]
 8009456:	604b      	str	r3, [r1, #4]
 8009458:	4630      	mov	r0, r6
 800945a:	f000 f82f 	bl	80094bc <__malloc_unlock>
 800945e:	f104 000b 	add.w	r0, r4, #11
 8009462:	1d23      	adds	r3, r4, #4
 8009464:	f020 0007 	bic.w	r0, r0, #7
 8009468:	1ac2      	subs	r2, r0, r3
 800946a:	bf1c      	itt	ne
 800946c:	1a1b      	subne	r3, r3, r0
 800946e:	50a3      	strne	r3, [r4, r2]
 8009470:	e7af      	b.n	80093d2 <_malloc_r+0x22>
 8009472:	6862      	ldr	r2, [r4, #4]
 8009474:	42a3      	cmp	r3, r4
 8009476:	bf0c      	ite	eq
 8009478:	f8c8 2000 	streq.w	r2, [r8]
 800947c:	605a      	strne	r2, [r3, #4]
 800947e:	e7eb      	b.n	8009458 <_malloc_r+0xa8>
 8009480:	4623      	mov	r3, r4
 8009482:	6864      	ldr	r4, [r4, #4]
 8009484:	e7ae      	b.n	80093e4 <_malloc_r+0x34>
 8009486:	463c      	mov	r4, r7
 8009488:	687f      	ldr	r7, [r7, #4]
 800948a:	e7b6      	b.n	80093fa <_malloc_r+0x4a>
 800948c:	461a      	mov	r2, r3
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	42a3      	cmp	r3, r4
 8009492:	d1fb      	bne.n	800948c <_malloc_r+0xdc>
 8009494:	2300      	movs	r3, #0
 8009496:	6053      	str	r3, [r2, #4]
 8009498:	e7de      	b.n	8009458 <_malloc_r+0xa8>
 800949a:	230c      	movs	r3, #12
 800949c:	4630      	mov	r0, r6
 800949e:	6033      	str	r3, [r6, #0]
 80094a0:	f000 f80c 	bl	80094bc <__malloc_unlock>
 80094a4:	e794      	b.n	80093d0 <_malloc_r+0x20>
 80094a6:	6005      	str	r5, [r0, #0]
 80094a8:	e7d6      	b.n	8009458 <_malloc_r+0xa8>
 80094aa:	bf00      	nop
 80094ac:	200017fc 	.word	0x200017fc

080094b0 <__malloc_lock>:
 80094b0:	4801      	ldr	r0, [pc, #4]	@ (80094b8 <__malloc_lock+0x8>)
 80094b2:	f7ff bf11 	b.w	80092d8 <__retarget_lock_acquire_recursive>
 80094b6:	bf00      	nop
 80094b8:	200017f4 	.word	0x200017f4

080094bc <__malloc_unlock>:
 80094bc:	4801      	ldr	r0, [pc, #4]	@ (80094c4 <__malloc_unlock+0x8>)
 80094be:	f7ff bf0c 	b.w	80092da <__retarget_lock_release_recursive>
 80094c2:	bf00      	nop
 80094c4:	200017f4 	.word	0x200017f4

080094c8 <__ssputs_r>:
 80094c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094cc:	461f      	mov	r7, r3
 80094ce:	688e      	ldr	r6, [r1, #8]
 80094d0:	4682      	mov	sl, r0
 80094d2:	42be      	cmp	r6, r7
 80094d4:	460c      	mov	r4, r1
 80094d6:	4690      	mov	r8, r2
 80094d8:	680b      	ldr	r3, [r1, #0]
 80094da:	d82d      	bhi.n	8009538 <__ssputs_r+0x70>
 80094dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094e4:	d026      	beq.n	8009534 <__ssputs_r+0x6c>
 80094e6:	6965      	ldr	r5, [r4, #20]
 80094e8:	6909      	ldr	r1, [r1, #16]
 80094ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094ee:	eba3 0901 	sub.w	r9, r3, r1
 80094f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094f6:	1c7b      	adds	r3, r7, #1
 80094f8:	444b      	add	r3, r9
 80094fa:	106d      	asrs	r5, r5, #1
 80094fc:	429d      	cmp	r5, r3
 80094fe:	bf38      	it	cc
 8009500:	461d      	movcc	r5, r3
 8009502:	0553      	lsls	r3, r2, #21
 8009504:	d527      	bpl.n	8009556 <__ssputs_r+0x8e>
 8009506:	4629      	mov	r1, r5
 8009508:	f7ff ff52 	bl	80093b0 <_malloc_r>
 800950c:	4606      	mov	r6, r0
 800950e:	b360      	cbz	r0, 800956a <__ssputs_r+0xa2>
 8009510:	464a      	mov	r2, r9
 8009512:	6921      	ldr	r1, [r4, #16]
 8009514:	f000 fafa 	bl	8009b0c <memcpy>
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800951e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009522:	81a3      	strh	r3, [r4, #12]
 8009524:	6126      	str	r6, [r4, #16]
 8009526:	444e      	add	r6, r9
 8009528:	6026      	str	r6, [r4, #0]
 800952a:	463e      	mov	r6, r7
 800952c:	6165      	str	r5, [r4, #20]
 800952e:	eba5 0509 	sub.w	r5, r5, r9
 8009532:	60a5      	str	r5, [r4, #8]
 8009534:	42be      	cmp	r6, r7
 8009536:	d900      	bls.n	800953a <__ssputs_r+0x72>
 8009538:	463e      	mov	r6, r7
 800953a:	4632      	mov	r2, r6
 800953c:	4641      	mov	r1, r8
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	f000 faac 	bl	8009a9c <memmove>
 8009544:	2000      	movs	r0, #0
 8009546:	68a3      	ldr	r3, [r4, #8]
 8009548:	1b9b      	subs	r3, r3, r6
 800954a:	60a3      	str	r3, [r4, #8]
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	4433      	add	r3, r6
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009556:	462a      	mov	r2, r5
 8009558:	f000 fae6 	bl	8009b28 <_realloc_r>
 800955c:	4606      	mov	r6, r0
 800955e:	2800      	cmp	r0, #0
 8009560:	d1e0      	bne.n	8009524 <__ssputs_r+0x5c>
 8009562:	4650      	mov	r0, sl
 8009564:	6921      	ldr	r1, [r4, #16]
 8009566:	f7ff feb9 	bl	80092dc <_free_r>
 800956a:	230c      	movs	r3, #12
 800956c:	f8ca 3000 	str.w	r3, [sl]
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f04f 30ff 	mov.w	r0, #4294967295
 8009576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	e7e9      	b.n	8009552 <__ssputs_r+0x8a>
	...

08009580 <_svfiprintf_r>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	4698      	mov	r8, r3
 8009586:	898b      	ldrh	r3, [r1, #12]
 8009588:	4607      	mov	r7, r0
 800958a:	061b      	lsls	r3, r3, #24
 800958c:	460d      	mov	r5, r1
 800958e:	4614      	mov	r4, r2
 8009590:	b09d      	sub	sp, #116	@ 0x74
 8009592:	d510      	bpl.n	80095b6 <_svfiprintf_r+0x36>
 8009594:	690b      	ldr	r3, [r1, #16]
 8009596:	b973      	cbnz	r3, 80095b6 <_svfiprintf_r+0x36>
 8009598:	2140      	movs	r1, #64	@ 0x40
 800959a:	f7ff ff09 	bl	80093b0 <_malloc_r>
 800959e:	6028      	str	r0, [r5, #0]
 80095a0:	6128      	str	r0, [r5, #16]
 80095a2:	b930      	cbnz	r0, 80095b2 <_svfiprintf_r+0x32>
 80095a4:	230c      	movs	r3, #12
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ac:	b01d      	add	sp, #116	@ 0x74
 80095ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b2:	2340      	movs	r3, #64	@ 0x40
 80095b4:	616b      	str	r3, [r5, #20]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80095ba:	2320      	movs	r3, #32
 80095bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095c0:	2330      	movs	r3, #48	@ 0x30
 80095c2:	f04f 0901 	mov.w	r9, #1
 80095c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80095ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009764 <_svfiprintf_r+0x1e4>
 80095ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095d2:	4623      	mov	r3, r4
 80095d4:	469a      	mov	sl, r3
 80095d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095da:	b10a      	cbz	r2, 80095e0 <_svfiprintf_r+0x60>
 80095dc:	2a25      	cmp	r2, #37	@ 0x25
 80095de:	d1f9      	bne.n	80095d4 <_svfiprintf_r+0x54>
 80095e0:	ebba 0b04 	subs.w	fp, sl, r4
 80095e4:	d00b      	beq.n	80095fe <_svfiprintf_r+0x7e>
 80095e6:	465b      	mov	r3, fp
 80095e8:	4622      	mov	r2, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	4638      	mov	r0, r7
 80095ee:	f7ff ff6b 	bl	80094c8 <__ssputs_r>
 80095f2:	3001      	adds	r0, #1
 80095f4:	f000 80a7 	beq.w	8009746 <_svfiprintf_r+0x1c6>
 80095f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095fa:	445a      	add	r2, fp
 80095fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80095fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 809f 	beq.w	8009746 <_svfiprintf_r+0x1c6>
 8009608:	2300      	movs	r3, #0
 800960a:	f04f 32ff 	mov.w	r2, #4294967295
 800960e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009612:	f10a 0a01 	add.w	sl, sl, #1
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	9307      	str	r3, [sp, #28]
 800961a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800961e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009620:	4654      	mov	r4, sl
 8009622:	2205      	movs	r2, #5
 8009624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009628:	484e      	ldr	r0, [pc, #312]	@ (8009764 <_svfiprintf_r+0x1e4>)
 800962a:	f000 fa61 	bl	8009af0 <memchr>
 800962e:	9a04      	ldr	r2, [sp, #16]
 8009630:	b9d8      	cbnz	r0, 800966a <_svfiprintf_r+0xea>
 8009632:	06d0      	lsls	r0, r2, #27
 8009634:	bf44      	itt	mi
 8009636:	2320      	movmi	r3, #32
 8009638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800963c:	0711      	lsls	r1, r2, #28
 800963e:	bf44      	itt	mi
 8009640:	232b      	movmi	r3, #43	@ 0x2b
 8009642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009646:	f89a 3000 	ldrb.w	r3, [sl]
 800964a:	2b2a      	cmp	r3, #42	@ 0x2a
 800964c:	d015      	beq.n	800967a <_svfiprintf_r+0xfa>
 800964e:	4654      	mov	r4, sl
 8009650:	2000      	movs	r0, #0
 8009652:	f04f 0c0a 	mov.w	ip, #10
 8009656:	9a07      	ldr	r2, [sp, #28]
 8009658:	4621      	mov	r1, r4
 800965a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965e:	3b30      	subs	r3, #48	@ 0x30
 8009660:	2b09      	cmp	r3, #9
 8009662:	d94b      	bls.n	80096fc <_svfiprintf_r+0x17c>
 8009664:	b1b0      	cbz	r0, 8009694 <_svfiprintf_r+0x114>
 8009666:	9207      	str	r2, [sp, #28]
 8009668:	e014      	b.n	8009694 <_svfiprintf_r+0x114>
 800966a:	eba0 0308 	sub.w	r3, r0, r8
 800966e:	fa09 f303 	lsl.w	r3, r9, r3
 8009672:	4313      	orrs	r3, r2
 8009674:	46a2      	mov	sl, r4
 8009676:	9304      	str	r3, [sp, #16]
 8009678:	e7d2      	b.n	8009620 <_svfiprintf_r+0xa0>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	1d19      	adds	r1, r3, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	9103      	str	r1, [sp, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfbb      	ittet	lt
 8009686:	425b      	neglt	r3, r3
 8009688:	f042 0202 	orrlt.w	r2, r2, #2
 800968c:	9307      	strge	r3, [sp, #28]
 800968e:	9307      	strlt	r3, [sp, #28]
 8009690:	bfb8      	it	lt
 8009692:	9204      	strlt	r2, [sp, #16]
 8009694:	7823      	ldrb	r3, [r4, #0]
 8009696:	2b2e      	cmp	r3, #46	@ 0x2e
 8009698:	d10a      	bne.n	80096b0 <_svfiprintf_r+0x130>
 800969a:	7863      	ldrb	r3, [r4, #1]
 800969c:	2b2a      	cmp	r3, #42	@ 0x2a
 800969e:	d132      	bne.n	8009706 <_svfiprintf_r+0x186>
 80096a0:	9b03      	ldr	r3, [sp, #12]
 80096a2:	3402      	adds	r4, #2
 80096a4:	1d1a      	adds	r2, r3, #4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	9203      	str	r2, [sp, #12]
 80096aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096ae:	9305      	str	r3, [sp, #20]
 80096b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009768 <_svfiprintf_r+0x1e8>
 80096b4:	2203      	movs	r2, #3
 80096b6:	4650      	mov	r0, sl
 80096b8:	7821      	ldrb	r1, [r4, #0]
 80096ba:	f000 fa19 	bl	8009af0 <memchr>
 80096be:	b138      	cbz	r0, 80096d0 <_svfiprintf_r+0x150>
 80096c0:	2240      	movs	r2, #64	@ 0x40
 80096c2:	9b04      	ldr	r3, [sp, #16]
 80096c4:	eba0 000a 	sub.w	r0, r0, sl
 80096c8:	4082      	lsls	r2, r0
 80096ca:	4313      	orrs	r3, r2
 80096cc:	3401      	adds	r4, #1
 80096ce:	9304      	str	r3, [sp, #16]
 80096d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d4:	2206      	movs	r2, #6
 80096d6:	4825      	ldr	r0, [pc, #148]	@ (800976c <_svfiprintf_r+0x1ec>)
 80096d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096dc:	f000 fa08 	bl	8009af0 <memchr>
 80096e0:	2800      	cmp	r0, #0
 80096e2:	d036      	beq.n	8009752 <_svfiprintf_r+0x1d2>
 80096e4:	4b22      	ldr	r3, [pc, #136]	@ (8009770 <_svfiprintf_r+0x1f0>)
 80096e6:	bb1b      	cbnz	r3, 8009730 <_svfiprintf_r+0x1b0>
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	3307      	adds	r3, #7
 80096ec:	f023 0307 	bic.w	r3, r3, #7
 80096f0:	3308      	adds	r3, #8
 80096f2:	9303      	str	r3, [sp, #12]
 80096f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f6:	4433      	add	r3, r6
 80096f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80096fa:	e76a      	b.n	80095d2 <_svfiprintf_r+0x52>
 80096fc:	460c      	mov	r4, r1
 80096fe:	2001      	movs	r0, #1
 8009700:	fb0c 3202 	mla	r2, ip, r2, r3
 8009704:	e7a8      	b.n	8009658 <_svfiprintf_r+0xd8>
 8009706:	2300      	movs	r3, #0
 8009708:	f04f 0c0a 	mov.w	ip, #10
 800970c:	4619      	mov	r1, r3
 800970e:	3401      	adds	r4, #1
 8009710:	9305      	str	r3, [sp, #20]
 8009712:	4620      	mov	r0, r4
 8009714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009718:	3a30      	subs	r2, #48	@ 0x30
 800971a:	2a09      	cmp	r2, #9
 800971c:	d903      	bls.n	8009726 <_svfiprintf_r+0x1a6>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d0c6      	beq.n	80096b0 <_svfiprintf_r+0x130>
 8009722:	9105      	str	r1, [sp, #20]
 8009724:	e7c4      	b.n	80096b0 <_svfiprintf_r+0x130>
 8009726:	4604      	mov	r4, r0
 8009728:	2301      	movs	r3, #1
 800972a:	fb0c 2101 	mla	r1, ip, r1, r2
 800972e:	e7f0      	b.n	8009712 <_svfiprintf_r+0x192>
 8009730:	ab03      	add	r3, sp, #12
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	462a      	mov	r2, r5
 8009736:	4638      	mov	r0, r7
 8009738:	4b0e      	ldr	r3, [pc, #56]	@ (8009774 <_svfiprintf_r+0x1f4>)
 800973a:	a904      	add	r1, sp, #16
 800973c:	f3af 8000 	nop.w
 8009740:	1c42      	adds	r2, r0, #1
 8009742:	4606      	mov	r6, r0
 8009744:	d1d6      	bne.n	80096f4 <_svfiprintf_r+0x174>
 8009746:	89ab      	ldrh	r3, [r5, #12]
 8009748:	065b      	lsls	r3, r3, #25
 800974a:	f53f af2d 	bmi.w	80095a8 <_svfiprintf_r+0x28>
 800974e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009750:	e72c      	b.n	80095ac <_svfiprintf_r+0x2c>
 8009752:	ab03      	add	r3, sp, #12
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	462a      	mov	r2, r5
 8009758:	4638      	mov	r0, r7
 800975a:	4b06      	ldr	r3, [pc, #24]	@ (8009774 <_svfiprintf_r+0x1f4>)
 800975c:	a904      	add	r1, sp, #16
 800975e:	f000 f87d 	bl	800985c <_printf_i>
 8009762:	e7ed      	b.n	8009740 <_svfiprintf_r+0x1c0>
 8009764:	0800b442 	.word	0x0800b442
 8009768:	0800b448 	.word	0x0800b448
 800976c:	0800b44c 	.word	0x0800b44c
 8009770:	00000000 	.word	0x00000000
 8009774:	080094c9 	.word	0x080094c9

08009778 <_printf_common>:
 8009778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800977c:	4616      	mov	r6, r2
 800977e:	4698      	mov	r8, r3
 8009780:	688a      	ldr	r2, [r1, #8]
 8009782:	690b      	ldr	r3, [r1, #16]
 8009784:	4607      	mov	r7, r0
 8009786:	4293      	cmp	r3, r2
 8009788:	bfb8      	it	lt
 800978a:	4613      	movlt	r3, r2
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009792:	460c      	mov	r4, r1
 8009794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009798:	b10a      	cbz	r2, 800979e <_printf_common+0x26>
 800979a:	3301      	adds	r3, #1
 800979c:	6033      	str	r3, [r6, #0]
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	0699      	lsls	r1, r3, #26
 80097a2:	bf42      	ittt	mi
 80097a4:	6833      	ldrmi	r3, [r6, #0]
 80097a6:	3302      	addmi	r3, #2
 80097a8:	6033      	strmi	r3, [r6, #0]
 80097aa:	6825      	ldr	r5, [r4, #0]
 80097ac:	f015 0506 	ands.w	r5, r5, #6
 80097b0:	d106      	bne.n	80097c0 <_printf_common+0x48>
 80097b2:	f104 0a19 	add.w	sl, r4, #25
 80097b6:	68e3      	ldr	r3, [r4, #12]
 80097b8:	6832      	ldr	r2, [r6, #0]
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	42ab      	cmp	r3, r5
 80097be:	dc2b      	bgt.n	8009818 <_printf_common+0xa0>
 80097c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097c4:	6822      	ldr	r2, [r4, #0]
 80097c6:	3b00      	subs	r3, #0
 80097c8:	bf18      	it	ne
 80097ca:	2301      	movne	r3, #1
 80097cc:	0692      	lsls	r2, r2, #26
 80097ce:	d430      	bmi.n	8009832 <_printf_common+0xba>
 80097d0:	4641      	mov	r1, r8
 80097d2:	4638      	mov	r0, r7
 80097d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097d8:	47c8      	blx	r9
 80097da:	3001      	adds	r0, #1
 80097dc:	d023      	beq.n	8009826 <_printf_common+0xae>
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	6922      	ldr	r2, [r4, #16]
 80097e2:	f003 0306 	and.w	r3, r3, #6
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	bf14      	ite	ne
 80097ea:	2500      	movne	r5, #0
 80097ec:	6833      	ldreq	r3, [r6, #0]
 80097ee:	f04f 0600 	mov.w	r6, #0
 80097f2:	bf08      	it	eq
 80097f4:	68e5      	ldreq	r5, [r4, #12]
 80097f6:	f104 041a 	add.w	r4, r4, #26
 80097fa:	bf08      	it	eq
 80097fc:	1aed      	subeq	r5, r5, r3
 80097fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009802:	bf08      	it	eq
 8009804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009808:	4293      	cmp	r3, r2
 800980a:	bfc4      	itt	gt
 800980c:	1a9b      	subgt	r3, r3, r2
 800980e:	18ed      	addgt	r5, r5, r3
 8009810:	42b5      	cmp	r5, r6
 8009812:	d11a      	bne.n	800984a <_printf_common+0xd2>
 8009814:	2000      	movs	r0, #0
 8009816:	e008      	b.n	800982a <_printf_common+0xb2>
 8009818:	2301      	movs	r3, #1
 800981a:	4652      	mov	r2, sl
 800981c:	4641      	mov	r1, r8
 800981e:	4638      	mov	r0, r7
 8009820:	47c8      	blx	r9
 8009822:	3001      	adds	r0, #1
 8009824:	d103      	bne.n	800982e <_printf_common+0xb6>
 8009826:	f04f 30ff 	mov.w	r0, #4294967295
 800982a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982e:	3501      	adds	r5, #1
 8009830:	e7c1      	b.n	80097b6 <_printf_common+0x3e>
 8009832:	2030      	movs	r0, #48	@ 0x30
 8009834:	18e1      	adds	r1, r4, r3
 8009836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009840:	4422      	add	r2, r4
 8009842:	3302      	adds	r3, #2
 8009844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009848:	e7c2      	b.n	80097d0 <_printf_common+0x58>
 800984a:	2301      	movs	r3, #1
 800984c:	4622      	mov	r2, r4
 800984e:	4641      	mov	r1, r8
 8009850:	4638      	mov	r0, r7
 8009852:	47c8      	blx	r9
 8009854:	3001      	adds	r0, #1
 8009856:	d0e6      	beq.n	8009826 <_printf_common+0xae>
 8009858:	3601      	adds	r6, #1
 800985a:	e7d9      	b.n	8009810 <_printf_common+0x98>

0800985c <_printf_i>:
 800985c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	7e0f      	ldrb	r7, [r1, #24]
 8009862:	4691      	mov	r9, r2
 8009864:	2f78      	cmp	r7, #120	@ 0x78
 8009866:	4680      	mov	r8, r0
 8009868:	460c      	mov	r4, r1
 800986a:	469a      	mov	sl, r3
 800986c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800986e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009872:	d807      	bhi.n	8009884 <_printf_i+0x28>
 8009874:	2f62      	cmp	r7, #98	@ 0x62
 8009876:	d80a      	bhi.n	800988e <_printf_i+0x32>
 8009878:	2f00      	cmp	r7, #0
 800987a:	f000 80d3 	beq.w	8009a24 <_printf_i+0x1c8>
 800987e:	2f58      	cmp	r7, #88	@ 0x58
 8009880:	f000 80ba 	beq.w	80099f8 <_printf_i+0x19c>
 8009884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800988c:	e03a      	b.n	8009904 <_printf_i+0xa8>
 800988e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009892:	2b15      	cmp	r3, #21
 8009894:	d8f6      	bhi.n	8009884 <_printf_i+0x28>
 8009896:	a101      	add	r1, pc, #4	@ (adr r1, 800989c <_printf_i+0x40>)
 8009898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800989c:	080098f5 	.word	0x080098f5
 80098a0:	08009909 	.word	0x08009909
 80098a4:	08009885 	.word	0x08009885
 80098a8:	08009885 	.word	0x08009885
 80098ac:	08009885 	.word	0x08009885
 80098b0:	08009885 	.word	0x08009885
 80098b4:	08009909 	.word	0x08009909
 80098b8:	08009885 	.word	0x08009885
 80098bc:	08009885 	.word	0x08009885
 80098c0:	08009885 	.word	0x08009885
 80098c4:	08009885 	.word	0x08009885
 80098c8:	08009a0b 	.word	0x08009a0b
 80098cc:	08009933 	.word	0x08009933
 80098d0:	080099c5 	.word	0x080099c5
 80098d4:	08009885 	.word	0x08009885
 80098d8:	08009885 	.word	0x08009885
 80098dc:	08009a2d 	.word	0x08009a2d
 80098e0:	08009885 	.word	0x08009885
 80098e4:	08009933 	.word	0x08009933
 80098e8:	08009885 	.word	0x08009885
 80098ec:	08009885 	.word	0x08009885
 80098f0:	080099cd 	.word	0x080099cd
 80098f4:	6833      	ldr	r3, [r6, #0]
 80098f6:	1d1a      	adds	r2, r3, #4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6032      	str	r2, [r6, #0]
 80098fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009904:	2301      	movs	r3, #1
 8009906:	e09e      	b.n	8009a46 <_printf_i+0x1ea>
 8009908:	6833      	ldr	r3, [r6, #0]
 800990a:	6820      	ldr	r0, [r4, #0]
 800990c:	1d19      	adds	r1, r3, #4
 800990e:	6031      	str	r1, [r6, #0]
 8009910:	0606      	lsls	r6, r0, #24
 8009912:	d501      	bpl.n	8009918 <_printf_i+0xbc>
 8009914:	681d      	ldr	r5, [r3, #0]
 8009916:	e003      	b.n	8009920 <_printf_i+0xc4>
 8009918:	0645      	lsls	r5, r0, #25
 800991a:	d5fb      	bpl.n	8009914 <_printf_i+0xb8>
 800991c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009920:	2d00      	cmp	r5, #0
 8009922:	da03      	bge.n	800992c <_printf_i+0xd0>
 8009924:	232d      	movs	r3, #45	@ 0x2d
 8009926:	426d      	negs	r5, r5
 8009928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800992c:	230a      	movs	r3, #10
 800992e:	4859      	ldr	r0, [pc, #356]	@ (8009a94 <_printf_i+0x238>)
 8009930:	e011      	b.n	8009956 <_printf_i+0xfa>
 8009932:	6821      	ldr	r1, [r4, #0]
 8009934:	6833      	ldr	r3, [r6, #0]
 8009936:	0608      	lsls	r0, r1, #24
 8009938:	f853 5b04 	ldr.w	r5, [r3], #4
 800993c:	d402      	bmi.n	8009944 <_printf_i+0xe8>
 800993e:	0649      	lsls	r1, r1, #25
 8009940:	bf48      	it	mi
 8009942:	b2ad      	uxthmi	r5, r5
 8009944:	2f6f      	cmp	r7, #111	@ 0x6f
 8009946:	6033      	str	r3, [r6, #0]
 8009948:	bf14      	ite	ne
 800994a:	230a      	movne	r3, #10
 800994c:	2308      	moveq	r3, #8
 800994e:	4851      	ldr	r0, [pc, #324]	@ (8009a94 <_printf_i+0x238>)
 8009950:	2100      	movs	r1, #0
 8009952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009956:	6866      	ldr	r6, [r4, #4]
 8009958:	2e00      	cmp	r6, #0
 800995a:	bfa8      	it	ge
 800995c:	6821      	ldrge	r1, [r4, #0]
 800995e:	60a6      	str	r6, [r4, #8]
 8009960:	bfa4      	itt	ge
 8009962:	f021 0104 	bicge.w	r1, r1, #4
 8009966:	6021      	strge	r1, [r4, #0]
 8009968:	b90d      	cbnz	r5, 800996e <_printf_i+0x112>
 800996a:	2e00      	cmp	r6, #0
 800996c:	d04b      	beq.n	8009a06 <_printf_i+0x1aa>
 800996e:	4616      	mov	r6, r2
 8009970:	fbb5 f1f3 	udiv	r1, r5, r3
 8009974:	fb03 5711 	mls	r7, r3, r1, r5
 8009978:	5dc7      	ldrb	r7, [r0, r7]
 800997a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800997e:	462f      	mov	r7, r5
 8009980:	42bb      	cmp	r3, r7
 8009982:	460d      	mov	r5, r1
 8009984:	d9f4      	bls.n	8009970 <_printf_i+0x114>
 8009986:	2b08      	cmp	r3, #8
 8009988:	d10b      	bne.n	80099a2 <_printf_i+0x146>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	07df      	lsls	r7, r3, #31
 800998e:	d508      	bpl.n	80099a2 <_printf_i+0x146>
 8009990:	6923      	ldr	r3, [r4, #16]
 8009992:	6861      	ldr	r1, [r4, #4]
 8009994:	4299      	cmp	r1, r3
 8009996:	bfde      	ittt	le
 8009998:	2330      	movle	r3, #48	@ 0x30
 800999a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800999e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099a2:	1b92      	subs	r2, r2, r6
 80099a4:	6122      	str	r2, [r4, #16]
 80099a6:	464b      	mov	r3, r9
 80099a8:	4621      	mov	r1, r4
 80099aa:	4640      	mov	r0, r8
 80099ac:	f8cd a000 	str.w	sl, [sp]
 80099b0:	aa03      	add	r2, sp, #12
 80099b2:	f7ff fee1 	bl	8009778 <_printf_common>
 80099b6:	3001      	adds	r0, #1
 80099b8:	d14a      	bne.n	8009a50 <_printf_i+0x1f4>
 80099ba:	f04f 30ff 	mov.w	r0, #4294967295
 80099be:	b004      	add	sp, #16
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	f043 0320 	orr.w	r3, r3, #32
 80099ca:	6023      	str	r3, [r4, #0]
 80099cc:	2778      	movs	r7, #120	@ 0x78
 80099ce:	4832      	ldr	r0, [pc, #200]	@ (8009a98 <_printf_i+0x23c>)
 80099d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	6831      	ldr	r1, [r6, #0]
 80099d8:	061f      	lsls	r7, r3, #24
 80099da:	f851 5b04 	ldr.w	r5, [r1], #4
 80099de:	d402      	bmi.n	80099e6 <_printf_i+0x18a>
 80099e0:	065f      	lsls	r7, r3, #25
 80099e2:	bf48      	it	mi
 80099e4:	b2ad      	uxthmi	r5, r5
 80099e6:	6031      	str	r1, [r6, #0]
 80099e8:	07d9      	lsls	r1, r3, #31
 80099ea:	bf44      	itt	mi
 80099ec:	f043 0320 	orrmi.w	r3, r3, #32
 80099f0:	6023      	strmi	r3, [r4, #0]
 80099f2:	b11d      	cbz	r5, 80099fc <_printf_i+0x1a0>
 80099f4:	2310      	movs	r3, #16
 80099f6:	e7ab      	b.n	8009950 <_printf_i+0xf4>
 80099f8:	4826      	ldr	r0, [pc, #152]	@ (8009a94 <_printf_i+0x238>)
 80099fa:	e7e9      	b.n	80099d0 <_printf_i+0x174>
 80099fc:	6823      	ldr	r3, [r4, #0]
 80099fe:	f023 0320 	bic.w	r3, r3, #32
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	e7f6      	b.n	80099f4 <_printf_i+0x198>
 8009a06:	4616      	mov	r6, r2
 8009a08:	e7bd      	b.n	8009986 <_printf_i+0x12a>
 8009a0a:	6833      	ldr	r3, [r6, #0]
 8009a0c:	6825      	ldr	r5, [r4, #0]
 8009a0e:	1d18      	adds	r0, r3, #4
 8009a10:	6961      	ldr	r1, [r4, #20]
 8009a12:	6030      	str	r0, [r6, #0]
 8009a14:	062e      	lsls	r6, r5, #24
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	d501      	bpl.n	8009a1e <_printf_i+0x1c2>
 8009a1a:	6019      	str	r1, [r3, #0]
 8009a1c:	e002      	b.n	8009a24 <_printf_i+0x1c8>
 8009a1e:	0668      	lsls	r0, r5, #25
 8009a20:	d5fb      	bpl.n	8009a1a <_printf_i+0x1be>
 8009a22:	8019      	strh	r1, [r3, #0]
 8009a24:	2300      	movs	r3, #0
 8009a26:	4616      	mov	r6, r2
 8009a28:	6123      	str	r3, [r4, #16]
 8009a2a:	e7bc      	b.n	80099a6 <_printf_i+0x14a>
 8009a2c:	6833      	ldr	r3, [r6, #0]
 8009a2e:	2100      	movs	r1, #0
 8009a30:	1d1a      	adds	r2, r3, #4
 8009a32:	6032      	str	r2, [r6, #0]
 8009a34:	681e      	ldr	r6, [r3, #0]
 8009a36:	6862      	ldr	r2, [r4, #4]
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f000 f859 	bl	8009af0 <memchr>
 8009a3e:	b108      	cbz	r0, 8009a44 <_printf_i+0x1e8>
 8009a40:	1b80      	subs	r0, r0, r6
 8009a42:	6060      	str	r0, [r4, #4]
 8009a44:	6863      	ldr	r3, [r4, #4]
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a4e:	e7aa      	b.n	80099a6 <_printf_i+0x14a>
 8009a50:	4632      	mov	r2, r6
 8009a52:	4649      	mov	r1, r9
 8009a54:	4640      	mov	r0, r8
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	47d0      	blx	sl
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d0ad      	beq.n	80099ba <_printf_i+0x15e>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	079b      	lsls	r3, r3, #30
 8009a62:	d413      	bmi.n	8009a8c <_printf_i+0x230>
 8009a64:	68e0      	ldr	r0, [r4, #12]
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	4298      	cmp	r0, r3
 8009a6a:	bfb8      	it	lt
 8009a6c:	4618      	movlt	r0, r3
 8009a6e:	e7a6      	b.n	80099be <_printf_i+0x162>
 8009a70:	2301      	movs	r3, #1
 8009a72:	4632      	mov	r2, r6
 8009a74:	4649      	mov	r1, r9
 8009a76:	4640      	mov	r0, r8
 8009a78:	47d0      	blx	sl
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d09d      	beq.n	80099ba <_printf_i+0x15e>
 8009a7e:	3501      	adds	r5, #1
 8009a80:	68e3      	ldr	r3, [r4, #12]
 8009a82:	9903      	ldr	r1, [sp, #12]
 8009a84:	1a5b      	subs	r3, r3, r1
 8009a86:	42ab      	cmp	r3, r5
 8009a88:	dcf2      	bgt.n	8009a70 <_printf_i+0x214>
 8009a8a:	e7eb      	b.n	8009a64 <_printf_i+0x208>
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	f104 0619 	add.w	r6, r4, #25
 8009a92:	e7f5      	b.n	8009a80 <_printf_i+0x224>
 8009a94:	0800b453 	.word	0x0800b453
 8009a98:	0800b464 	.word	0x0800b464

08009a9c <memmove>:
 8009a9c:	4288      	cmp	r0, r1
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	eb01 0402 	add.w	r4, r1, r2
 8009aa4:	d902      	bls.n	8009aac <memmove+0x10>
 8009aa6:	4284      	cmp	r4, r0
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	d807      	bhi.n	8009abc <memmove+0x20>
 8009aac:	1e43      	subs	r3, r0, #1
 8009aae:	42a1      	cmp	r1, r4
 8009ab0:	d008      	beq.n	8009ac4 <memmove+0x28>
 8009ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aba:	e7f8      	b.n	8009aae <memmove+0x12>
 8009abc:	4601      	mov	r1, r0
 8009abe:	4402      	add	r2, r0
 8009ac0:	428a      	cmp	r2, r1
 8009ac2:	d100      	bne.n	8009ac6 <memmove+0x2a>
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ace:	e7f7      	b.n	8009ac0 <memmove+0x24>

08009ad0 <_sbrk_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	4d05      	ldr	r5, [pc, #20]	@ (8009aec <_sbrk_r+0x1c>)
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f7fc ff52 	bl	8006984 <_sbrk>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_sbrk_r+0x1a>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_sbrk_r+0x1a>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	200017f0 	.word	0x200017f0

08009af0 <memchr>:
 8009af0:	4603      	mov	r3, r0
 8009af2:	b510      	push	{r4, lr}
 8009af4:	b2c9      	uxtb	r1, r1
 8009af6:	4402      	add	r2, r0
 8009af8:	4293      	cmp	r3, r2
 8009afa:	4618      	mov	r0, r3
 8009afc:	d101      	bne.n	8009b02 <memchr+0x12>
 8009afe:	2000      	movs	r0, #0
 8009b00:	e003      	b.n	8009b0a <memchr+0x1a>
 8009b02:	7804      	ldrb	r4, [r0, #0]
 8009b04:	3301      	adds	r3, #1
 8009b06:	428c      	cmp	r4, r1
 8009b08:	d1f6      	bne.n	8009af8 <memchr+0x8>
 8009b0a:	bd10      	pop	{r4, pc}

08009b0c <memcpy>:
 8009b0c:	440a      	add	r2, r1
 8009b0e:	4291      	cmp	r1, r2
 8009b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b14:	d100      	bne.n	8009b18 <memcpy+0xc>
 8009b16:	4770      	bx	lr
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1e:	4291      	cmp	r1, r2
 8009b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b24:	d1f9      	bne.n	8009b1a <memcpy+0xe>
 8009b26:	bd10      	pop	{r4, pc}

08009b28 <_realloc_r>:
 8009b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b2c:	4680      	mov	r8, r0
 8009b2e:	4615      	mov	r5, r2
 8009b30:	460c      	mov	r4, r1
 8009b32:	b921      	cbnz	r1, 8009b3e <_realloc_r+0x16>
 8009b34:	4611      	mov	r1, r2
 8009b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3a:	f7ff bc39 	b.w	80093b0 <_malloc_r>
 8009b3e:	b92a      	cbnz	r2, 8009b4c <_realloc_r+0x24>
 8009b40:	f7ff fbcc 	bl	80092dc <_free_r>
 8009b44:	2400      	movs	r4, #0
 8009b46:	4620      	mov	r0, r4
 8009b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b4c:	f000 f81a 	bl	8009b84 <_malloc_usable_size_r>
 8009b50:	4285      	cmp	r5, r0
 8009b52:	4606      	mov	r6, r0
 8009b54:	d802      	bhi.n	8009b5c <_realloc_r+0x34>
 8009b56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b5a:	d8f4      	bhi.n	8009b46 <_realloc_r+0x1e>
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4640      	mov	r0, r8
 8009b60:	f7ff fc26 	bl	80093b0 <_malloc_r>
 8009b64:	4607      	mov	r7, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d0ec      	beq.n	8009b44 <_realloc_r+0x1c>
 8009b6a:	42b5      	cmp	r5, r6
 8009b6c:	462a      	mov	r2, r5
 8009b6e:	4621      	mov	r1, r4
 8009b70:	bf28      	it	cs
 8009b72:	4632      	movcs	r2, r6
 8009b74:	f7ff ffca 	bl	8009b0c <memcpy>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	f7ff fbae 	bl	80092dc <_free_r>
 8009b80:	463c      	mov	r4, r7
 8009b82:	e7e0      	b.n	8009b46 <_realloc_r+0x1e>

08009b84 <_malloc_usable_size_r>:
 8009b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b88:	1f18      	subs	r0, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bfbc      	itt	lt
 8009b8e:	580b      	ldrlt	r3, [r1, r0]
 8009b90:	18c0      	addlt	r0, r0, r3
 8009b92:	4770      	bx	lr

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
